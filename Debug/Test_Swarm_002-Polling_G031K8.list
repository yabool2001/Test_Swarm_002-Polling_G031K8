
Test_Swarm_002-Polling_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005848  08005848  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005850  08005850  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08005858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200000f4  0800594c  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800594c  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143d1  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290b  00000000  00000000  000344ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00036df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00037fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186cc  00000000  00000000  00039050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001422d  00000000  00000000  0005171c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b04b  00000000  00000000  00065949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  001009e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000f4 	.word	0x200000f4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005498 	.word	0x08005498

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f8 	.word	0x200000f8
 8000100:	08005498 	.word	0x08005498

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 feb5 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f947 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fa73 	bl	8000b38 <MX_GPIO_Init>
  MX_RTC_Init();
 8000652:	f000 f999 	bl	8000988 <MX_RTC_Init>
  MX_TIM14_Init();
 8000656:	f000 f9cf 	bl	80009f8 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 800065a:	f000 fa1f 	bl	8000a9c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800065e:	f000 f9f3 	bl	8000a48 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000662:	4b75      	ldr	r3, [pc, #468]	; (8000838 <main+0x1f8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2202      	movs	r2, #2
 8000668:	4252      	negs	r2, r2
 800066a:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT ( &htim16 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 800066c:	4b73      	ldr	r3, [pc, #460]	; (800083c <main+0x1fc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2202      	movs	r2, #2
 8000672:	4252      	negs	r2, r2
 8000674:	611a      	str	r2, [r3, #16]
  //wait_for_tim16x ( 2 ) ;
  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 8000676:	4b72      	ldr	r3, [pc, #456]	; (8000840 <main+0x200>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	4b72      	ldr	r3, [pc, #456]	; (8000844 <main+0x204>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2201      	movs	r2, #1
 8000680:	0019      	movs	r1, r3
 8000682:	f000 fa9d 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 1 )
 8000686:	4b70      	ldr	r3, [pc, #448]	; (8000848 <main+0x208>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d107      	bne.n	800069e <main+0x5e>
	  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 800068e:	4b6f      	ldr	r3, [pc, #444]	; (800084c <main+0x20c>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	4b6f      	ldr	r3, [pc, #444]	; (8000850 <main+0x210>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2202      	movs	r2, #2
 8000698:	0019      	movs	r1, r3
 800069a:	f000 fa91 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 2 )
 800069e:	4b6a      	ldr	r3, [pc, #424]	; (8000848 <main+0x208>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d107      	bne.n	80006b6 <main+0x76>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006a6:	4b6b      	ldr	r3, [pc, #428]	; (8000854 <main+0x214>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	4b6b      	ldr	r3, [pc, #428]	; (8000858 <main+0x218>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2203      	movs	r2, #3
 80006b0:	0019      	movs	r1, r3
 80006b2:	f000 fa85 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 3 )
 80006b6:	4b64      	ldr	r3, [pc, #400]	; (8000848 <main+0x208>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d107      	bne.n	80006ce <main+0x8e>
	  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006be:	4b67      	ldr	r3, [pc, #412]	; (800085c <main+0x21c>)
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	4b67      	ldr	r3, [pc, #412]	; (8000860 <main+0x220>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2204      	movs	r2, #4
 80006c8:	0019      	movs	r1, r3
 80006ca:	f000 fa79 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 4 )
 80006ce:	4b5e      	ldr	r3, [pc, #376]	; (8000848 <main+0x208>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d107      	bne.n	80006e6 <main+0xa6>
	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006d6:	4b63      	ldr	r3, [pc, #396]	; (8000864 <main+0x224>)
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	4b63      	ldr	r3, [pc, #396]	; (8000868 <main+0x228>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2205      	movs	r2, #5
 80006e0:	0019      	movs	r1, r3
 80006e2:	f000 fa6d 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 5 )
 80006e6:	4b58      	ldr	r3, [pc, #352]	; (8000848 <main+0x208>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	d107      	bne.n	80006fe <main+0xbe>
	  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 6 ) ;
 80006ee:	4b5f      	ldr	r3, [pc, #380]	; (800086c <main+0x22c>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <main+0x230>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2206      	movs	r2, #6
 80006f8:	0019      	movs	r1, r3
 80006fa:	f000 fa61 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 6 )
 80006fe:	4b52      	ldr	r3, [pc, #328]	; (8000848 <main+0x208>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b06      	cmp	r3, #6
 8000704:	d107      	bne.n	8000716 <main+0xd6>
	  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 7 ) ;
 8000706:	4b5b      	ldr	r3, [pc, #364]	; (8000874 <main+0x234>)
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	4b5b      	ldr	r3, [pc, #364]	; (8000878 <main+0x238>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2207      	movs	r2, #7
 8000710:	0019      	movs	r1, r3
 8000712:	f000 fa55 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 7 )
 8000716:	4b4c      	ldr	r3, [pc, #304]	; (8000848 <main+0x208>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b07      	cmp	r3, #7
 800071c:	d107      	bne.n	800072e <main+0xee>
	  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 8 ) ;
 800071e:	4b57      	ldr	r3, [pc, #348]	; (800087c <main+0x23c>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	4b57      	ldr	r3, [pc, #348]	; (8000880 <main+0x240>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2208      	movs	r2, #8
 8000728:	0019      	movs	r1, r3
 800072a:	f000 fa49 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 8 )
 800072e:	4b46      	ldr	r3, [pc, #280]	; (8000848 <main+0x208>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b08      	cmp	r3, #8
 8000734:	d107      	bne.n	8000746 <main+0x106>
	  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 9 ) ;
 8000736:	4b53      	ldr	r3, [pc, #332]	; (8000884 <main+0x244>)
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	4b53      	ldr	r3, [pc, #332]	; (8000888 <main+0x248>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2209      	movs	r2, #9
 8000740:	0019      	movs	r1, r3
 8000742:	f000 fa3d 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 9 )
 8000746:	4b40      	ldr	r3, [pc, #256]	; (8000848 <main+0x208>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b09      	cmp	r3, #9
 800074c:	d107      	bne.n	800075e <main+0x11e>
	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 10 ) ;
 800074e:	4b4f      	ldr	r3, [pc, #316]	; (800088c <main+0x24c>)
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	4b4f      	ldr	r3, [pc, #316]	; (8000890 <main+0x250>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	220a      	movs	r2, #10
 8000758:	0019      	movs	r1, r3
 800075a:	f000 fa31 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 10 )
 800075e:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <main+0x208>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b0a      	cmp	r3, #10
 8000764:	d107      	bne.n	8000776 <main+0x136>
	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 11 ) ;
 8000766:	4b4b      	ldr	r3, [pc, #300]	; (8000894 <main+0x254>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	4b4b      	ldr	r3, [pc, #300]	; (8000898 <main+0x258>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	220b      	movs	r2, #11
 8000770:	0019      	movs	r1, r3
 8000772:	f000 fa25 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 11 )
 8000776:	4b34      	ldr	r3, [pc, #208]	; (8000848 <main+0x208>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b0b      	cmp	r3, #11
 800077c:	d107      	bne.n	800078e <main+0x14e>
	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 12 ) ;
 800077e:	4b47      	ldr	r3, [pc, #284]	; (800089c <main+0x25c>)
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	4b47      	ldr	r3, [pc, #284]	; (80008a0 <main+0x260>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	220c      	movs	r2, #12
 8000788:	0019      	movs	r1, r3
 800078a:	f000 fa19 	bl	8000bc0 <send2swarm_at_command>
  if ( checklist == 12 )
 800078e:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <main+0x208>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b0c      	cmp	r3, #12
 8000794:	d107      	bne.n	80007a6 <main+0x166>
	  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 13 ) ;
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <main+0x264>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <main+0x268>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	220d      	movs	r2, #13
 80007a0:	0019      	movs	r1, r3
 80007a2:	f000 fa0d 	bl	8000bc0 <send2swarm_at_command>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( checklist == 13 )
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <main+0x208>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b0d      	cmp	r3, #13
 80007ac:	d107      	bne.n	80007be <main+0x17e>
		  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 14 ) ;
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <main+0x26c>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <main+0x270>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	220e      	movs	r2, #14
 80007b8:	0019      	movs	r1, r3
 80007ba:	f000 fa01 	bl	8000bc0 <send2swarm_at_command>
	  //wait_for_tim16x ( 6 ) ;
	  if ( checklist == 14 )
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <main+0x208>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b0e      	cmp	r3, #14
 80007c4:	d107      	bne.n	80007d6 <main+0x196>
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007c6:	4b3b      	ldr	r3, [pc, #236]	; (80008b4 <main+0x274>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <main+0x278>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	220f      	movs	r2, #15
 80007d0:	0019      	movs	r1, r3
 80007d2:	f000 f9f5 	bl	8000bc0 <send2swarm_at_command>
	  if ( checklist == 15 )
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <main+0x208>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b0f      	cmp	r3, #15
 80007dc:	d107      	bne.n	80007ee <main+0x1ae>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 80007de:	4b37      	ldr	r3, [pc, #220]	; (80008bc <main+0x27c>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <main+0x280>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2210      	movs	r2, #16
 80007e8:	0019      	movs	r1, r3
 80007ea:	f000 f9e9 	bl	8000bc0 <send2swarm_at_command>
	  if ( checklist == 16 )
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <main+0x208>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b10      	cmp	r3, #16
 80007f4:	d10f      	bne.n	8000816 <main+0x1d6>
	  {
		  snprintf ( td_at_comm , TD_PAYLOAD_BUFF_SIZE , "$TD HD=60,\"%s;%s\"" , pw_buff , gn_buff ) ;
 80007f6:	4933      	ldr	r1, [pc, #204]	; (80008c4 <main+0x284>)
 80007f8:	4a33      	ldr	r2, [pc, #204]	; (80008c8 <main+0x288>)
 80007fa:	4834      	ldr	r0, [pc, #208]	; (80008cc <main+0x28c>)
 80007fc:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <main+0x290>)
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	000b      	movs	r3, r1
 8000802:	215a      	movs	r1, #90	; 0x5a
 8000804:	f003 fb80 	bl	8003f08 <sniprintf>
		  send2swarm_at_command ( td_at_comm , td_ok_answer , 17 ) ;
 8000808:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <main+0x294>)
 800080a:	6819      	ldr	r1, [r3, #0]
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <main+0x28c>)
 800080e:	2211      	movs	r2, #17
 8000810:	0018      	movs	r0, r3
 8000812:	f000 f9d5 	bl	8000bc0 <send2swarm_at_command>
	  }
	  else
	  {
		  //send2swarm_at_command ( sl_60s_at_comm , sl_ok_answer , 18 ) ; // TEST Swarm sleep for 1 minutes
	  }
	  wait_for_tim16x ( 1 ) ;
 8000816:	2001      	movs	r0, #1
 8000818:	f000 fafe 	bl	8000e18 <wait_for_tim16x>
	  rx_buff[0] = 0 ;
 800081c:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <main+0x298>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	  pw_buff[0] = 0 ;
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <main+0x284>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
	  gn_buff[0] = 0 ;
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <main+0x290>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
	  checklist = 13 ;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <main+0x208>)
 8000830:	220d      	movs	r2, #13
 8000832:	701a      	strb	r2, [r3, #0]
	  if ( checklist == 13 )
 8000834:	e7b7      	b.n	80007a6 <main+0x166>
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	2000013c 	.word	0x2000013c
 800083c:	20000188 	.word	0x20000188
 8000840:	20000000 	.word	0x20000000
 8000844:	20000040 	.word	0x20000040
 8000848:	20000268 	.word	0x20000268
 800084c:	20000004 	.word	0x20000004
 8000850:	20000044 	.word	0x20000044
 8000854:	20000008 	.word	0x20000008
 8000858:	20000048 	.word	0x20000048
 800085c:	2000000c 	.word	0x2000000c
 8000860:	2000004c 	.word	0x2000004c
 8000864:	20000010 	.word	0x20000010
 8000868:	20000050 	.word	0x20000050
 800086c:	20000018 	.word	0x20000018
 8000870:	20000058 	.word	0x20000058
 8000874:	2000001c 	.word	0x2000001c
 8000878:	2000005c 	.word	0x2000005c
 800087c:	20000020 	.word	0x20000020
 8000880:	20000060 	.word	0x20000060
 8000884:	20000024 	.word	0x20000024
 8000888:	20000064 	.word	0x20000064
 800088c:	20000028 	.word	0x20000028
 8000890:	20000068 	.word	0x20000068
 8000894:	2000002c 	.word	0x2000002c
 8000898:	2000006c 	.word	0x2000006c
 800089c:	20000030 	.word	0x20000030
 80008a0:	20000070 	.word	0x20000070
 80008a4:	20000034 	.word	0x20000034
 80008a8:	20000074 	.word	0x20000074
 80008ac:	20000014 	.word	0x20000014
 80008b0:	20000054 	.word	0x20000054
 80008b4:	20000038 	.word	0x20000038
 80008b8:	20000078 	.word	0x20000078
 80008bc:	2000003c 	.word	0x2000003c
 80008c0:	2000007c 	.word	0x2000007c
 80008c4:	20000430 	.word	0x20000430
 80008c8:	08005644 	.word	0x08005644
 80008cc:	2000045c 	.word	0x2000045c
 80008d0:	20000438 	.word	0x20000438
 80008d4:	20000080 	.word	0x20000080
 80008d8:	2000026c 	.word	0x2000026c

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b093      	sub	sp, #76	; 0x4c
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	2410      	movs	r4, #16
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2338      	movs	r3, #56	; 0x38
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f003 fb03 	bl	8003ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f2:	003b      	movs	r3, r7
 80008f4:	0018      	movs	r0, r3
 80008f6:	2310      	movs	r3, #16
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f003 fafc 	bl	8003ef8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	0018      	movs	r0, r3
 8000906:	f001 f849 	bl	800199c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800090a:	f001 f839 	bl	8001980 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <SystemClock_Config+0xa8>)
 8000910:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <SystemClock_Config+0xa8>)
 8000914:	2118      	movs	r1, #24
 8000916:	438a      	bics	r2, r1
 8000918:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2206      	movs	r2, #6
 800091e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2201      	movs	r2, #1
 8000924:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0052      	lsls	r2, r2, #1
 800092c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2240      	movs	r2, #64	; 0x40
 8000938:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	193b      	adds	r3, r7, r4
 8000942:	0018      	movs	r0, r3
 8000944:	f001 f876 	bl	8001a34 <HAL_RCC_OscConfig>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800094c:	f000 faf0 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	003b      	movs	r3, r7
 8000952:	2207      	movs	r2, #7
 8000954:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000956:	003b      	movs	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	003b      	movs	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000962:	003b      	movs	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000968:	003b      	movs	r3, r7
 800096a:	2100      	movs	r1, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fb7b 	bl	8002068 <HAL_RCC_ClockConfig>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000976:	f000 fadb 	bl	8000f30 <Error_Handler>
  }
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b013      	add	sp, #76	; 0x4c
 8000980:	bd90      	pop	{r4, r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40021000 	.word	0x40021000

08000988 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_RTC_Init+0x68>)
 800098e:	4a19      	ldr	r2, [pc, #100]	; (80009f4 <MX_RTC_Init+0x6c>)
 8000990:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_RTC_Init+0x68>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_RTC_Init+0x68>)
 800099a:	227f      	movs	r2, #127	; 0x7f
 800099c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_RTC_Init+0x68>)
 80009a0:	22ff      	movs	r2, #255	; 0xff
 80009a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_RTC_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_RTC_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_RTC_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_RTC_Init+0x68>)
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	05d2      	lsls	r2, r2, #23
 80009bc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_RTC_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_RTC_Init+0x68>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fe72 	bl	80026b0 <HAL_RTC_Init>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80009d0:	f000 faae 	bl	8000f30 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80009d4:	23e1      	movs	r3, #225	; 0xe1
 80009d6:	0119      	lsls	r1, r3, #4
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <MX_RTC_Init+0x68>)
 80009da:	2204      	movs	r2, #4
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 ffb7 	bl	8002950 <HAL_RTCEx_SetWakeUpTimer_IT>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80009e6:	f000 faa3 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000110 	.word	0x20000110
 80009f4:	40002800 	.word	0x40002800

080009f8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_TIM14_Init+0x40>)
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <MX_TIM14_Init+0x44>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <MX_TIM14_Init+0x40>)
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <MX_TIM14_Init+0x48>)
 8000a06:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_TIM14_Init+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_TIM14_Init+0x40>)
 8000a10:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <MX_TIM14_Init+0x4c>)
 8000a12:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_TIM14_Init+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_TIM14_Init+0x40>)
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <MX_TIM14_Init+0x40>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 f854 	bl	8002ad0 <HAL_TIM_Base_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a2c:	f000 fa80 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	2000013c 	.word	0x2000013c
 8000a3c:	40002000 	.word	0x40002000
 8000a40:	00003e7f 	.word	0x00003e7f
 8000a44:	000007cf 	.word	0x000007cf

08000a48 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_TIM16_Init+0x44>)
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <MX_TIM16_Init+0x48>)
 8000a50:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_TIM16_Init+0x44>)
 8000a54:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <MX_TIM16_Init+0x4c>)
 8000a56:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_TIM16_Init+0x44>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_TIM16_Init+0x44>)
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <MX_TIM16_Init+0x50>)
 8000a62:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_TIM16_Init+0x44>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_TIM16_Init+0x44>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_TIM16_Init+0x44>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <MX_TIM16_Init+0x44>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f002 f829 	bl	8002ad0 <HAL_TIM_Base_Init>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000a82:	f000 fa55 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000188 	.word	0x20000188
 8000a90:	40014400 	.word	0x40014400
 8000a94:	00003e7f 	.word	0x00003e7f
 8000a98:	0000270f 	.word	0x0000270f

08000a9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000aa2:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <MX_USART1_UART_Init+0x98>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000aa8:	22e1      	movs	r2, #225	; 0xe1
 8000aaa:	0252      	lsls	r2, r2, #9
 8000aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 faac 	bl	8003044 <HAL_UART_Init>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000af0:	f000 fa1e 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000af6:	2100      	movs	r1, #0
 8000af8:	0018      	movs	r0, r3
 8000afa:	f003 f8f3 	bl	8003ce4 <HAL_UARTEx_SetTxFifoThreshold>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b02:	f000 fa15 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f003 f92a 	bl	8003d64 <HAL_UARTEx_SetRxFifoThreshold>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b14:	f000 fa0c 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <MX_USART1_UART_Init+0x94>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f003 f8a8 	bl	8003c70 <HAL_UARTEx_DisableFifoMode>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b24:	f000 fa04 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	200001d4 	.word	0x200001d4
 8000b34:	40013800 	.word	0x40013800

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	240c      	movs	r4, #12
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	0018      	movs	r0, r3
 8000b44:	2314      	movs	r3, #20
 8000b46:	001a      	movs	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f003 f9d5 	bl	8003ef8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_GPIO_Init+0x80>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_GPIO_Init+0x80>)
 8000b54:	2104      	movs	r1, #4
 8000b56:	430a      	orrs	r2, r1
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_GPIO_Init+0x80>)
 8000b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_GPIO_Init+0x80>)
 8000b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_GPIO_Init+0x80>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	635a      	str	r2, [r3, #52]	; 0x34
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_GPIO_Init+0x80>)
 8000b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b76:	2201      	movs	r2, #1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_GPIO_Init+0x84>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fedd 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000b8a:	0021      	movs	r1, r4
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2240      	movs	r2, #64	; 0x40
 8000b90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2201      	movs	r2, #1
 8000b96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <MX_GPIO_Init+0x84>)
 8000ba8:	0019      	movs	r1, r3
 8000baa:	0010      	movs	r0, r2
 8000bac:	f000 fd66 	bl	800167c <HAL_GPIO_Init>

}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b009      	add	sp, #36	; 0x24
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	50000800 	.word	0x50000800

08000bc0 <send2swarm_at_command>:

/* USER CODE BEGIN 4 */
void send2swarm_at_command ( const char* at_command , const char* answer , uint8_t step )
{
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	701a      	strb	r2, [r3, #0]
	//uint32_t temp_tickstart = HAL_GetTick () ; //temp
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff fa97 	bl	8000104 <strlen>
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	2517      	movs	r5, #23
 8000bda:	197c      	adds	r4, r7, r5
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 f947 	bl	8000e74 <nmea_checksum>
 8000be6:	0003      	movs	r3, r0
 8000be8:	7023      	strb	r3, [r4, #0]

	sprintf ( (char*) tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000bea:	197b      	adds	r3, r7, r5
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4955      	ldr	r1, [pc, #340]	; (8000d48 <send2swarm_at_command+0x188>)
 8000bf2:	4856      	ldr	r0, [pc, #344]	; (8000d4c <send2swarm_at_command+0x18c>)
 8000bf4:	f003 f9bc 	bl	8003f70 <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , SWARM_UART_TX_TIMEOUT ) ;
 8000bf8:	4b54      	ldr	r3, [pc, #336]	; (8000d4c <send2swarm_at_command+0x18c>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fa82 	bl	8000104 <strlen>
 8000c00:	0003      	movs	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	23fa      	movs	r3, #250	; 0xfa
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4950      	ldr	r1, [pc, #320]	; (8000d4c <send2swarm_at_command+0x18c>)
 8000c0a:	4851      	ldr	r0, [pc, #324]	; (8000d50 <send2swarm_at_command+0x190>)
 8000c0c:	f002 fa70 	bl	80030f0 <HAL_UART_Transmit>
 8000c10:	0003      	movs	r3, r0
 8000c12:	001a      	movs	r2, r3
 8000c14:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <send2swarm_at_command+0x194>)
 8000c16:	701a      	strb	r2, [r3, #0]

	/* Wait of SWARM UARt RX */
	tim16_on = 1 ;
 8000c18:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <send2swarm_at_command+0x198>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000c1e:	4b4f      	ldr	r3, [pc, #316]	; (8000d5c <send2swarm_at_command+0x19c>)
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 ffad 	bl	8002b80 <HAL_TIM_Base_Start_IT>
	while ( tim16_on )
 8000c26:	e01d      	b.n	8000c64 <send2swarm_at_command+0xa4>
	{
		uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
 8000c28:	494d      	ldr	r1, [pc, #308]	; (8000d60 <send2swarm_at_command+0x1a0>)
 8000c2a:	4849      	ldr	r0, [pc, #292]	; (8000d50 <send2swarm_at_command+0x190>)
 8000c2c:	23fa      	movs	r3, #250	; 0xfa
 8000c2e:	22c8      	movs	r2, #200	; 0xc8
 8000c30:	f002 fafa 	bl	8003228 <HAL_UART_Receive>
 8000c34:	0003      	movs	r3, r0
 8000c36:	001a      	movs	r2, r3
 8000c38:	4b46      	ldr	r3, [pc, #280]	; (8000d54 <send2swarm_at_command+0x194>)
 8000c3a:	701a      	strb	r2, [r3, #0]
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff fa60 	bl	8000104 <strlen>
 8000c44:	0002      	movs	r2, r0
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <send2swarm_at_command+0x1a0>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f003 f9b0 	bl	8003fb0 <strncmp>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d104      	bne.n	8000c5e <send2swarm_at_command+0x9e>
		{
			checklist = step ;
 8000c54:	4b43      	ldr	r3, [pc, #268]	; (8000d64 <send2swarm_at_command+0x1a4>)
 8000c56:	1dfa      	adds	r2, r7, #7
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	701a      	strb	r2, [r3, #0]
			break ;
 8000c5c:	e006      	b.n	8000c6c <send2swarm_at_command+0xac>
		}
		else
			rx_buff[0] = 0 ;
 8000c5e:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <send2swarm_at_command+0x1a0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
	while ( tim16_on )
 8000c64:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <send2swarm_at_command+0x198>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1dd      	bne.n	8000c28 <send2swarm_at_command+0x68>
	}
	if ( checklist != step && step != 17 )
 8000c6c:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <send2swarm_at_command+0x1a4>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	1dfa      	adds	r2, r7, #7
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d03d      	beq.n	8000cf4 <send2swarm_at_command+0x134>
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b11      	cmp	r3, #17
 8000c7e:	d039      	beq.n	8000cf4 <send2swarm_at_command+0x134>
	{
		uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , SWARM_UART_TX_TIMEOUT ) ;
 8000c80:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <send2swarm_at_command+0x18c>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fa3e 	bl	8000104 <strlen>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	23fa      	movs	r3, #250	; 0xfa
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	492e      	ldr	r1, [pc, #184]	; (8000d4c <send2swarm_at_command+0x18c>)
 8000c92:	482f      	ldr	r0, [pc, #188]	; (8000d50 <send2swarm_at_command+0x190>)
 8000c94:	f002 fa2c 	bl	80030f0 <HAL_UART_Transmit>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <send2swarm_at_command+0x194>)
 8000c9e:	701a      	strb	r2, [r3, #0]

		/* Wait of SWARM UARt RX */
		tim16_on = 1 ;
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <send2swarm_at_command+0x198>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <send2swarm_at_command+0x19c>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 ff69 	bl	8002b80 <HAL_TIM_Base_Start_IT>
		while ( tim16_on )
 8000cae:	e01d      	b.n	8000cec <send2swarm_at_command+0x12c>
		{
			uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
 8000cb0:	492b      	ldr	r1, [pc, #172]	; (8000d60 <send2swarm_at_command+0x1a0>)
 8000cb2:	4827      	ldr	r0, [pc, #156]	; (8000d50 <send2swarm_at_command+0x190>)
 8000cb4:	23fa      	movs	r3, #250	; 0xfa
 8000cb6:	22c8      	movs	r2, #200	; 0xc8
 8000cb8:	f002 fab6 	bl	8003228 <HAL_UART_Receive>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <send2swarm_at_command+0x194>)
 8000cc2:	701a      	strb	r2, [r3, #0]
			if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff fa1c 	bl	8000104 <strlen>
 8000ccc:	0002      	movs	r2, r0
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <send2swarm_at_command+0x1a0>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f003 f96c 	bl	8003fb0 <strncmp>
 8000cd8:	1e03      	subs	r3, r0, #0
 8000cda:	d104      	bne.n	8000ce6 <send2swarm_at_command+0x126>
			{
				checklist = step ;
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <send2swarm_at_command+0x1a4>)
 8000cde:	1dfa      	adds	r2, r7, #7
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	701a      	strb	r2, [r3, #0]
				break ;
 8000ce4:	e006      	b.n	8000cf4 <send2swarm_at_command+0x134>
			}
			else
				rx_buff[0] = 0 ;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <send2swarm_at_command+0x1a0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
		while ( tim16_on )
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <send2swarm_at_command+0x198>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1dd      	bne.n	8000cb0 <send2swarm_at_command+0xf0>
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
			checklist = step ;
	}
	*/

	if ( strncmp ( pw_mostrecent_at_comm , at_command , strlen ( pw_mostrecent_at_comm ) ) == 0 )
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <send2swarm_at_command+0x1a8>)
 8000cf6:	681c      	ldr	r4, [r3, #0]
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <send2swarm_at_command+0x1a8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff fa01 	bl	8000104 <strlen>
 8000d02:	0002      	movs	r2, r0
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	0019      	movs	r1, r3
 8000d08:	0020      	movs	r0, r4
 8000d0a:	f003 f951 	bl	8003fb0 <strncmp>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d101      	bne.n	8000d16 <send2swarm_at_command+0x156>
		pw2payload () ;
 8000d12:	f000 f82d 	bl	8000d70 <pw2payload>
	if ( strncmp ( gn_mostrecent_at_comm , at_command , strlen ( gn_mostrecent_at_comm ) ) == 0 )
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <send2swarm_at_command+0x1ac>)
 8000d18:	681c      	ldr	r4, [r3, #0]
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <send2swarm_at_command+0x1ac>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff f9f0 	bl	8000104 <strlen>
 8000d24:	0002      	movs	r2, r0
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	0019      	movs	r1, r3
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	f003 f940 	bl	8003fb0 <strncmp>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d101      	bne.n	8000d38 <send2swarm_at_command+0x178>
		gn2payload () ;
 8000d34:	f000 f846 	bl	8000dc4 <gn2payload>
	rx_buff[0] = 0 ;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <send2swarm_at_command+0x1a0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b006      	add	sp, #24
 8000d44:	bdb0      	pop	{r4, r5, r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	08005658 	.word	0x08005658
 8000d4c:	20000334 	.word	0x20000334
 8000d50:	200001d4 	.word	0x200001d4
 8000d54:	2000026b 	.word	0x2000026b
 8000d58:	2000026a 	.word	0x2000026a
 8000d5c:	20000188 	.word	0x20000188
 8000d60:	2000026c 	.word	0x2000026c
 8000d64:	20000268 	.word	0x20000268
 8000d68:	20000014 	.word	0x20000014
 8000d6c:	20000038 	.word	0x20000038

08000d70 <pw2payload>:

void pw2payload ()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <pw2payload+0x3c>)
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <pw2payload+0x40>)
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f003 f92a 	bl	8003fd4 <strtok>
 8000d80:	0002      	movs	r2, r0
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <pw2payload+0x44>)
 8000d84:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "," ) ;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <pw2payload+0x48>)
 8000d88:	0019      	movs	r1, r3
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f003 f922 	bl	8003fd4 <strtok>
 8000d90:	0002      	movs	r2, r0
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <pw2payload+0x44>)
 8000d94:	601a      	str	r2, [r3, #0]
	sprintf ( pw_buff , "%4s" , chunk ) ;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <pw2payload+0x44>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <pw2payload+0x4c>)
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <pw2payload+0x50>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f003 f8e6 	bl	8003f70 <siprintf>
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	08005664 	.word	0x08005664
 8000db0:	2000026c 	.word	0x2000026c
 8000db4:	200004b8 	.word	0x200004b8
 8000db8:	08005668 	.word	0x08005668
 8000dbc:	0800566c 	.word	0x0800566c
 8000dc0:	20000430 	.word	0x20000430

08000dc4 <gn2payload>:
void gn2payload ()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <gn2payload+0x3c>)
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <gn2payload+0x40>)
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f003 f900 	bl	8003fd4 <strtok>
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <gn2payload+0x44>)
 8000dd8:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "*" ) ;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <gn2payload+0x48>)
 8000ddc:	0019      	movs	r1, r3
 8000dde:	2000      	movs	r0, #0
 8000de0:	f003 f8f8 	bl	8003fd4 <strtok>
 8000de4:	0002      	movs	r2, r0
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <gn2payload+0x44>)
 8000de8:	601a      	str	r2, [r3, #0]
	sprintf ( (char*) gn_buff , "%s" , chunk ) ;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <gn2payload+0x44>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <gn2payload+0x4c>)
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <gn2payload+0x50>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f003 f8bc 	bl	8003f70 <siprintf>
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	08005664 	.word	0x08005664
 8000e04:	2000026c 	.word	0x2000026c
 8000e08:	200004b8 	.word	0x200004b8
 8000e0c:	08005670 	.word	0x08005670
 8000e10:	08005674 	.word	0x08005674
 8000e14:	20000438 	.word	0x20000438

08000e18 <wait_for_tim16x>:

void wait_for_tim16x ( uint8_t x )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	0002      	movs	r2, r0
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	701a      	strb	r2, [r3, #0]
	uint8_t i ;
	for ( i = 0 ; i < x ; i++ )
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	e012      	b.n	8000e54 <wait_for_tim16x+0x3c>
	{
		tim16_on = 1 ;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <wait_for_tim16x+0x54>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <wait_for_tim16x+0x58>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f001 fea2 	bl	8002b80 <HAL_TIM_Base_Start_IT>
		while ( tim16_on )
 8000e3c:	e000      	b.n	8000e40 <wait_for_tim16x+0x28>
			__NOP () ;
 8000e3e:	46c0      	nop			; (mov r8, r8)
		while ( tim16_on )
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <wait_for_tim16x+0x54>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1fa      	bne.n	8000e3e <wait_for_tim16x+0x26>
	for ( i = 0 ; i < x ; i++ )
 8000e48:	210f      	movs	r1, #15
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	3201      	adds	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	230f      	movs	r3, #15
 8000e56:	18fa      	adds	r2, r7, r3
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d3e5      	bcc.n	8000e2e <wait_for_tim16x+0x16>
	}
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b004      	add	sp, #16
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000026a 	.word	0x2000026a
 8000e70:	20000188 	.word	0x20000188

08000e74 <nmea_checksum>:

uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b24      	cmp	r3, #36	; 0x24
 8000e88:	d102      	bne.n	8000e90 <nmea_checksum+0x1c>
		i++ ;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000e90:	230b      	movs	r3, #11
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e00c      	b.n	8000eb4 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	18d3      	adds	r3, r2, r3
 8000ea0:	7819      	ldrb	r1, [r3, #0]
 8000ea2:	220b      	movs	r2, #11
 8000ea4:	18bb      	adds	r3, r7, r2
 8000ea6:	18ba      	adds	r2, r7, r2
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	404a      	eors	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d205      	bcs.n	8000ec8 <nmea_checksum+0x54>
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e8      	bne.n	8000e9a <nmea_checksum+0x26>
	return cs;
 8000ec8:	230b      	movs	r3, #11
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	781b      	ldrb	r3, [r3, #0]
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b004      	add	sp, #16
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d106      	bne.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 fe98 	bl	8002c28 <HAL_TIM_Base_Stop_IT>
	}
	if ( htim->Instance == TIM16 )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d106      	bne.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		tim16_on = 0 ;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim16 ) ;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f001 fe8c 	bl	8002c28 <HAL_TIM_Base_Stop_IT>
	}
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40002000 	.word	0x40002000
 8000f1c:	20000269 	.word	0x20000269
 8000f20:	2000013c 	.word	0x2000013c
 8000f24:	40014400 	.word	0x40014400
 8000f28:	2000026a 	.word	0x2000026a
 8000f2c:	20000188 	.word	0x20000188

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x44>)
 8000f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_MspInit+0x44>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_MspInit+0x44>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	2201      	movs	r2, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_MspInit+0x44>)
 8000f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_MspInit+0x44>)
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	0549      	lsls	r1, r1, #21
 8000f64:	430a      	orrs	r2, r1
 8000f66:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_MspInit+0x44>)
 8000f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	055b      	lsls	r3, r3, #21
 8000f70:	4013      	ands	r3, r2
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b08f      	sub	sp, #60	; 0x3c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f8c:	2410      	movs	r4, #16
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	0018      	movs	r0, r3
 8000f92:	2328      	movs	r3, #40	; 0x28
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f002 ffae 	bl	8003ef8 <memset>
  if(hrtc->Instance==RTC)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <HAL_RTC_MspInit+0x84>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d12c      	bne.n	8001000 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	0292      	lsls	r2, r2, #10
 8000fac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	0052      	lsls	r2, r2, #1
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f001 f9ff 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fc2:	f7ff ffb5 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_RTC_MspInit+0x88>)
 8000fc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_RTC_MspInit+0x88>)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	0209      	lsls	r1, r1, #8
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_RTC_MspInit+0x88>)
 8000fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_RTC_MspInit+0x88>)
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	00c9      	lsls	r1, r1, #3
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_RTC_MspInit+0x88>)
 8000fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f000 fb0f 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f000 fb21 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b00f      	add	sp, #60	; 0x3c
 8001006:	bd90      	pop	{r4, r7, pc}
 8001008:	40002800 	.word	0x40002800
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_TIM_Base_MspInit+0x80>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d116      	bne.n	8001050 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_TIM_Base_MspInit+0x84>)
 8001024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_TIM_Base_MspInit+0x84>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0209      	lsls	r1, r1, #8
 800102c:	430a      	orrs	r2, r1
 800102e:	641a      	str	r2, [r3, #64]	; 0x40
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_TIM_Base_MspInit+0x84>)
 8001032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2013      	movs	r0, #19
 8001044:	f000 fae8 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001048:	2013      	movs	r0, #19
 800104a:	f000 fafa 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800104e:	e01a      	b.n	8001086 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a10      	ldr	r2, [pc, #64]	; (8001098 <HAL_TIM_Base_MspInit+0x88>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d115      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_TIM_Base_MspInit+0x84>)
 800105c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_TIM_Base_MspInit+0x84>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0289      	lsls	r1, r1, #10
 8001064:	430a      	orrs	r2, r1
 8001066:	641a      	str	r2, [r3, #64]	; 0x40
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x84>)
 800106a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2015      	movs	r0, #21
 800107c:	f000 facc 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001080:	2015      	movs	r0, #21
 8001082:	f000 fade 	bl	8001642 <HAL_NVIC_EnableIRQ>
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	40002000 	.word	0x40002000
 8001094:	40021000 	.word	0x40021000
 8001098:	40014400 	.word	0x40014400

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b095      	sub	sp, #84	; 0x54
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	233c      	movs	r3, #60	; 0x3c
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	0018      	movs	r0, r3
 80010aa:	2314      	movs	r3, #20
 80010ac:	001a      	movs	r2, r3
 80010ae:	2100      	movs	r1, #0
 80010b0:	f002 ff22 	bl	8003ef8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	2414      	movs	r4, #20
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	0018      	movs	r0, r3
 80010ba:	2328      	movs	r3, #40	; 0x28
 80010bc:	001a      	movs	r2, r3
 80010be:	2100      	movs	r1, #0
 80010c0:	f002 ff1a 	bl	8003ef8 <memset>
  if(huart->Instance==USART1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a23      	ldr	r2, [pc, #140]	; (8001158 <HAL_UART_MspInit+0xbc>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d13f      	bne.n	800114e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	0018      	movs	r0, r3
 80010de:	f001 f96d 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d001      	beq.n	80010ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010e6:	f7ff ff23 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_UART_MspInit+0xc0>)
 80010ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_UART_MspInit+0xc0>)
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	01c9      	lsls	r1, r1, #7
 80010f4:	430a      	orrs	r2, r1
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_UART_MspInit+0xc0>)
 80010fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	01db      	lsls	r3, r3, #7
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_UART_MspInit+0xc0>)
 8001108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_UART_MspInit+0xc0>)
 800110c:	2101      	movs	r1, #1
 800110e:	430a      	orrs	r2, r1
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_UART_MspInit+0xc0>)
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	2201      	movs	r2, #1
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800111e:	213c      	movs	r1, #60	; 0x3c
 8001120:	187b      	adds	r3, r7, r1
 8001122:	22c0      	movs	r2, #192	; 0xc0
 8001124:	00d2      	lsls	r2, r2, #3
 8001126:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2202      	movs	r2, #2
 800112c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2201      	movs	r2, #1
 800113e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	187a      	adds	r2, r7, r1
 8001142:	23a0      	movs	r3, #160	; 0xa0
 8001144:	05db      	lsls	r3, r3, #23
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f000 fa97 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b015      	add	sp, #84	; 0x54
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	40013800 	.word	0x40013800
 800115c:	40021000 	.word	0x40021000

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 f980 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <RTC_TAMP_IRQHandler+0x14>)
 8001196:	0018      	movs	r0, r3
 8001198:	f001 fc74 	bl	8002a84 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	20000110 	.word	0x20000110

080011a8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <TIM14_IRQHandler+0x14>)
 80011ae:	0018      	movs	r0, r3
 80011b0:	f001 fd68 	bl	8002c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	2000013c 	.word	0x2000013c

080011c0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <TIM16_IRQHandler+0x14>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f001 fd5c 	bl	8002c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	20000188 	.word	0x20000188

080011d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <_kill>:

int _kill(int pid, int sig)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011ee:	f002 fe59 	bl	8003ea4 <__errno>
 80011f2:	0003      	movs	r3, r0
 80011f4:	2216      	movs	r2, #22
 80011f6:	601a      	str	r2, [r3, #0]
	return -1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <_exit>:

void _exit (int status)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800120c:	2301      	movs	r3, #1
 800120e:	425a      	negs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	0011      	movs	r1, r2
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff ffe5 	bl	80011e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800121a:	e7fe      	b.n	800121a <_exit+0x16>

0800121c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e00a      	b.n	8001244 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800122e:	e000      	b.n	8001232 <_read+0x16>
 8001230:	bf00      	nop
 8001232:	0001      	movs	r1, r0
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	60ba      	str	r2, [r7, #8]
 800123a:	b2ca      	uxtb	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf0      	blt.n	800122e <_read+0x12>
	}

return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b006      	add	sp, #24
 8001254:	bd80      	pop	{r7, pc}

08001256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e009      	b.n	800127c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	0018      	movs	r0, r3
 8001272:	e000      	b.n	8001276 <_write+0x20>
 8001274:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf1      	blt.n	8001268 <_write+0x12>
	}
	return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b006      	add	sp, #24
 800128c:	bd80      	pop	{r7, pc}

0800128e <_close>:

int _close(int file)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
	return -1;
 8001296:	2301      	movs	r3, #1
 8001298:	425b      	negs	r3, r3
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	0192      	lsls	r2, r2, #6
 80012b2:	605a      	str	r2, [r3, #4]
	return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}

080012be <_isatty>:

int _isatty(int file)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	return 1;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	return 0;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b004      	add	sp, #16
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	18d3      	adds	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f002 fdc4 	bl	8003ea4 <__errno>
 800131c:	0003      	movs	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	2301      	movs	r3, #1
 8001324:	425b      	negs	r3, r3
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	18d2      	adds	r2, r2, r3
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <_sbrk+0x64>)
 8001338:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b006      	add	sp, #24
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20002000 	.word	0x20002000
 8001348:	00000400 	.word	0x00000400
 800134c:	200004bc 	.word	0x200004bc
 8001350:	200004d8 	.word	0x200004d8

08001354 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001362:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001364:	f7ff fff6 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	; (80013a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	; (80013ac <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800138e:	f002 fd8f 	bl	8003eb0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001392:	f7ff f955 	bl	8000640 <main>

08001396 <LoopForever>:

LoopForever:
  b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
  ldr   r0, =_estack
 8001398:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 80013a4:	08005858 	.word	0x08005858
  ldr r2, =_sbss
 80013a8:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80013ac:	200004d4 	.word	0x200004d4

080013b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_Init+0x3c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Init+0x3c>)
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	0049      	lsls	r1, r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f810 	bl	80013f4 <HAL_InitTick>
 80013d4:	1e03      	subs	r3, r0, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e001      	b.n	80013e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fdac 	bl	8000f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	230f      	movs	r3, #15
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_InitTick+0x88>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02b      	beq.n	8001464 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_InitTick+0x8c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_InitTick+0x88>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	0019      	movs	r1, r3
 8001416:	23fa      	movs	r3, #250	; 0xfa
 8001418:	0098      	lsls	r0, r3, #2
 800141a:	f7fe fe85 	bl	8000128 <__udivsi3>
 800141e:	0003      	movs	r3, r0
 8001420:	0019      	movs	r1, r3
 8001422:	0020      	movs	r0, r4
 8001424:	f7fe fe80 	bl	8000128 <__udivsi3>
 8001428:	0003      	movs	r3, r0
 800142a:	0018      	movs	r0, r3
 800142c:	f000 f919 	bl	8001662 <HAL_SYSTICK_Config>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d112      	bne.n	800145a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d80a      	bhi.n	8001450 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	2301      	movs	r3, #1
 800143e:	425b      	negs	r3, r3
 8001440:	2200      	movs	r2, #0
 8001442:	0018      	movs	r0, r3
 8001444:	f000 f8e8 	bl	8001618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_InitTick+0x90>)
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e00d      	b.n	800146c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001450:	230f      	movs	r3, #15
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e008      	b.n	800146c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145a:	230f      	movs	r3, #15
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e003      	b.n	800146c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800146c:	230f      	movs	r3, #15
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	781b      	ldrb	r3, [r3, #0]
}
 8001472:	0018      	movs	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	b005      	add	sp, #20
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	2000008c 	.word	0x2000008c
 8001480:	20000084 	.word	0x20000084
 8001484:	20000088 	.word	0x20000088

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x1c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	001a      	movs	r2, r3
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x20>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	18d2      	adds	r2, r2, r3
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_IncTick+0x20>)
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	2000008c 	.word	0x2000008c
 80014a8:	200004c0 	.word	0x200004c0

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <HAL_GetTick+0x10>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	200004c0 	.word	0x200004c0

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	0002      	movs	r2, r0
 80014c8:	1dfb      	adds	r3, r7, #7
 80014ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b7f      	cmp	r3, #127	; 0x7f
 80014d2:	d809      	bhi.n	80014e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	001a      	movs	r2, r3
 80014da:	231f      	movs	r3, #31
 80014dc:	401a      	ands	r2, r3
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <__NVIC_EnableIRQ+0x30>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	4091      	lsls	r1, r2
 80014e4:	000a      	movs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	0002      	movs	r2, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b7f      	cmp	r3, #127	; 0x7f
 8001508:	d828      	bhi.n	800155c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800150a:	4a2f      	ldr	r2, [pc, #188]	; (80015c8 <__NVIC_SetPriority+0xd4>)
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b25b      	sxtb	r3, r3
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	33c0      	adds	r3, #192	; 0xc0
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	589b      	ldr	r3, [r3, r2]
 800151a:	1dfa      	adds	r2, r7, #7
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	0011      	movs	r1, r2
 8001520:	2203      	movs	r2, #3
 8001522:	400a      	ands	r2, r1
 8001524:	00d2      	lsls	r2, r2, #3
 8001526:	21ff      	movs	r1, #255	; 0xff
 8001528:	4091      	lsls	r1, r2
 800152a:	000a      	movs	r2, r1
 800152c:	43d2      	mvns	r2, r2
 800152e:	401a      	ands	r2, r3
 8001530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	019b      	lsls	r3, r3, #6
 8001536:	22ff      	movs	r2, #255	; 0xff
 8001538:	401a      	ands	r2, r3
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	2303      	movs	r3, #3
 8001542:	4003      	ands	r3, r0
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001548:	481f      	ldr	r0, [pc, #124]	; (80015c8 <__NVIC_SetPriority+0xd4>)
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b25b      	sxtb	r3, r3
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	430a      	orrs	r2, r1
 8001554:	33c0      	adds	r3, #192	; 0xc0
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800155a:	e031      	b.n	80015c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <__NVIC_SetPriority+0xd8>)
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	0019      	movs	r1, r3
 8001564:	230f      	movs	r3, #15
 8001566:	400b      	ands	r3, r1
 8001568:	3b08      	subs	r3, #8
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3306      	adds	r3, #6
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	18d3      	adds	r3, r2, r3
 8001572:	3304      	adds	r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	1dfa      	adds	r2, r7, #7
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	0011      	movs	r1, r2
 800157c:	2203      	movs	r2, #3
 800157e:	400a      	ands	r2, r1
 8001580:	00d2      	lsls	r2, r2, #3
 8001582:	21ff      	movs	r1, #255	; 0xff
 8001584:	4091      	lsls	r1, r2
 8001586:	000a      	movs	r2, r1
 8001588:	43d2      	mvns	r2, r2
 800158a:	401a      	ands	r2, r3
 800158c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	019b      	lsls	r3, r3, #6
 8001592:	22ff      	movs	r2, #255	; 0xff
 8001594:	401a      	ands	r2, r3
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	0018      	movs	r0, r3
 800159c:	2303      	movs	r3, #3
 800159e:	4003      	ands	r3, r0
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <__NVIC_SetPriority+0xd8>)
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	001c      	movs	r4, r3
 80015ac:	230f      	movs	r3, #15
 80015ae:	4023      	ands	r3, r4
 80015b0:	3b08      	subs	r3, #8
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	430a      	orrs	r2, r1
 80015b6:	3306      	adds	r3, #6
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	18c3      	adds	r3, r0, r3
 80015bc:	3304      	adds	r3, #4
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b003      	add	sp, #12
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	045b      	lsls	r3, r3, #17
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d301      	bcc.n	80015e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e4:	2301      	movs	r3, #1
 80015e6:	e010      	b.n	800160a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <SysTick_Config+0x44>)
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	3a01      	subs	r2, #1
 80015ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f0:	2301      	movs	r3, #1
 80015f2:	425b      	negs	r3, r3
 80015f4:	2103      	movs	r1, #3
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff ff7c 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x44>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x44>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	210f      	movs	r1, #15
 8001624:	187b      	adds	r3, r7, r1
 8001626:	1c02      	adds	r2, r0, #0
 8001628:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	187b      	adds	r3, r7, r1
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b25b      	sxtb	r3, r3
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff ff5d 	bl	80014f4 <__NVIC_SetPriority>
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b004      	add	sp, #16
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	0002      	movs	r2, r0
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ff33 	bl	80014c0 <__NVIC_EnableIRQ>
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff ffaf 	bl	80015d0 <SysTick_Config>
 8001672:	0003      	movs	r3, r0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	e147      	b.n	800191c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d100      	bne.n	80016a4 <HAL_GPIO_Init+0x28>
 80016a2:	e138      	b.n	8001916 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2203      	movs	r2, #3
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d005      	beq.n	80016bc <HAL_GPIO_Init+0x40>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2203      	movs	r2, #3
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d130      	bne.n	800171e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	409a      	lsls	r2, r3
 80016ca:	0013      	movs	r3, r2
 80016cc:	43da      	mvns	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	409a      	lsls	r2, r3
 80016de:	0013      	movs	r3, r2
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f2:	2201      	movs	r2, #1
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	43da      	mvns	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	2201      	movs	r2, #1
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2203      	movs	r2, #3
 8001724:	4013      	ands	r3, r2
 8001726:	2b03      	cmp	r3, #3
 8001728:	d017      	beq.n	800175a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	409a      	lsls	r2, r3
 8001738:	0013      	movs	r3, r2
 800173a:	43da      	mvns	r2, r3
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	409a      	lsls	r2, r3
 800174c:	0013      	movs	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2203      	movs	r2, #3
 8001760:	4013      	ands	r3, r2
 8001762:	2b02      	cmp	r3, #2
 8001764:	d123      	bne.n	80017ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	58d3      	ldr	r3, [r2, r3]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2207      	movs	r2, #7
 8001778:	4013      	ands	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2107      	movs	r1, #7
 8001792:	400b      	ands	r3, r1
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	08da      	lsrs	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3208      	adds	r2, #8
 80017a8:	0092      	lsls	r2, r2, #2
 80017aa:	6939      	ldr	r1, [r7, #16]
 80017ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	43da      	mvns	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	401a      	ands	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0013      	movs	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	23c0      	movs	r3, #192	; 0xc0
 80017e8:	029b      	lsls	r3, r3, #10
 80017ea:	4013      	ands	r3, r2
 80017ec:	d100      	bne.n	80017f0 <HAL_GPIO_Init+0x174>
 80017ee:	e092      	b.n	8001916 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3318      	adds	r3, #24
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	589b      	ldr	r3, [r3, r2]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2203      	movs	r2, #3
 8001802:	4013      	ands	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	220f      	movs	r2, #15
 8001808:	409a      	lsls	r2, r3
 800180a:	0013      	movs	r3, r2
 800180c:	43da      	mvns	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	23a0      	movs	r3, #160	; 0xa0
 8001818:	05db      	lsls	r3, r3, #23
 800181a:	429a      	cmp	r2, r3
 800181c:	d013      	beq.n	8001846 <HAL_GPIO_Init+0x1ca>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a45      	ldr	r2, [pc, #276]	; (8001938 <HAL_GPIO_Init+0x2bc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00d      	beq.n	8001842 <HAL_GPIO_Init+0x1c6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a44      	ldr	r2, [pc, #272]	; (800193c <HAL_GPIO_Init+0x2c0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <HAL_GPIO_Init+0x1c2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a43      	ldr	r2, [pc, #268]	; (8001940 <HAL_GPIO_Init+0x2c4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_GPIO_Init+0x1be>
 8001836:	2303      	movs	r3, #3
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x1cc>
 800183a:	2305      	movs	r3, #5
 800183c:	e004      	b.n	8001848 <HAL_GPIO_Init+0x1cc>
 800183e:	2302      	movs	r3, #2
 8001840:	e002      	b.n	8001848 <HAL_GPIO_Init+0x1cc>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x1cc>
 8001846:	2300      	movs	r3, #0
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	2103      	movs	r1, #3
 800184c:	400a      	ands	r2, r1
 800184e:	00d2      	lsls	r2, r2, #3
 8001850:	4093      	lsls	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001858:	4936      	ldr	r1, [pc, #216]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3318      	adds	r3, #24
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001866:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43da      	mvns	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	035b      	lsls	r3, r3, #13
 800187e:	4013      	ands	r3, r2
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43da      	mvns	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	039b      	lsls	r3, r3, #14
 80018a8:	4013      	ands	r3, r2
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018ba:	4a1e      	ldr	r2, [pc, #120]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 80018bc:	2384      	movs	r3, #132	; 0x84
 80018be:	58d3      	ldr	r3, [r2, r3]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43da      	mvns	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018e0:	4914      	ldr	r1, [pc, #80]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 80018e2:	2284      	movs	r2, #132	; 0x84
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43da      	mvns	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	025b      	lsls	r3, r3, #9
 8001902:	4013      	ands	r3, r2
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800190e:	4909      	ldr	r1, [pc, #36]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	40da      	lsrs	r2, r3
 8001924:	1e13      	subs	r3, r2, #0
 8001926:	d000      	beq.n	800192a <HAL_GPIO_Init+0x2ae>
 8001928:	e6b0      	b.n	800168c <HAL_GPIO_Init+0x10>
  }
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b006      	add	sp, #24
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021800 	.word	0x40021800
 8001938:	50000400 	.word	0x50000400
 800193c:	50000800 	.word	0x50000800
 8001940:	50000c00 	.word	0x50000c00

08001944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	0008      	movs	r0, r1
 800194e:	0011      	movs	r1, r2
 8001950:	1cbb      	adds	r3, r7, #2
 8001952:	1c02      	adds	r2, r0, #0
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	1c7b      	adds	r3, r7, #1
 8001958:	1c0a      	adds	r2, r1, #0
 800195a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195c:	1c7b      	adds	r3, r7, #1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001964:	1cbb      	adds	r3, r7, #2
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_PWR_EnableBkUpAccess+0x18>)
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	0049      	lsls	r1, r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40007000 	.word	0x40007000

0800199c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	429a      	cmp	r2, r3
 80019be:	d11f      	bne.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	0013      	movs	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	189b      	adds	r3, r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4912      	ldr	r1, [pc, #72]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7fe fbaa 	bl	8000128 <__udivsi3>
 80019d4:	0003      	movs	r3, r0
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019da:	e008      	b.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e001      	b.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e009      	b.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	401a      	ands	r2, r3
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d0ed      	beq.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40007000 	.word	0x40007000
 8001a10:	fffff9ff 	.word	0xfffff9ff
 8001a14:	20000084 	.word	0x20000084
 8001a18:	000f4240 	.word	0x000f4240

08001a1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	23e0      	movs	r3, #224	; 0xe0
 8001a26:	01db      	lsls	r3, r3, #7
 8001a28:	4013      	ands	r3, r2
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e2fe      	b.n	8002044 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <HAL_RCC_OscConfig+0x1e>
 8001a50:	e07c      	b.n	8001b4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a52:	4bc3      	ldr	r3, [pc, #780]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2238      	movs	r2, #56	; 0x38
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5c:	4bc0      	ldr	r3, [pc, #768]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d102      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3e>
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d10b      	bne.n	8001a90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	4bb9      	ldr	r3, [pc, #740]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	4013      	ands	r3, r2
 8001a82:	d062      	beq.n	8001b4a <HAL_RCC_OscConfig+0x116>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d15e      	bne.n	8001b4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e2d9      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_OscConfig+0x78>
 8001a9c:	4bb0      	ldr	r3, [pc, #704]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4baf      	ldr	r3, [pc, #700]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	0249      	lsls	r1, r1, #9
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e020      	b.n	8001aee <HAL_RCC_OscConfig+0xba>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	23a0      	movs	r3, #160	; 0xa0
 8001ab2:	02db      	lsls	r3, r3, #11
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d10e      	bne.n	8001ad6 <HAL_RCC_OscConfig+0xa2>
 8001ab8:	4ba9      	ldr	r3, [pc, #676]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4ba8      	ldr	r3, [pc, #672]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	02c9      	lsls	r1, r1, #11
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	4ba6      	ldr	r3, [pc, #664]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4ba5      	ldr	r3, [pc, #660]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0249      	lsls	r1, r1, #9
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e00b      	b.n	8001aee <HAL_RCC_OscConfig+0xba>
 8001ad6:	4ba2      	ldr	r3, [pc, #648]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4ba1      	ldr	r3, [pc, #644]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	49a1      	ldr	r1, [pc, #644]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001ade:	400a      	ands	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	4b9f      	ldr	r3, [pc, #636]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b9e      	ldr	r3, [pc, #632]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ae8:	499f      	ldr	r1, [pc, #636]	; (8001d68 <HAL_RCC_OscConfig+0x334>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d014      	beq.n	8001b20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff fcd9 	bl	80014ac <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fcd4 	bl	80014ac <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e298      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4b93      	ldr	r3, [pc, #588]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	029b      	lsls	r3, r3, #10
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xcc>
 8001b1e:	e015      	b.n	8001b4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fcc4 	bl	80014ac <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2a:	f7ff fcbf 	bl	80014ac <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	; 0x64
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e283      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3c:	4b88      	ldr	r3, [pc, #544]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	4013      	ands	r3, r2
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0xf6>
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2202      	movs	r2, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	d100      	bne.n	8001b58 <HAL_RCC_OscConfig+0x124>
 8001b56:	e099      	b.n	8001c8c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b58:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2238      	movs	r2, #56	; 0x38
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b62:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2203      	movs	r2, #3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d102      	bne.n	8001b78 <HAL_RCC_OscConfig+0x144>
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d002      	beq.n	8001b7e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d135      	bne.n	8001bea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b7e:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4013      	ands	r3, r2
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x162>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e256      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4a74      	ldr	r2, [pc, #464]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	021a      	lsls	r2, r3, #8
 8001ba6:	4b6e      	ldr	r3, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d112      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bc6:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0adb      	lsrs	r3, r3, #11
 8001bcc:	2207      	movs	r2, #7
 8001bce:	4013      	ands	r3, r2
 8001bd0:	4a68      	ldr	r2, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x340>)
 8001bd2:	40da      	lsrs	r2, r3
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x344>)
 8001bd6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <HAL_RCC_OscConfig+0x348>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff fc09 	bl	80013f4 <HAL_InitTick>
 8001be2:	1e03      	subs	r3, r0, #0
 8001be4:	d051      	beq.n	8001c8a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e22c      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d030      	beq.n	8001c54 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bf2:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5e      	ldr	r2, [pc, #376]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c06:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b55      	ldr	r3, [pc, #340]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	0049      	lsls	r1, r1, #1
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fc4a 	bl	80014ac <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fc45 	bl	80014ac <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e209      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a4a      	ldr	r2, [pc, #296]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	021a      	lsls	r2, r3, #8
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e01b      	b.n	8001c8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c54:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	4949      	ldr	r1, [pc, #292]	; (8001d80 <HAL_RCC_OscConfig+0x34c>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fc24 	bl	80014ac <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fc1f 	bl	80014ac <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1e3      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c7c:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4013      	ands	r3, r2
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x236>
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2208      	movs	r2, #8
 8001c92:	4013      	ands	r3, r2
 8001c94:	d047      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c96:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2238      	movs	r2, #56	; 0x38
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b18      	cmp	r3, #24
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d03c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d138      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e1c5      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d019      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fbee 	bl	80014ac <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fbe9 	bl	80014ac <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1ad      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d0f1      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2a2>
 8001cf2:	e018      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	438a      	bics	r2, r1
 8001cfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fbd4 	bl	80014ac <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fbcf 	bl	80014ac <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e193      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d20:	2202      	movs	r2, #2
 8001d22:	4013      	ands	r3, r2
 8001d24:	d1f1      	bne.n	8001d0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d100      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2fe>
 8001d30:	e0c6      	b.n	8001ec0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	231f      	movs	r3, #31
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2238      	movs	r2, #56	; 0x38
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d11e      	bne.n	8001d84 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCC_OscConfig+0x31e>
 8001d50:	e0b6      	b.n	8001ec0 <HAL_RCC_OscConfig+0x48c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d000      	beq.n	8001d5c <HAL_RCC_OscConfig+0x328>
 8001d5a:	e0b1      	b.n	8001ec0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e171      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	fffeffff 	.word	0xfffeffff
 8001d68:	fffbffff 	.word	0xfffbffff
 8001d6c:	ffff80ff 	.word	0xffff80ff
 8001d70:	ffffc7ff 	.word	0xffffc7ff
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	20000084 	.word	0x20000084
 8001d7c:	20000088 	.word	0x20000088
 8001d80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d84:	4bb1      	ldr	r3, [pc, #708]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	055b      	lsls	r3, r3, #21
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_OscConfig+0x360>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x362>
 8001d94:	2300      	movs	r3, #0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d011      	beq.n	8001dbe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4bac      	ldr	r3, [pc, #688]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d9e:	4bab      	ldr	r3, [pc, #684]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0549      	lsls	r1, r1, #21
 8001da4:	430a      	orrs	r2, r1
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001da8:	4ba8      	ldr	r3, [pc, #672]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	055b      	lsls	r3, r3, #21
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001db6:	231f      	movs	r3, #31
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	4ba4      	ldr	r3, [pc, #656]	; (8002050 <HAL_RCC_OscConfig+0x61c>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d11a      	bne.n	8001e00 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dca:	4ba1      	ldr	r3, [pc, #644]	; (8002050 <HAL_RCC_OscConfig+0x61c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4ba0      	ldr	r3, [pc, #640]	; (8002050 <HAL_RCC_OscConfig+0x61c>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0049      	lsls	r1, r1, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fb68 	bl	80014ac <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fb63 	bl	80014ac <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e127      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	4b96      	ldr	r3, [pc, #600]	; (8002050 <HAL_RCC_OscConfig+0x61c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3e2>
 8001e08:	4b90      	ldr	r3, [pc, #576]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e0c:	4b8f      	ldr	r3, [pc, #572]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e0e:	2101      	movs	r1, #1
 8001e10:	430a      	orrs	r2, r1
 8001e12:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x41c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x404>
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e22:	4b8a      	ldr	r3, [pc, #552]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e24:	2104      	movs	r1, #4
 8001e26:	430a      	orrs	r2, r1
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e2e:	4b87      	ldr	r3, [pc, #540]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x41c>
 8001e38:	4b84      	ldr	r3, [pc, #528]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e3c:	4b83      	ldr	r3, [pc, #524]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	438a      	bics	r2, r1
 8001e42:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e48:	4b80      	ldr	r3, [pc, #512]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d014      	beq.n	8001e82 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff fb28 	bl	80014ac <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff fb23 	bl	80014ac <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a79      	ldr	r2, [pc, #484]	; (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0e6      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	4b75      	ldr	r3, [pc, #468]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x42e>
 8001e80:	e013      	b.n	8001eaa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7ff fb13 	bl	80014ac <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e8a:	e009      	b.n	8001ea0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fb0e 	bl	80014ac <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	4a6f      	ldr	r2, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x620>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0d1      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001eaa:	231f      	movs	r3, #31
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eb8:	4b64      	ldr	r3, [pc, #400]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001eba:	4967      	ldr	r1, [pc, #412]	; (8002058 <HAL_RCC_OscConfig+0x624>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d100      	bne.n	8001eca <HAL_RCC_OscConfig+0x496>
 8001ec8:	e0bb      	b.n	8002042 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eca:	4b60      	ldr	r3, [pc, #384]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2238      	movs	r2, #56	; 0x38
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d100      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4a4>
 8001ed6:	e07b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d156      	bne.n	8001f8e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee0:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001ee6:	495d      	ldr	r1, [pc, #372]	; (800205c <HAL_RCC_OscConfig+0x628>)
 8001ee8:	400a      	ands	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff fade 	bl	80014ac <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff fad9 	bl	80014ac <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e09d      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	049b      	lsls	r3, r3, #18
 8001f10:	4013      	ands	r3, r2
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f14:	4b4d      	ldr	r3, [pc, #308]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a51      	ldr	r2, [pc, #324]	; (8002060 <HAL_RCC_OscConfig+0x62c>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1a      	ldr	r2, [r3, #32]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	431a      	orrs	r2, r3
 8001f42:	4b42      	ldr	r3, [pc, #264]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f48:	4b40      	ldr	r3, [pc, #256]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	0449      	lsls	r1, r1, #17
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	0549      	lsls	r1, r1, #21
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff faa2 	bl	80014ac <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fa9d 	bl	80014ac <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e061      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f80:	4b32      	ldr	r3, [pc, #200]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	049b      	lsls	r3, r3, #18
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x53a>
 8001f8c:	e059      	b.n	8002042 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001f94:	4931      	ldr	r1, [pc, #196]	; (800205c <HAL_RCC_OscConfig+0x628>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fa87 	bl	80014ac <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff fa82 	bl	80014ac <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e046      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	049b      	lsls	r3, r3, #18
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001fc8:	4926      	ldr	r1, [pc, #152]	; (8002064 <HAL_RCC_OscConfig+0x630>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	e038      	b.n	8002042 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e033      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d126      	bne.n	800203e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2270      	movs	r2, #112	; 0x70
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d11f      	bne.n	800203e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	23fe      	movs	r3, #254	; 0xfe
 8002002:	01db      	lsls	r3, r3, #7
 8002004:	401a      	ands	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d116      	bne.n	800203e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	23f8      	movs	r3, #248	; 0xf8
 8002014:	039b      	lsls	r3, r3, #14
 8002016:	401a      	ands	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d10e      	bne.n	800203e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	23e0      	movs	r3, #224	; 0xe0
 8002024:	051b      	lsls	r3, r3, #20
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	0f5b      	lsrs	r3, r3, #29
 8002034:	075a      	lsls	r2, r3, #29
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b008      	add	sp, #32
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
 8002054:	00001388 	.word	0x00001388
 8002058:	efffffff 	.word	0xefffffff
 800205c:	feffffff 	.word	0xfeffffff
 8002060:	11c1808c 	.word	0x11c1808c
 8002064:	eefefffc 	.word	0xeefefffc

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0e9      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b76      	ldr	r3, [pc, #472]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2207      	movs	r2, #7
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d91e      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b73      	ldr	r3, [pc, #460]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2207      	movs	r2, #7
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4b70      	ldr	r3, [pc, #448]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800209c:	f7ff fa06 	bl	80014ac <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a4:	e009      	b.n	80020ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7ff fa01 	bl	80014ac <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_RCC_ClockConfig+0x1f4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0ca      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2207      	movs	r2, #7
 80020c0:	4013      	ands	r3, r2
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2202      	movs	r2, #2
 80020ce:	4013      	ands	r3, r2
 80020d0:	d015      	beq.n	80020fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2204      	movs	r2, #4
 80020d8:	4013      	ands	r3, r2
 80020da:	d006      	beq.n	80020ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020dc:	4b60      	ldr	r3, [pc, #384]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b5f      	ldr	r3, [pc, #380]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80020e2:	21e0      	movs	r1, #224	; 0xe0
 80020e4:	01c9      	lsls	r1, r1, #7
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ea:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <HAL_RCC_ClockConfig+0x1fc>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	4b59      	ldr	r3, [pc, #356]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	4013      	ands	r3, r2
 8002106:	d057      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	4013      	ands	r3, r2
 800211a:	d12b      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e097      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d107      	bne.n	8002138 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002128:	4b4d      	ldr	r3, [pc, #308]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	049b      	lsls	r3, r3, #18
 8002130:	4013      	ands	r3, r2
 8002132:	d11f      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e08b      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002140:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4013      	ands	r3, r2
 800214a:	d113      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e07f      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d106      	bne.n	8002166 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002158:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800215a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215c:	2202      	movs	r2, #2
 800215e:	4013      	ands	r3, r2
 8002160:	d108      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e074      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2202      	movs	r2, #2
 800216c:	4013      	ands	r3, r2
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e06d      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002174:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2207      	movs	r2, #7
 800217a:	4393      	bics	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002188:	f7ff f990 	bl	80014ac <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002190:	e009      	b.n	80021a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7ff f98b 	bl	80014ac <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a2f      	ldr	r2, [pc, #188]	; (800225c <HAL_RCC_ClockConfig+0x1f4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e054      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2238      	movs	r2, #56	; 0x38
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1ec      	bne.n	8002192 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2207      	movs	r2, #7
 80021be:	4013      	ands	r3, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d21e      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2207      	movs	r2, #7
 80021cc:	4393      	bics	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021d8:	f7ff f968 	bl	80014ac <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021e0:	e009      	b.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e2:	f7ff f963 	bl	80014ac <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_RCC_ClockConfig+0x1f4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e02c      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2207      	movs	r2, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2204      	movs	r2, #4
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_RCC_ClockConfig+0x200>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002222:	f000 f829 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002226:	0001      	movs	r1, r0
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	220f      	movs	r2, #15
 8002230:	401a      	ands	r2, r3
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x204>)
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	58d3      	ldr	r3, [r2, r3]
 8002238:	221f      	movs	r2, #31
 800223a:	4013      	ands	r3, r2
 800223c:	000a      	movs	r2, r1
 800223e:	40da      	lsrs	r2, r3
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x208>)
 8002242:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_ClockConfig+0x20c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff f8d3 	bl	80013f4 <HAL_InitTick>
 800224e:	0003      	movs	r3, r0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40022000 	.word	0x40022000
 800225c:	00001388 	.word	0x00001388
 8002260:	40021000 	.word	0x40021000
 8002264:	fffff0ff 	.word	0xfffff0ff
 8002268:	ffff8fff 	.word	0xffff8fff
 800226c:	08005678 	.word	0x08005678
 8002270:	20000084 	.word	0x20000084
 8002274:	20000088 	.word	0x20000088

08002278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227e:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2238      	movs	r2, #56	; 0x38
 8002284:	4013      	ands	r3, r2
 8002286:	d10f      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0adb      	lsrs	r3, r3, #11
 800228e:	2207      	movs	r2, #7
 8002290:	4013      	ands	r3, r2
 8002292:	2201      	movs	r2, #1
 8002294:	409a      	lsls	r2, r3
 8002296:	0013      	movs	r3, r2
 8002298:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	4835      	ldr	r0, [pc, #212]	; (8002374 <HAL_RCC_GetSysClockFreq+0xfc>)
 800229e:	f7fd ff43 	bl	8000128 <__udivsi3>
 80022a2:	0003      	movs	r3, r0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e05d      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2238      	movs	r2, #56	; 0x38
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d102      	bne.n	80022ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_RCC_GetSysClockFreq+0x100>)
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	e054      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2238      	movs	r2, #56	; 0x38
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d138      	bne.n	8002338 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022c6:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2203      	movs	r2, #3
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	2207      	movs	r2, #7
 80022d8:	4013      	ands	r3, r2
 80022da:	3301      	adds	r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d10d      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	4824      	ldr	r0, [pc, #144]	; (8002378 <HAL_RCC_GetSysClockFreq+0x100>)
 80022e8:	f7fd ff1e 	bl	8000128 <__udivsi3>
 80022ec:	0003      	movs	r3, r0
 80022ee:	0019      	movs	r1, r3
 80022f0:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	227f      	movs	r2, #127	; 0x7f
 80022f8:	4013      	ands	r3, r2
 80022fa:	434b      	muls	r3, r1
 80022fc:	617b      	str	r3, [r7, #20]
        break;
 80022fe:	e00d      	b.n	800231c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	481c      	ldr	r0, [pc, #112]	; (8002374 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002304:	f7fd ff10 	bl	8000128 <__udivsi3>
 8002308:	0003      	movs	r3, r0
 800230a:	0019      	movs	r1, r3
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	227f      	movs	r2, #127	; 0x7f
 8002314:	4013      	ands	r3, r2
 8002316:	434b      	muls	r3, r1
 8002318:	617b      	str	r3, [r7, #20]
        break;
 800231a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0f5b      	lsrs	r3, r3, #29
 8002322:	2207      	movs	r2, #7
 8002324:	4013      	ands	r3, r2
 8002326:	3301      	adds	r3, #1
 8002328:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	6978      	ldr	r0, [r7, #20]
 800232e:	f7fd fefb 	bl	8000128 <__udivsi3>
 8002332:	0003      	movs	r3, r0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	e015      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2238      	movs	r2, #56	; 0x38
 800233e:	4013      	ands	r3, r2
 8002340:	2b20      	cmp	r3, #32
 8002342:	d103      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	e00b      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2238      	movs	r2, #56	; 0x38
 8002352:	4013      	ands	r3, r2
 8002354:	2b18      	cmp	r3, #24
 8002356:	d103      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002358:	23fa      	movs	r3, #250	; 0xfa
 800235a:	01db      	lsls	r3, r3, #7
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e001      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002364:	693b      	ldr	r3, [r7, #16]
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b006      	add	sp, #24
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	40021000 	.word	0x40021000
 8002374:	00f42400 	.word	0x00f42400
 8002378:	007a1200 	.word	0x007a1200

0800237c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b02      	ldr	r3, [pc, #8]	; (800238c <HAL_RCC_GetHCLKFreq+0x10>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	20000084 	.word	0x20000084

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002394:	f7ff fff2 	bl	800237c <HAL_RCC_GetHCLKFreq>
 8002398:	0004      	movs	r4, r0
 800239a:	f7ff fb3f 	bl	8001a1c <LL_RCC_GetAPB1Prescaler>
 800239e:	0003      	movs	r3, r0
 80023a0:	0b1a      	lsrs	r2, r3, #12
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	58d3      	ldr	r3, [r2, r3]
 80023a8:	221f      	movs	r2, #31
 80023aa:	4013      	ands	r3, r2
 80023ac:	40dc      	lsrs	r4, r3
 80023ae:	0023      	movs	r3, r4
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bdb0      	pop	{r4, r5, r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	080056b8 	.word	0x080056b8

080023bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80023c4:	2313      	movs	r3, #19
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023cc:	2312      	movs	r3, #18
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	029b      	lsls	r3, r3, #10
 80023dc:	4013      	ands	r3, r2
 80023de:	d100      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80023e0:	e0a3      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2011      	movs	r0, #17
 80023e4:	183b      	adds	r3, r7, r0
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4ba5      	ldr	r3, [pc, #660]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	055b      	lsls	r3, r3, #21
 80023f2:	4013      	ands	r3, r2
 80023f4:	d110      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4ba2      	ldr	r3, [pc, #648]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fa:	4ba1      	ldr	r3, [pc, #644]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	0549      	lsls	r1, r1, #21
 8002400:	430a      	orrs	r2, r1
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
 8002404:	4b9e      	ldr	r3, [pc, #632]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	055b      	lsls	r3, r3, #21
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	183b      	adds	r3, r7, r0
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002418:	4b9a      	ldr	r3, [pc, #616]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b99      	ldr	r3, [pc, #612]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	0049      	lsls	r1, r1, #1
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002426:	f7ff f841 	bl	80014ac <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800242e:	e00b      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002430:	f7ff f83c 	bl	80014ac <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d904      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800243e:	2313      	movs	r3, #19
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2203      	movs	r2, #3
 8002444:	701a      	strb	r2, [r3, #0]
        break;
 8002446:	e005      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002448:	4b8e      	ldr	r3, [pc, #568]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4013      	ands	r3, r2
 8002452:	d0ed      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002454:	2313      	movs	r3, #19
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d154      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002462:	23c0      	movs	r3, #192	; 0xc0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4013      	ands	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d019      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	429a      	cmp	r2, r3
 8002478:	d014      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800247a:	4b81      	ldr	r3, [pc, #516]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	4a82      	ldr	r2, [pc, #520]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002484:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002488:	4b7d      	ldr	r3, [pc, #500]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	0249      	lsls	r1, r1, #9
 800248e:	430a      	orrs	r2, r1
 8002490:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002492:	4b7b      	ldr	r3, [pc, #492]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002494:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002496:	4b7a      	ldr	r3, [pc, #488]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002498:	497c      	ldr	r1, [pc, #496]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800249a:	400a      	ands	r2, r1
 800249c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800249e:	4b78      	ldr	r3, [pc, #480]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	d016      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fffe 	bl	80014ac <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b4:	e00c      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fff9 	bl	80014ac <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	4a73      	ldr	r2, [pc, #460]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d904      	bls.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80024c6:	2313      	movs	r3, #19
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2203      	movs	r2, #3
 80024cc:	701a      	strb	r2, [r3, #0]
            break;
 80024ce:	e004      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d0:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	d0ed      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80024da:	2313      	movs	r3, #19
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	4a67      	ldr	r2, [pc, #412]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80024f8:	e00c      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024fa:	2312      	movs	r3, #18
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2213      	movs	r2, #19
 8002500:	18ba      	adds	r2, r7, r2
 8002502:	7812      	ldrb	r2, [r2, #0]
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e005      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002508:	2312      	movs	r3, #18
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	2213      	movs	r2, #19
 800250e:	18ba      	adds	r2, r7, r2
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002514:	2311      	movs	r3, #17
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251e:	4b58      	ldr	r3, [pc, #352]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002524:	495b      	ldr	r1, [pc, #364]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002526:	400a      	ands	r2, r1
 8002528:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002534:	4b52      	ldr	r3, [pc, #328]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	2203      	movs	r2, #3
 800253a:	4393      	bics	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002544:	430a      	orrs	r2, r1
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2210      	movs	r2, #16
 800254e:	4013      	ands	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002552:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	4a50      	ldr	r2, [pc, #320]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002562:	430a      	orrs	r2, r1
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4013      	ands	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	4a49      	ldr	r2, [pc, #292]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002578:	4013      	ands	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002582:	430a      	orrs	r2, r1
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4013      	ands	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	4a42      	ldr	r2, [pc, #264]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2220      	movs	r2, #32
 80025ac:	4013      	ands	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025b0:	4b33      	ldr	r3, [pc, #204]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025c0:	430a      	orrs	r2, r1
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	01db      	lsls	r3, r3, #7
 80025cc:	4013      	ands	r3, r2
 80025ce:	d015      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	0899      	lsrs	r1, r3, #2
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	05db      	lsls	r3, r3, #23
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d106      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	0249      	lsls	r1, r1, #9
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	039b      	lsls	r3, r3, #14
 8002604:	4013      	ands	r3, r2
 8002606:	d016      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800260e:	4013      	ands	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1a      	ldr	r2, [r3, #32]
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002618:	430a      	orrs	r2, r1
 800261a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	03db      	lsls	r3, r3, #15
 8002624:	429a      	cmp	r2, r3
 8002626:	d106      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	0449      	lsls	r1, r1, #17
 8002632:	430a      	orrs	r2, r1
 8002634:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4013      	ands	r3, r2
 8002640:	d016      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	4a19      	ldr	r2, [pc, #100]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002648:	4013      	ands	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002652:	430a      	orrs	r2, r1
 8002654:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	01db      	lsls	r3, r3, #7
 800265e:	429a      	cmp	r2, r3
 8002660:	d106      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	0249      	lsls	r1, r1, #9
 800266c:	430a      	orrs	r2, r1
 800266e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002670:	2312      	movs	r3, #18
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	781b      	ldrb	r3, [r3, #0]
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b006      	add	sp, #24
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	fffffcff 	.word	0xfffffcff
 800268c:	fffeffff 	.word	0xfffeffff
 8002690:	00001388 	.word	0x00001388
 8002694:	efffffff 	.word	0xefffffff
 8002698:	fffff3ff 	.word	0xfffff3ff
 800269c:	fff3ffff 	.word	0xfff3ffff
 80026a0:	ffcfffff 	.word	0xffcfffff
 80026a4:	ffffcfff 	.word	0xffffcfff
 80026a8:	ffbfffff 	.word	0xffbfffff
 80026ac:	ffff3fff 	.word	0xffff3fff

080026b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026b8:	230f      	movs	r3, #15
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d100      	bne.n	80026c8 <HAL_RTC_Init+0x18>
 80026c6:	e08c      	b.n	80027e2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2229      	movs	r2, #41	; 0x29
 80026cc:	5c9b      	ldrb	r3, [r3, r2]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2228      	movs	r2, #40	; 0x28
 80026d8:	2100      	movs	r1, #0
 80026da:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2288      	movs	r2, #136	; 0x88
 80026e0:	0212      	lsls	r2, r2, #8
 80026e2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f7fe fc4c 	bl	8000f84 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2229      	movs	r2, #41	; 0x29
 80026f0:	2102      	movs	r1, #2
 80026f2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2210      	movs	r2, #16
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d062      	beq.n	80027c8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	22ca      	movs	r2, #202	; 0xca
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2253      	movs	r2, #83	; 0x53
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002712:	250f      	movs	r5, #15
 8002714:	197c      	adds	r4, r7, r5
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f892 	bl	8002842 <RTC_EnterInitMode>
 800271e:	0003      	movs	r3, r0
 8002720:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002722:	0028      	movs	r0, r5
 8002724:	183b      	adds	r3, r7, r0
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12c      	bne.n	8002786 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	492e      	ldr	r1, [pc, #184]	; (80027f0 <HAL_RTC_Init+0x140>)
 8002738:	400a      	ands	r2, r1
 800273a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6999      	ldr	r1, [r3, #24]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6912      	ldr	r2, [r2, #16]
 8002762:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6919      	ldr	r1, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	041a      	lsls	r2, r3, #16
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002778:	183c      	adds	r4, r7, r0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0018      	movs	r0, r3
 800277e:	f000 f8a3 	bl	80028c8 <RTC_ExitInitMode>
 8002782:	0003      	movs	r3, r0
 8002784:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002786:	230f      	movs	r3, #15
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d116      	bne.n	80027be <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	00d2      	lsls	r2, r2, #3
 800279c:	08d2      	lsrs	r2, r2, #3
 800279e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6999      	ldr	r1, [r3, #24]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24
 80027c6:	e003      	b.n	80027d0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80027c8:	230f      	movs	r3, #15
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80027d0:	230f      	movs	r3, #15
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2229      	movs	r2, #41	; 0x29
 80027de:	2101      	movs	r1, #1
 80027e0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80027e2:	230f      	movs	r3, #15
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781b      	ldrb	r3, [r3, #0]
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b004      	add	sp, #16
 80027ee:	bdb0      	pop	{r4, r5, r7, pc}
 80027f0:	fb8fffbf 	.word	0xfb8fffbf

080027f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	21a0      	movs	r1, #160	; 0xa0
 8002808:	438a      	bics	r2, r1
 800280a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800280c:	f7fe fe4e 	bl	80014ac <HAL_GetTick>
 8002810:	0003      	movs	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002814:	e00a      	b.n	800282c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002816:	f7fe fe49 	bl	80014ac <HAL_GetTick>
 800281a:	0002      	movs	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad2      	subs	r2, r2, r3
 8002820:	23fa      	movs	r3, #250	; 0xfa
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	429a      	cmp	r2, r3
 8002826:	d901      	bls.n	800282c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e006      	b.n	800283a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	4013      	ands	r3, r2
 8002836:	d0ee      	beq.n	8002816 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b004      	add	sp, #16
 8002840:	bd80      	pop	{r7, pc}

08002842 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800284a:	230f      	movs	r3, #15
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	4013      	ands	r3, r2
 800285c:	d12c      	bne.n	80028b8 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	430a      	orrs	r2, r1
 800286c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800286e:	f7fe fe1d 	bl	80014ac <HAL_GetTick>
 8002872:	0003      	movs	r3, r0
 8002874:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002876:	e014      	b.n	80028a2 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002878:	f7fe fe18 	bl	80014ac <HAL_GetTick>
 800287c:	0002      	movs	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad2      	subs	r2, r2, r3
 8002882:	200f      	movs	r0, #15
 8002884:	183b      	adds	r3, r7, r0
 8002886:	1839      	adds	r1, r7, r0
 8002888:	7809      	ldrb	r1, [r1, #0]
 800288a:	7019      	strb	r1, [r3, #0]
 800288c:	23fa      	movs	r3, #250	; 0xfa
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	d906      	bls.n	80028a2 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002894:	183b      	adds	r3, r7, r0
 8002896:	2203      	movs	r2, #3
 8002898:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2229      	movs	r2, #41	; 0x29
 800289e:	2103      	movs	r1, #3
 80028a0:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2240      	movs	r2, #64	; 0x40
 80028aa:	4013      	ands	r3, r2
 80028ac:	d104      	bne.n	80028b8 <RTC_EnterInitMode+0x76>
 80028ae:	230f      	movs	r3, #15
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d1df      	bne.n	8002878 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80028b8:	230f      	movs	r3, #15
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	781b      	ldrb	r3, [r3, #0]
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	240f      	movs	r4, #15
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <RTC_ExitInitMode+0x84>)
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <RTC_ExitInitMode+0x84>)
 80028de:	2180      	movs	r1, #128	; 0x80
 80028e0:	438a      	bics	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <RTC_ExitInitMode+0x84>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2220      	movs	r2, #32
 80028ea:	4013      	ands	r3, r2
 80028ec:	d10d      	bne.n	800290a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7ff ff7f 	bl	80027f4 <HAL_RTC_WaitForSynchro>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d021      	beq.n	800293e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2229      	movs	r2, #41	; 0x29
 80028fe:	2103      	movs	r1, #3
 8002900:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002902:	193b      	adds	r3, r7, r4
 8002904:	2203      	movs	r2, #3
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	e019      	b.n	800293e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <RTC_ExitInitMode+0x84>)
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <RTC_ExitInitMode+0x84>)
 8002910:	2120      	movs	r1, #32
 8002912:	438a      	bics	r2, r1
 8002914:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f7ff ff6b 	bl	80027f4 <HAL_RTC_WaitForSynchro>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d007      	beq.n	8002932 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2229      	movs	r2, #41	; 0x29
 8002926:	2103      	movs	r1, #3
 8002928:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800292a:	230f      	movs	r3, #15
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2203      	movs	r2, #3
 8002930:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <RTC_ExitInitMode+0x84>)
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <RTC_ExitInitMode+0x84>)
 8002938:	2120      	movs	r1, #32
 800293a:	430a      	orrs	r2, r1
 800293c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800293e:	230f      	movs	r3, #15
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	781b      	ldrb	r3, [r3, #0]
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b005      	add	sp, #20
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	40002800 	.word	0x40002800

08002950 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2228      	movs	r2, #40	; 0x28
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002966:	2302      	movs	r3, #2
 8002968:	e082      	b.n	8002a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2228      	movs	r2, #40	; 0x28
 800296e:	2101      	movs	r1, #1
 8002970:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2229      	movs	r2, #41	; 0x29
 8002976:	2102      	movs	r1, #2
 8002978:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	22ca      	movs	r2, #202	; 0xca
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2253      	movs	r2, #83	; 0x53
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4938      	ldr	r1, [pc, #224]	; (8002a78 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8002996:	400a      	ands	r2, r1
 8002998:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2104      	movs	r1, #4
 80029a6:	430a      	orrs	r2, r1
 80029a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2240      	movs	r2, #64	; 0x40
 80029b0:	4013      	ands	r3, r2
 80029b2:	d121      	bne.n	80029f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 80029b4:	f7fe fd7a 	bl	80014ac <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80029bc:	e016      	b.n	80029ec <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80029be:	f7fe fd75 	bl	80014ac <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad2      	subs	r2, r2, r3
 80029c8:	23fa      	movs	r3, #250	; 0xfa
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d90d      	bls.n	80029ec <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	22ff      	movs	r2, #255	; 0xff
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2229      	movs	r2, #41	; 0x29
 80029dc:	2103      	movs	r1, #3
 80029de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2228      	movs	r2, #40	; 0x28
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e041      	b.n	8002a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2204      	movs	r2, #4
 80029f4:	4013      	ands	r3, r2
 80029f6:	d0e2      	beq.n	80029be <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2107      	movs	r1, #7
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6999      	ldr	r1, [r3, #24]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002a20:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	58d3      	ldr	r3, [r2, r3]
 8002a26:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002a28:	2280      	movs	r2, #128	; 0x80
 8002a2a:	0312      	lsls	r2, r2, #12
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699a      	ldr	r2, [r3, #24]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2180      	movs	r1, #128	; 0x80
 8002a3e:	01c9      	lsls	r1, r1, #7
 8002a40:	430a      	orrs	r2, r1
 8002a42:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	00c9      	lsls	r1, r1, #3
 8002a52:	430a      	orrs	r2, r1
 8002a54:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	22ff      	movs	r2, #255	; 0xff
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2229      	movs	r2, #41	; 0x29
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2228      	movs	r2, #40	; 0x28
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b006      	add	sp, #24
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	fffffbff 	.word	0xfffffbff
 8002a7c:	40002800 	.word	0x40002800
 8002a80:	40021800 	.word	0x40021800

08002a84 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a92:	2204      	movs	r2, #4
 8002a94:	4013      	ands	r3, r2
 8002a96:	d00b      	beq.n	8002ab0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 f808 	bl	8002ac0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2229      	movs	r2, #41	; 0x29
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	5499      	strb	r1, [r3, r2]
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e04a      	b.n	8002b78 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	223d      	movs	r2, #61	; 0x3d
 8002ae6:	5c9b      	ldrb	r3, [r3, r2]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	223c      	movs	r2, #60	; 0x3c
 8002af2:	2100      	movs	r1, #0
 8002af4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7fe fa89 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	223d      	movs	r2, #61	; 0x3d
 8002b02:	2102      	movs	r1, #2
 8002b04:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	0019      	movs	r1, r3
 8002b10:	0010      	movs	r0, r2
 8002b12:	f000 fa09 	bl	8002f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2248      	movs	r2, #72	; 0x48
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	223e      	movs	r2, #62	; 0x3e
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	223f      	movs	r2, #63	; 0x3f
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	2101      	movs	r1, #1
 8002b34:	5499      	strb	r1, [r3, r2]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2241      	movs	r2, #65	; 0x41
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2242      	movs	r2, #66	; 0x42
 8002b42:	2101      	movs	r1, #1
 8002b44:	5499      	strb	r1, [r3, r2]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2243      	movs	r2, #67	; 0x43
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2244      	movs	r2, #68	; 0x44
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2245      	movs	r2, #69	; 0x45
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2246      	movs	r2, #70	; 0x46
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2247      	movs	r2, #71	; 0x47
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	223d      	movs	r2, #61	; 0x3d
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	223d      	movs	r2, #61	; 0x3d
 8002b8c:	5c9b      	ldrb	r3, [r3, r2]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d001      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e03d      	b.n	8002c14 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	223d      	movs	r2, #61	; 0x3d
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	430a      	orrs	r2, r1
 8002bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <HAL_TIM_Base_Start_IT+0x9c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x50>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	05db      	lsls	r3, r3, #23
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d004      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x50>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d116      	bne.n	8002bfe <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_TIM_Base_Start_IT+0xa4>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d016      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x90>
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	025b      	lsls	r3, r3, #9
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d011      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfc:	e008      	b.n	8002c10 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e000      	b.n	8002c12 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c10:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b004      	add	sp, #16
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	40000400 	.word	0x40000400
 8002c24:	00010007 	.word	0x00010007

08002c28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_TIM_Base_Stop_IT+0x54>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d10d      	bne.n	8002c68 <HAL_TIM_Base_Stop_IT+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <HAL_TIM_Base_Stop_IT+0x58>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_Base_Stop_IT+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	438a      	bics	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	223d      	movs	r2, #61	; 0x3d
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	0018      	movs	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b002      	add	sp, #8
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	00001111 	.word	0x00001111
 8002c80:	00000444 	.word	0x00000444

08002c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2202      	movs	r2, #2
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d124      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d11d      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2203      	movs	r2, #3
 8002cae:	4252      	negs	r2, r2
 8002cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 f916 	bl	8002ef8 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e007      	b.n	8002cde <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 f909 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f915 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2204      	movs	r2, #4
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d125      	bne.n	8002d3e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d11e      	bne.n	8002d3e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2205      	movs	r2, #5
 8002d06:	4252      	negs	r2, r2
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	23c0      	movs	r3, #192	; 0xc0
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f8e9 	bl	8002ef8 <HAL_TIM_IC_CaptureCallback>
 8002d26:	e007      	b.n	8002d38 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 f8dc 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 f8e8 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2208      	movs	r2, #8
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d124      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2208      	movs	r2, #8
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d11d      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2209      	movs	r2, #9
 8002d60:	4252      	negs	r2, r2
 8002d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2204      	movs	r2, #4
 8002d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2203      	movs	r2, #3
 8002d72:	4013      	ands	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f8bd 	bl	8002ef8 <HAL_TIM_IC_CaptureCallback>
 8002d7e:	e007      	b.n	8002d90 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 f8b0 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 f8bc 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d125      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2210      	movs	r2, #16
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d11e      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2211      	movs	r2, #17
 8002db8:	4252      	negs	r2, r2
 8002dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	23c0      	movs	r3, #192	; 0xc0
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 f890 	bl	8002ef8 <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e007      	b.n	8002dea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 f883 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f88f 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d10f      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d108      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2202      	movs	r2, #2
 8002e12:	4252      	negs	r2, r2
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7fe f85d 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d10f      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b80      	cmp	r3, #128	; 0x80
 8002e38:	d108      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2281      	movs	r2, #129	; 0x81
 8002e40:	4252      	negs	r2, r2
 8002e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f8ec 	bl	8003024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	401a      	ands	r2, r3
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d10e      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b80      	cmp	r3, #128	; 0x80
 8002e6c:	d107      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_TIM_IRQHandler+0x260>)
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 f8db 	bl	8003034 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2240      	movs	r2, #64	; 0x40
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d10f      	bne.n	8002eac <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2240      	movs	r2, #64	; 0x40
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d108      	bne.n	8002eac <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2241      	movs	r2, #65	; 0x41
 8002ea0:	4252      	negs	r2, r2
 8002ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 f836 	bl	8002f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d10f      	bne.n	8002eda <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d108      	bne.n	8002eda <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2221      	movs	r2, #33	; 0x21
 8002ece:	4252      	negs	r2, r2
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 f89d 	bl	8003014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	fffffeff 	.word	0xfffffeff

08002ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a30      	ldr	r2, [pc, #192]	; (8002ffc <TIM_Base_SetConfig+0xd4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d008      	beq.n	8002f52 <TIM_Base_SetConfig+0x2a>
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	05db      	lsls	r3, r3, #23
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d003      	beq.n	8002f52 <TIM_Base_SetConfig+0x2a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <TIM_Base_SetConfig+0xd8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d108      	bne.n	8002f64 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2270      	movs	r2, #112	; 0x70
 8002f56:	4393      	bics	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <TIM_Base_SetConfig+0xd4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d014      	beq.n	8002f96 <TIM_Base_SetConfig+0x6e>
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	05db      	lsls	r3, r3, #23
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d00f      	beq.n	8002f96 <TIM_Base_SetConfig+0x6e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a21      	ldr	r2, [pc, #132]	; (8003000 <TIM_Base_SetConfig+0xd8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0x6e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a20      	ldr	r2, [pc, #128]	; (8003004 <TIM_Base_SetConfig+0xdc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0x6e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <TIM_Base_SetConfig+0xe0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0x6e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1e      	ldr	r2, [pc, #120]	; (800300c <TIM_Base_SetConfig+0xe4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <TIM_Base_SetConfig+0xe8>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	4393      	bics	r3, r2
 8002fae:	001a      	movs	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <TIM_Base_SetConfig+0xd4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <TIM_Base_SetConfig+0xbe>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <TIM_Base_SetConfig+0xe0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_Base_SetConfig+0xbe>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	; (800300c <TIM_Base_SetConfig+0xe4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d103      	bne.n	8002fee <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	615a      	str	r2, [r3, #20]
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b004      	add	sp, #16
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400
 8003004:	40002000 	.word	0x40002000
 8003008:	40014400 	.word	0x40014400
 800300c:	40014800 	.word	0x40014800
 8003010:	fffffcff 	.word	0xfffffcff

08003014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800302c:	46c0      	nop			; (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b002      	add	sp, #8
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e046      	b.n	80030e4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2288      	movs	r2, #136	; 0x88
 800305a:	589b      	ldr	r3, [r3, r2]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2284      	movs	r2, #132	; 0x84
 8003064:	2100      	movs	r1, #0
 8003066:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0018      	movs	r0, r3
 800306c:	f7fe f816 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2288      	movs	r2, #136	; 0x88
 8003074:	2124      	movs	r1, #36	; 0x24
 8003076:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2101      	movs	r1, #1
 8003084:	438a      	bics	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f9ae 	bl	80033ec <UART_SetConfig>
 8003090:	0003      	movs	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e024      	b.n	80030e4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 fc19 	bl	80038dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	490d      	ldr	r1, [pc, #52]	; (80030ec <HAL_UART_Init+0xa8>)
 80030b6:	400a      	ands	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	212a      	movs	r1, #42	; 0x2a
 80030c6:	438a      	bics	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	430a      	orrs	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0018      	movs	r0, r3
 80030de:	f000 fcb1 	bl	8003a44 <UART_CheckIdleState>
 80030e2:	0003      	movs	r3, r0
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	ffffb7ff 	.word	0xffffb7ff

080030f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	1dbb      	adds	r3, r7, #6
 80030fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2288      	movs	r2, #136	; 0x88
 8003104:	589b      	ldr	r3, [r3, r2]
 8003106:	2b20      	cmp	r3, #32
 8003108:	d000      	beq.n	800310c <HAL_UART_Transmit+0x1c>
 800310a:	e088      	b.n	800321e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_UART_Transmit+0x2a>
 8003112:	1dbb      	adds	r3, r7, #6
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e080      	b.n	8003220 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	015b      	lsls	r3, r3, #5
 8003126:	429a      	cmp	r2, r3
 8003128:	d109      	bne.n	800313e <HAL_UART_Transmit+0x4e>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d001      	beq.n	800313e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e070      	b.n	8003220 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2290      	movs	r2, #144	; 0x90
 8003142:	2100      	movs	r1, #0
 8003144:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2288      	movs	r2, #136	; 0x88
 800314a:	2121      	movs	r1, #33	; 0x21
 800314c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800314e:	f7fe f9ad 	bl	80014ac <HAL_GetTick>
 8003152:	0003      	movs	r3, r0
 8003154:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1dba      	adds	r2, r7, #6
 800315a:	2154      	movs	r1, #84	; 0x54
 800315c:	8812      	ldrh	r2, [r2, #0]
 800315e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1dba      	adds	r2, r7, #6
 8003164:	2156      	movs	r1, #86	; 0x56
 8003166:	8812      	ldrh	r2, [r2, #0]
 8003168:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	015b      	lsls	r3, r3, #5
 8003172:	429a      	cmp	r2, r3
 8003174:	d108      	bne.n	8003188 <HAL_UART_Transmit+0x98>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d104      	bne.n	8003188 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	e003      	b.n	8003190 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800318c:	2300      	movs	r3, #0
 800318e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003190:	e02c      	b.n	80031ec <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	0013      	movs	r3, r2
 800319c:	2200      	movs	r2, #0
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	f000 fc9e 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e039      	b.n	8003220 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	001a      	movs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	05d2      	lsls	r2, r2, #23
 80031be:	0dd2      	lsrs	r2, r2, #23
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	3302      	adds	r3, #2
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	e007      	b.n	80031da <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	3301      	adds	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2256      	movs	r2, #86	; 0x56
 80031de:	5a9b      	ldrh	r3, [r3, r2]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b299      	uxth	r1, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2256      	movs	r2, #86	; 0x56
 80031ea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2256      	movs	r2, #86	; 0x56
 80031f0:	5a9b      	ldrh	r3, [r3, r2]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1cc      	bne.n	8003192 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	0013      	movs	r3, r2
 8003202:	2200      	movs	r2, #0
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	f000 fc6b 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 800320a:	1e03      	subs	r3, r0, #0
 800320c:	d001      	beq.n	8003212 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e006      	b.n	8003220 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2288      	movs	r2, #136	; 0x88
 8003216:	2120      	movs	r1, #32
 8003218:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
  }
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b008      	add	sp, #32
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	1dbb      	adds	r3, r7, #6
 8003236:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	228c      	movs	r2, #140	; 0x8c
 800323c:	589b      	ldr	r3, [r3, r2]
 800323e:	2b20      	cmp	r3, #32
 8003240:	d000      	beq.n	8003244 <HAL_UART_Receive+0x1c>
 8003242:	e0cc      	b.n	80033de <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_UART_Receive+0x2a>
 800324a:	1dbb      	adds	r3, r7, #6
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0c4      	b.n	80033e0 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	015b      	lsls	r3, r3, #5
 800325e:	429a      	cmp	r2, r3
 8003260:	d109      	bne.n	8003276 <HAL_UART_Receive+0x4e>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2201      	movs	r2, #1
 800326e:	4013      	ands	r3, r2
 8003270:	d001      	beq.n	8003276 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0b4      	b.n	80033e0 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2290      	movs	r2, #144	; 0x90
 800327a:	2100      	movs	r1, #0
 800327c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	228c      	movs	r2, #140	; 0x8c
 8003282:	2122      	movs	r1, #34	; 0x22
 8003284:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800328c:	f7fe f90e 	bl	80014ac <HAL_GetTick>
 8003290:	0003      	movs	r3, r0
 8003292:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1dba      	adds	r2, r7, #6
 8003298:	215c      	movs	r1, #92	; 0x5c
 800329a:	8812      	ldrh	r2, [r2, #0]
 800329c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1dba      	adds	r2, r7, #6
 80032a2:	215e      	movs	r1, #94	; 0x5e
 80032a4:	8812      	ldrh	r2, [r2, #0]
 80032a6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	015b      	lsls	r3, r3, #5
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d10d      	bne.n	80032d0 <HAL_UART_Receive+0xa8>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <HAL_UART_Receive+0x9e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2260      	movs	r2, #96	; 0x60
 80032c0:	4949      	ldr	r1, [pc, #292]	; (80033e8 <HAL_UART_Receive+0x1c0>)
 80032c2:	5299      	strh	r1, [r3, r2]
 80032c4:	e02e      	b.n	8003324 <HAL_UART_Receive+0xfc>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2260      	movs	r2, #96	; 0x60
 80032ca:	21ff      	movs	r1, #255	; 0xff
 80032cc:	5299      	strh	r1, [r3, r2]
 80032ce:	e029      	b.n	8003324 <HAL_UART_Receive+0xfc>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10d      	bne.n	80032f4 <HAL_UART_Receive+0xcc>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <HAL_UART_Receive+0xc2>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2260      	movs	r2, #96	; 0x60
 80032e4:	21ff      	movs	r1, #255	; 0xff
 80032e6:	5299      	strh	r1, [r3, r2]
 80032e8:	e01c      	b.n	8003324 <HAL_UART_Receive+0xfc>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2260      	movs	r2, #96	; 0x60
 80032ee:	217f      	movs	r1, #127	; 0x7f
 80032f0:	5299      	strh	r1, [r3, r2]
 80032f2:	e017      	b.n	8003324 <HAL_UART_Receive+0xfc>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	055b      	lsls	r3, r3, #21
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d10d      	bne.n	800331c <HAL_UART_Receive+0xf4>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <HAL_UART_Receive+0xea>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2260      	movs	r2, #96	; 0x60
 800330c:	217f      	movs	r1, #127	; 0x7f
 800330e:	5299      	strh	r1, [r3, r2]
 8003310:	e008      	b.n	8003324 <HAL_UART_Receive+0xfc>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2260      	movs	r2, #96	; 0x60
 8003316:	213f      	movs	r1, #63	; 0x3f
 8003318:	5299      	strh	r1, [r3, r2]
 800331a:	e003      	b.n	8003324 <HAL_UART_Receive+0xfc>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2260      	movs	r2, #96	; 0x60
 8003320:	2100      	movs	r1, #0
 8003322:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003324:	2312      	movs	r3, #18
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	2160      	movs	r1, #96	; 0x60
 800332c:	5a52      	ldrh	r2, [r2, r1]
 800332e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	015b      	lsls	r3, r3, #5
 8003338:	429a      	cmp	r2, r3
 800333a:	d108      	bne.n	800334e <HAL_UART_Receive+0x126>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e003      	b.n	8003356 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003356:	e036      	b.n	80033c6 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	0013      	movs	r3, r2
 8003362:	2200      	movs	r2, #0
 8003364:	2120      	movs	r1, #32
 8003366:	f000 fbbb 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d001      	beq.n	8003372 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e036      	b.n	80033e0 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10e      	bne.n	8003396 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	b29b      	uxth	r3, r3
 8003380:	2212      	movs	r2, #18
 8003382:	18ba      	adds	r2, r7, r2
 8003384:	8812      	ldrh	r2, [r2, #0]
 8003386:	4013      	ands	r3, r2
 8003388:	b29a      	uxth	r2, r3
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	3302      	adds	r3, #2
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	e00e      	b.n	80033b4 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2212      	movs	r2, #18
 80033a0:	18ba      	adds	r2, r7, r2
 80033a2:	8812      	ldrh	r2, [r2, #0]
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	4013      	ands	r3, r2
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	225e      	movs	r2, #94	; 0x5e
 80033b8:	5a9b      	ldrh	r3, [r3, r2]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b299      	uxth	r1, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	225e      	movs	r2, #94	; 0x5e
 80033c4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	225e      	movs	r2, #94	; 0x5e
 80033ca:	5a9b      	ldrh	r3, [r3, r2]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1c2      	bne.n	8003358 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	228c      	movs	r2, #140	; 0x8c
 80033d6:	2120      	movs	r1, #32
 80033d8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b008      	add	sp, #32
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	000001ff 	.word	0x000001ff

080033ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b090      	sub	sp, #64	; 0x40
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f4:	231a      	movs	r3, #26
 80033f6:	2220      	movs	r2, #32
 80033f8:	189b      	adds	r3, r3, r2
 80033fa:	19db      	adds	r3, r3, r7
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	431a      	orrs	r2, r3
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4313      	orrs	r3, r2
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4ac4      	ldr	r2, [pc, #784]	; (8003730 <UART_SetConfig+0x344>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342a:	430b      	orrs	r3, r1
 800342c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4abf      	ldr	r2, [pc, #764]	; (8003734 <UART_SetConfig+0x348>)
 8003436:	4013      	ands	r3, r2
 8003438:	0018      	movs	r0, r3
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	0003      	movs	r3, r0
 8003444:	430b      	orrs	r3, r1
 8003446:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4ab9      	ldr	r2, [pc, #740]	; (8003738 <UART_SetConfig+0x34c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800345e:	4313      	orrs	r3, r2
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4ab4      	ldr	r2, [pc, #720]	; (800373c <UART_SetConfig+0x350>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003474:	430b      	orrs	r3, r1
 8003476:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	220f      	movs	r2, #15
 8003480:	4393      	bics	r3, r2
 8003482:	0018      	movs	r0, r3
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	0003      	movs	r3, r0
 800348e:	430b      	orrs	r3, r1
 8003490:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4aaa      	ldr	r2, [pc, #680]	; (8003740 <UART_SetConfig+0x354>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d131      	bne.n	8003500 <UART_SetConfig+0x114>
 800349c:	4ba9      	ldr	r3, [pc, #676]	; (8003744 <UART_SetConfig+0x358>)
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	2203      	movs	r2, #3
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d01d      	beq.n	80034e4 <UART_SetConfig+0xf8>
 80034a8:	d823      	bhi.n	80034f2 <UART_SetConfig+0x106>
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d00c      	beq.n	80034c8 <UART_SetConfig+0xdc>
 80034ae:	d820      	bhi.n	80034f2 <UART_SetConfig+0x106>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <UART_SetConfig+0xce>
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d00e      	beq.n	80034d6 <UART_SetConfig+0xea>
 80034b8:	e01b      	b.n	80034f2 <UART_SetConfig+0x106>
 80034ba:	231b      	movs	r3, #27
 80034bc:	2220      	movs	r2, #32
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	19db      	adds	r3, r3, r7
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e071      	b.n	80035ac <UART_SetConfig+0x1c0>
 80034c8:	231b      	movs	r3, #27
 80034ca:	2220      	movs	r2, #32
 80034cc:	189b      	adds	r3, r3, r2
 80034ce:	19db      	adds	r3, r3, r7
 80034d0:	2202      	movs	r2, #2
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e06a      	b.n	80035ac <UART_SetConfig+0x1c0>
 80034d6:	231b      	movs	r3, #27
 80034d8:	2220      	movs	r2, #32
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	19db      	adds	r3, r3, r7
 80034de:	2204      	movs	r2, #4
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e063      	b.n	80035ac <UART_SetConfig+0x1c0>
 80034e4:	231b      	movs	r3, #27
 80034e6:	2220      	movs	r2, #32
 80034e8:	189b      	adds	r3, r3, r2
 80034ea:	19db      	adds	r3, r3, r7
 80034ec:	2208      	movs	r2, #8
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e05c      	b.n	80035ac <UART_SetConfig+0x1c0>
 80034f2:	231b      	movs	r3, #27
 80034f4:	2220      	movs	r2, #32
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	19db      	adds	r3, r3, r7
 80034fa:	2210      	movs	r2, #16
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e055      	b.n	80035ac <UART_SetConfig+0x1c0>
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a90      	ldr	r2, [pc, #576]	; (8003748 <UART_SetConfig+0x35c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d106      	bne.n	8003518 <UART_SetConfig+0x12c>
 800350a:	231b      	movs	r3, #27
 800350c:	2220      	movs	r2, #32
 800350e:	189b      	adds	r3, r3, r2
 8003510:	19db      	adds	r3, r3, r7
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	e049      	b.n	80035ac <UART_SetConfig+0x1c0>
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a86      	ldr	r2, [pc, #536]	; (8003738 <UART_SetConfig+0x34c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d13e      	bne.n	80035a0 <UART_SetConfig+0x1b4>
 8003522:	4b88      	ldr	r3, [pc, #544]	; (8003744 <UART_SetConfig+0x358>)
 8003524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003526:	23c0      	movs	r3, #192	; 0xc0
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	4013      	ands	r3, r2
 800352c:	22c0      	movs	r2, #192	; 0xc0
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	4293      	cmp	r3, r2
 8003532:	d027      	beq.n	8003584 <UART_SetConfig+0x198>
 8003534:	22c0      	movs	r2, #192	; 0xc0
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	4293      	cmp	r3, r2
 800353a:	d82a      	bhi.n	8003592 <UART_SetConfig+0x1a6>
 800353c:	2280      	movs	r2, #128	; 0x80
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	4293      	cmp	r3, r2
 8003542:	d011      	beq.n	8003568 <UART_SetConfig+0x17c>
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	4293      	cmp	r3, r2
 800354a:	d822      	bhi.n	8003592 <UART_SetConfig+0x1a6>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <UART_SetConfig+0x16e>
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	00d2      	lsls	r2, r2, #3
 8003554:	4293      	cmp	r3, r2
 8003556:	d00e      	beq.n	8003576 <UART_SetConfig+0x18a>
 8003558:	e01b      	b.n	8003592 <UART_SetConfig+0x1a6>
 800355a:	231b      	movs	r3, #27
 800355c:	2220      	movs	r2, #32
 800355e:	189b      	adds	r3, r3, r2
 8003560:	19db      	adds	r3, r3, r7
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e021      	b.n	80035ac <UART_SetConfig+0x1c0>
 8003568:	231b      	movs	r3, #27
 800356a:	2220      	movs	r2, #32
 800356c:	189b      	adds	r3, r3, r2
 800356e:	19db      	adds	r3, r3, r7
 8003570:	2202      	movs	r2, #2
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e01a      	b.n	80035ac <UART_SetConfig+0x1c0>
 8003576:	231b      	movs	r3, #27
 8003578:	2220      	movs	r2, #32
 800357a:	189b      	adds	r3, r3, r2
 800357c:	19db      	adds	r3, r3, r7
 800357e:	2204      	movs	r2, #4
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e013      	b.n	80035ac <UART_SetConfig+0x1c0>
 8003584:	231b      	movs	r3, #27
 8003586:	2220      	movs	r2, #32
 8003588:	189b      	adds	r3, r3, r2
 800358a:	19db      	adds	r3, r3, r7
 800358c:	2208      	movs	r2, #8
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e00c      	b.n	80035ac <UART_SetConfig+0x1c0>
 8003592:	231b      	movs	r3, #27
 8003594:	2220      	movs	r2, #32
 8003596:	189b      	adds	r3, r3, r2
 8003598:	19db      	adds	r3, r3, r7
 800359a:	2210      	movs	r2, #16
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e005      	b.n	80035ac <UART_SetConfig+0x1c0>
 80035a0:	231b      	movs	r3, #27
 80035a2:	2220      	movs	r2, #32
 80035a4:	189b      	adds	r3, r3, r2
 80035a6:	19db      	adds	r3, r3, r7
 80035a8:	2210      	movs	r2, #16
 80035aa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a61      	ldr	r2, [pc, #388]	; (8003738 <UART_SetConfig+0x34c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d000      	beq.n	80035b8 <UART_SetConfig+0x1cc>
 80035b6:	e092      	b.n	80036de <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035b8:	231b      	movs	r3, #27
 80035ba:	2220      	movs	r2, #32
 80035bc:	189b      	adds	r3, r3, r2
 80035be:	19db      	adds	r3, r3, r7
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d015      	beq.n	80035f2 <UART_SetConfig+0x206>
 80035c6:	dc18      	bgt.n	80035fa <UART_SetConfig+0x20e>
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d00d      	beq.n	80035e8 <UART_SetConfig+0x1fc>
 80035cc:	dc15      	bgt.n	80035fa <UART_SetConfig+0x20e>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <UART_SetConfig+0x1ec>
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d005      	beq.n	80035e2 <UART_SetConfig+0x1f6>
 80035d6:	e010      	b.n	80035fa <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7fe feda 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80035dc:	0003      	movs	r3, r0
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035e0:	e014      	b.n	800360c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e2:	4b5a      	ldr	r3, [pc, #360]	; (800374c <UART_SetConfig+0x360>)
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035e6:	e011      	b.n	800360c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e8:	f7fe fe46 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 80035ec:	0003      	movs	r3, r0
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035f0:	e00c      	b.n	800360c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035f8:	e008      	b.n	800360c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035fe:	231a      	movs	r3, #26
 8003600:	2220      	movs	r2, #32
 8003602:	189b      	adds	r3, r3, r2
 8003604:	19db      	adds	r3, r3, r7
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
        break;
 800360a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800360c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360e:	2b00      	cmp	r3, #0
 8003610:	d100      	bne.n	8003614 <UART_SetConfig+0x228>
 8003612:	e147      	b.n	80038a4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003618:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <UART_SetConfig+0x364>)
 800361a:	0052      	lsls	r2, r2, #1
 800361c:	5ad3      	ldrh	r3, [r2, r3]
 800361e:	0019      	movs	r1, r3
 8003620:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003622:	f7fc fd81 	bl	8000128 <__udivsi3>
 8003626:	0003      	movs	r3, r0
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	0013      	movs	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	189b      	adds	r3, r3, r2
 8003634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003636:	429a      	cmp	r2, r3
 8003638:	d305      	bcc.n	8003646 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003642:	429a      	cmp	r2, r3
 8003644:	d906      	bls.n	8003654 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003646:	231a      	movs	r3, #26
 8003648:	2220      	movs	r2, #32
 800364a:	189b      	adds	r3, r3, r2
 800364c:	19db      	adds	r3, r3, r7
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e127      	b.n	80038a4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003660:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <UART_SetConfig+0x364>)
 8003662:	0052      	lsls	r2, r2, #1
 8003664:	5ad3      	ldrh	r3, [r2, r3]
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	69b8      	ldr	r0, [r7, #24]
 8003672:	69f9      	ldr	r1, [r7, #28]
 8003674:	f7fc fece 	bl	8000414 <__aeabi_uldivmod>
 8003678:	0002      	movs	r2, r0
 800367a:	000b      	movs	r3, r1
 800367c:	0e11      	lsrs	r1, r2, #24
 800367e:	021d      	lsls	r5, r3, #8
 8003680:	430d      	orrs	r5, r1
 8003682:	0214      	lsls	r4, r2, #8
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68b8      	ldr	r0, [r7, #8]
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	1900      	adds	r0, r0, r4
 8003696:	4169      	adcs	r1, r5
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f7fc feb5 	bl	8000414 <__aeabi_uldivmod>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0013      	movs	r3, r2
 80036b0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b4:	23c0      	movs	r3, #192	; 0xc0
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d309      	bcc.n	80036d0 <UART_SetConfig+0x2e4>
 80036bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	035b      	lsls	r3, r3, #13
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d204      	bcs.n	80036d0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	e0e9      	b.n	80038a4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80036d0:	231a      	movs	r3, #26
 80036d2:	2220      	movs	r2, #32
 80036d4:	189b      	adds	r3, r3, r2
 80036d6:	19db      	adds	r3, r3, r7
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e0e2      	b.n	80038a4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d000      	beq.n	80036ec <UART_SetConfig+0x300>
 80036ea:	e083      	b.n	80037f4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80036ec:	231b      	movs	r3, #27
 80036ee:	2220      	movs	r2, #32
 80036f0:	189b      	adds	r3, r3, r2
 80036f2:	19db      	adds	r3, r3, r7
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d015      	beq.n	8003726 <UART_SetConfig+0x33a>
 80036fa:	dc2b      	bgt.n	8003754 <UART_SetConfig+0x368>
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d00d      	beq.n	800371c <UART_SetConfig+0x330>
 8003700:	dc28      	bgt.n	8003754 <UART_SetConfig+0x368>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <UART_SetConfig+0x320>
 8003706:	2b02      	cmp	r3, #2
 8003708:	d005      	beq.n	8003716 <UART_SetConfig+0x32a>
 800370a:	e023      	b.n	8003754 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800370c:	f7fe fe40 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003710:	0003      	movs	r3, r0
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003714:	e027      	b.n	8003766 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <UART_SetConfig+0x360>)
 8003718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800371a:	e024      	b.n	8003766 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371c:	f7fe fdac 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8003720:	0003      	movs	r3, r0
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003724:	e01f      	b.n	8003766 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800372c:	e01b      	b.n	8003766 <UART_SetConfig+0x37a>
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	cfff69f3 	.word	0xcfff69f3
 8003734:	ffffcfff 	.word	0xffffcfff
 8003738:	40008000 	.word	0x40008000
 800373c:	11fff4ff 	.word	0x11fff4ff
 8003740:	40013800 	.word	0x40013800
 8003744:	40021000 	.word	0x40021000
 8003748:	40004400 	.word	0x40004400
 800374c:	00f42400 	.word	0x00f42400
 8003750:	080056d8 	.word	0x080056d8
      default:
        pclk = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003758:	231a      	movs	r3, #26
 800375a:	2220      	movs	r2, #32
 800375c:	189b      	adds	r3, r3, r2
 800375e:	19db      	adds	r3, r3, r7
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
        break;
 8003764:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	2b00      	cmp	r3, #0
 800376a:	d100      	bne.n	800376e <UART_SetConfig+0x382>
 800376c:	e09a      	b.n	80038a4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003772:	4b58      	ldr	r3, [pc, #352]	; (80038d4 <UART_SetConfig+0x4e8>)
 8003774:	0052      	lsls	r2, r2, #1
 8003776:	5ad3      	ldrh	r3, [r2, r3]
 8003778:	0019      	movs	r1, r3
 800377a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800377c:	f7fc fcd4 	bl	8000128 <__udivsi3>
 8003780:	0003      	movs	r3, r0
 8003782:	005a      	lsls	r2, r3, #1
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	18d2      	adds	r2, r2, r3
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	0019      	movs	r1, r3
 8003792:	0010      	movs	r0, r2
 8003794:	f7fc fcc8 	bl	8000128 <__udivsi3>
 8003798:	0003      	movs	r3, r0
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	2b0f      	cmp	r3, #15
 80037a0:	d921      	bls.n	80037e6 <UART_SetConfig+0x3fa>
 80037a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	025b      	lsls	r3, r3, #9
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d21c      	bcs.n	80037e6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	200e      	movs	r0, #14
 80037b2:	2420      	movs	r4, #32
 80037b4:	1903      	adds	r3, r0, r4
 80037b6:	19db      	adds	r3, r3, r7
 80037b8:	210f      	movs	r1, #15
 80037ba:	438a      	bics	r2, r1
 80037bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2207      	movs	r2, #7
 80037c6:	4013      	ands	r3, r2
 80037c8:	b299      	uxth	r1, r3
 80037ca:	1903      	adds	r3, r0, r4
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	1902      	adds	r2, r0, r4
 80037d0:	19d2      	adds	r2, r2, r7
 80037d2:	8812      	ldrh	r2, [r2, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	1902      	adds	r2, r0, r4
 80037de:	19d2      	adds	r2, r2, r7
 80037e0:	8812      	ldrh	r2, [r2, #0]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	e05e      	b.n	80038a4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80037e6:	231a      	movs	r3, #26
 80037e8:	2220      	movs	r2, #32
 80037ea:	189b      	adds	r3, r3, r2
 80037ec:	19db      	adds	r3, r3, r7
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e057      	b.n	80038a4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f4:	231b      	movs	r3, #27
 80037f6:	2220      	movs	r2, #32
 80037f8:	189b      	adds	r3, r3, r2
 80037fa:	19db      	adds	r3, r3, r7
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d015      	beq.n	800382e <UART_SetConfig+0x442>
 8003802:	dc18      	bgt.n	8003836 <UART_SetConfig+0x44a>
 8003804:	2b04      	cmp	r3, #4
 8003806:	d00d      	beq.n	8003824 <UART_SetConfig+0x438>
 8003808:	dc15      	bgt.n	8003836 <UART_SetConfig+0x44a>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <UART_SetConfig+0x428>
 800380e:	2b02      	cmp	r3, #2
 8003810:	d005      	beq.n	800381e <UART_SetConfig+0x432>
 8003812:	e010      	b.n	8003836 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003814:	f7fe fdbc 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003818:	0003      	movs	r3, r0
 800381a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800381c:	e014      	b.n	8003848 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800381e:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <UART_SetConfig+0x4ec>)
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003822:	e011      	b.n	8003848 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003824:	f7fe fd28 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8003828:	0003      	movs	r3, r0
 800382a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800382c:	e00c      	b.n	8003848 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003834:	e008      	b.n	8003848 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800383a:	231a      	movs	r3, #26
 800383c:	2220      	movs	r2, #32
 800383e:	189b      	adds	r3, r3, r2
 8003840:	19db      	adds	r3, r3, r7
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
        break;
 8003846:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	2b00      	cmp	r3, #0
 800384c:	d02a      	beq.n	80038a4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <UART_SetConfig+0x4e8>)
 8003854:	0052      	lsls	r2, r2, #1
 8003856:	5ad3      	ldrh	r3, [r2, r3]
 8003858:	0019      	movs	r1, r3
 800385a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800385c:	f7fc fc64 	bl	8000128 <__udivsi3>
 8003860:	0003      	movs	r3, r0
 8003862:	001a      	movs	r2, r3
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	18d2      	adds	r2, r2, r3
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0019      	movs	r1, r3
 8003872:	0010      	movs	r0, r2
 8003874:	f7fc fc58 	bl	8000128 <__udivsi3>
 8003878:	0003      	movs	r3, r0
 800387a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	2b0f      	cmp	r3, #15
 8003880:	d90a      	bls.n	8003898 <UART_SetConfig+0x4ac>
 8003882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	025b      	lsls	r3, r3, #9
 8003888:	429a      	cmp	r2, r3
 800388a:	d205      	bcs.n	8003898 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	b29a      	uxth	r2, r3
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	e005      	b.n	80038a4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003898:	231a      	movs	r3, #26
 800389a:	2220      	movs	r2, #32
 800389c:	189b      	adds	r3, r3, r2
 800389e:	19db      	adds	r3, r3, r7
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	226a      	movs	r2, #106	; 0x6a
 80038a8:	2101      	movs	r1, #1
 80038aa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	2268      	movs	r2, #104	; 0x68
 80038b0:	2101      	movs	r1, #1
 80038b2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	2200      	movs	r2, #0
 80038b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	2200      	movs	r2, #0
 80038be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80038c0:	231a      	movs	r3, #26
 80038c2:	2220      	movs	r2, #32
 80038c4:	189b      	adds	r3, r3, r2
 80038c6:	19db      	adds	r3, r3, r7
 80038c8:	781b      	ldrb	r3, [r3, #0]
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b010      	add	sp, #64	; 0x40
 80038d0:	bdb0      	pop	{r4, r5, r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	080056d8 	.word	0x080056d8
 80038d8:	00f42400 	.word	0x00f42400

080038dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	2201      	movs	r2, #1
 80038ea:	4013      	ands	r3, r2
 80038ec:	d00b      	beq.n	8003906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a4a      	ldr	r2, [pc, #296]	; (8003a20 <UART_AdvFeatureConfig+0x144>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2202      	movs	r2, #2
 800390c:	4013      	ands	r3, r2
 800390e:	d00b      	beq.n	8003928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a43      	ldr	r2, [pc, #268]	; (8003a24 <UART_AdvFeatureConfig+0x148>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	2204      	movs	r2, #4
 800392e:	4013      	ands	r3, r2
 8003930:	d00b      	beq.n	800394a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a3b      	ldr	r2, [pc, #236]	; (8003a28 <UART_AdvFeatureConfig+0x14c>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	2208      	movs	r2, #8
 8003950:	4013      	ands	r3, r2
 8003952:	d00b      	beq.n	800396c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4a34      	ldr	r2, [pc, #208]	; (8003a2c <UART_AdvFeatureConfig+0x150>)
 800395c:	4013      	ands	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	2210      	movs	r2, #16
 8003972:	4013      	ands	r3, r2
 8003974:	d00b      	beq.n	800398e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <UART_AdvFeatureConfig+0x154>)
 800397e:	4013      	ands	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2220      	movs	r2, #32
 8003994:	4013      	ands	r3, r2
 8003996:	d00b      	beq.n	80039b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	4a25      	ldr	r2, [pc, #148]	; (8003a34 <UART_AdvFeatureConfig+0x158>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	4013      	ands	r3, r2
 80039b8:	d01d      	beq.n	80039f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <UART_AdvFeatureConfig+0x15c>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	035b      	lsls	r3, r3, #13
 80039da:	429a      	cmp	r2, r3
 80039dc:	d10b      	bne.n	80039f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <UART_AdvFeatureConfig+0x160>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	2280      	movs	r2, #128	; 0x80
 80039fc:	4013      	ands	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <UART_AdvFeatureConfig+0x164>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	fffdffff 	.word	0xfffdffff
 8003a24:	fffeffff 	.word	0xfffeffff
 8003a28:	fffbffff 	.word	0xfffbffff
 8003a2c:	ffff7fff 	.word	0xffff7fff
 8003a30:	ffffefff 	.word	0xffffefff
 8003a34:	ffffdfff 	.word	0xffffdfff
 8003a38:	ffefffff 	.word	0xffefffff
 8003a3c:	ff9fffff 	.word	0xff9fffff
 8003a40:	fff7ffff 	.word	0xfff7ffff

08003a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2290      	movs	r2, #144	; 0x90
 8003a50:	2100      	movs	r1, #0
 8003a52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a54:	f7fd fd2a 	bl	80014ac <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2208      	movs	r2, #8
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d10c      	bne.n	8003a84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2280      	movs	r2, #128	; 0x80
 8003a6e:	0391      	lsls	r1, r2, #14
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <UART_CheckIdleState+0x98>)
 8003a74:	9200      	str	r2, [sp, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f000 f832 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d001      	beq.n	8003a84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e026      	b.n	8003ad2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d10c      	bne.n	8003aac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	03d1      	lsls	r1, r2, #15
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4a10      	ldr	r2, [pc, #64]	; (8003adc <UART_CheckIdleState+0x98>)
 8003a9c:	9200      	str	r2, [sp, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f000 f81e 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003aa4:	1e03      	subs	r3, r0, #0
 8003aa6:	d001      	beq.n	8003aac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e012      	b.n	8003ad2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2288      	movs	r2, #136	; 0x88
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	228c      	movs	r2, #140	; 0x8c
 8003ab8:	2120      	movs	r1, #32
 8003aba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2284      	movs	r2, #132	; 0x84
 8003acc:	2100      	movs	r1, #0
 8003ace:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	01ffffff 	.word	0x01ffffff

08003ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b094      	sub	sp, #80	; 0x50
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	1dfb      	adds	r3, r7, #7
 8003aee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af0:	e0a7      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003af4:	3301      	adds	r3, #1
 8003af6:	d100      	bne.n	8003afa <UART_WaitOnFlagUntilTimeout+0x1a>
 8003af8:	e0a3      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fd fcd7 	bl	80014ac <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d13f      	bne.n	8003b90 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b10:	f3ef 8310 	mrs	r3, PRIMASK
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b18:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	f383 8810 	msr	PRIMASK, r3
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	494e      	ldr	r1, [pc, #312]	; (8003c6c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	f383 8810 	msr	PRIMASK, r3
}
 8003b40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b42:	f3ef 8310 	mrs	r3, PRIMASK
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	f383 8810 	msr	PRIMASK, r3
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2101      	movs	r1, #1
 8003b64:	438a      	bics	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6e:	f383 8810 	msr	PRIMASK, r3
}
 8003b72:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2288      	movs	r2, #136	; 0x88
 8003b78:	2120      	movs	r1, #32
 8003b7a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	228c      	movs	r2, #140	; 0x8c
 8003b80:	2120      	movs	r1, #32
 8003b82:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2284      	movs	r2, #132	; 0x84
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e069      	b.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2204      	movs	r2, #4
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d052      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d148      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bba:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbe:	613b      	str	r3, [r7, #16]
  return(result);
 8003bc0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f383 8810 	msr	PRIMASK, r3
}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4924      	ldr	r1, [pc, #144]	; (8003c6c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bec:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f383 8810 	msr	PRIMASK, r3
}
 8003c00:	46c0      	nop			; (mov r8, r8)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	438a      	bics	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	f383 8810 	msr	PRIMASK, r3
}
 8003c1c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2288      	movs	r2, #136	; 0x88
 8003c22:	2120      	movs	r1, #32
 8003c24:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	228c      	movs	r2, #140	; 0x8c
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2290      	movs	r2, #144	; 0x90
 8003c32:	2120      	movs	r1, #32
 8003c34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2284      	movs	r2, #132	; 0x84
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e010      	b.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	425a      	negs	r2, r3
 8003c52:	4153      	adcs	r3, r2
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	001a      	movs	r2, r3
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d100      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x182>
 8003c60:	e747      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b014      	add	sp, #80	; 0x50
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	fffffe5f 	.word	0xfffffe5f

08003c70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2284      	movs	r2, #132	; 0x84
 8003c7c:	5c9b      	ldrb	r3, [r3, r2]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e027      	b.n	8003cd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2284      	movs	r2, #132	; 0x84
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2288      	movs	r2, #136	; 0x88
 8003c92:	2124      	movs	r1, #36	; 0x24
 8003c94:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2101      	movs	r1, #1
 8003caa:	438a      	bics	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2288      	movs	r2, #136	; 0x88
 8003cc8:	2120      	movs	r1, #32
 8003cca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2284      	movs	r2, #132	; 0x84
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	dfffffff 	.word	0xdfffffff

08003ce4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2284      	movs	r2, #132	; 0x84
 8003cf2:	5c9b      	ldrb	r3, [r3, r2]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e02e      	b.n	8003d5a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2284      	movs	r2, #132	; 0x84
 8003d00:	2101      	movs	r1, #1
 8003d02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2288      	movs	r2, #136	; 0x88
 8003d08:	2124      	movs	r1, #36	; 0x24
 8003d0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	438a      	bics	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	08d9      	lsrs	r1, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 f854 	bl	8003de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2288      	movs	r2, #136	; 0x88
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2284      	movs	r2, #132	; 0x84
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2284      	movs	r2, #132	; 0x84
 8003d72:	5c9b      	ldrb	r3, [r3, r2]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e02f      	b.n	8003ddc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2284      	movs	r2, #132	; 0x84
 8003d80:	2101      	movs	r1, #1
 8003d82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2288      	movs	r2, #136	; 0x88
 8003d88:	2124      	movs	r1, #36	; 0x24
 8003d8a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2101      	movs	r1, #1
 8003da0:	438a      	bics	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f000 f813 	bl	8003de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2288      	movs	r2, #136	; 0x88
 8003dce:	2120      	movs	r1, #32
 8003dd0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2284      	movs	r2, #132	; 0x84
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	f1ffffff 	.word	0xf1ffffff

08003de8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d108      	bne.n	8003e0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	226a      	movs	r2, #106	; 0x6a
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2268      	movs	r2, #104	; 0x68
 8003e04:	2101      	movs	r1, #1
 8003e06:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e08:	e043      	b.n	8003e92 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e0a:	260f      	movs	r6, #15
 8003e0c:	19bb      	adds	r3, r7, r6
 8003e0e:	2208      	movs	r2, #8
 8003e10:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e12:	200e      	movs	r0, #14
 8003e14:	183b      	adds	r3, r7, r0
 8003e16:	2208      	movs	r2, #8
 8003e18:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	0e5b      	lsrs	r3, r3, #25
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	240d      	movs	r4, #13
 8003e26:	193b      	adds	r3, r7, r4
 8003e28:	2107      	movs	r1, #7
 8003e2a:	400a      	ands	r2, r1
 8003e2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	0f5b      	lsrs	r3, r3, #29
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	250c      	movs	r5, #12
 8003e3a:	197b      	adds	r3, r7, r5
 8003e3c:	2107      	movs	r1, #7
 8003e3e:	400a      	ands	r2, r1
 8003e40:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e42:	183b      	adds	r3, r7, r0
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	197a      	adds	r2, r7, r5
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	4914      	ldr	r1, [pc, #80]	; (8003e9c <UARTEx_SetNbDataToProcess+0xb4>)
 8003e4c:	5c8a      	ldrb	r2, [r1, r2]
 8003e4e:	435a      	muls	r2, r3
 8003e50:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e52:	197b      	adds	r3, r7, r5
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	f7fc f9ee 	bl	800023c <__divsi3>
 8003e60:	0003      	movs	r3, r0
 8003e62:	b299      	uxth	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	226a      	movs	r2, #106	; 0x6a
 8003e68:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e6a:	19bb      	adds	r3, r7, r6
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	193a      	adds	r2, r7, r4
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	490a      	ldr	r1, [pc, #40]	; (8003e9c <UARTEx_SetNbDataToProcess+0xb4>)
 8003e74:	5c8a      	ldrb	r2, [r1, r2]
 8003e76:	435a      	muls	r2, r3
 8003e78:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e7a:	193b      	adds	r3, r7, r4
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e80:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e82:	0019      	movs	r1, r3
 8003e84:	f7fc f9da 	bl	800023c <__divsi3>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	b299      	uxth	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2268      	movs	r2, #104	; 0x68
 8003e90:	5299      	strh	r1, [r3, r2]
}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b005      	add	sp, #20
 8003e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	080056f0 	.word	0x080056f0
 8003ea0:	080056f8 	.word	0x080056f8

08003ea4 <__errno>:
 8003ea4:	4b01      	ldr	r3, [pc, #4]	; (8003eac <__errno+0x8>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	4770      	bx	lr
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	20000090 	.word	0x20000090

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	4d0c      	ldr	r5, [pc, #48]	; (8003ee8 <__libc_init_array+0x38>)
 8003eb6:	4c0d      	ldr	r4, [pc, #52]	; (8003eec <__libc_init_array+0x3c>)
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	42a6      	cmp	r6, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	2600      	movs	r6, #0
 8003ec2:	f001 fae9 	bl	8005498 <_init>
 8003ec6:	4d0a      	ldr	r5, [pc, #40]	; (8003ef0 <__libc_init_array+0x40>)
 8003ec8:	4c0a      	ldr	r4, [pc, #40]	; (8003ef4 <__libc_init_array+0x44>)
 8003eca:	1b64      	subs	r4, r4, r5
 8003ecc:	10a4      	asrs	r4, r4, #2
 8003ece:	42a6      	cmp	r6, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	00b3      	lsls	r3, r6, #2
 8003ed6:	58eb      	ldr	r3, [r5, r3]
 8003ed8:	4798      	blx	r3
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	00b3      	lsls	r3, r6, #2
 8003ee0:	58eb      	ldr	r3, [r5, r3]
 8003ee2:	4798      	blx	r3
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	08005850 	.word	0x08005850
 8003eec:	08005850 	.word	0x08005850
 8003ef0:	08005850 	.word	0x08005850
 8003ef4:	08005854 	.word	0x08005854

08003ef8 <memset>:
 8003ef8:	0003      	movs	r3, r0
 8003efa:	1882      	adds	r2, r0, r2
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d100      	bne.n	8003f02 <memset+0xa>
 8003f00:	4770      	bx	lr
 8003f02:	7019      	strb	r1, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	e7f9      	b.n	8003efc <memset+0x4>

08003f08 <sniprintf>:
 8003f08:	b40c      	push	{r2, r3}
 8003f0a:	b530      	push	{r4, r5, lr}
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <sniprintf+0x64>)
 8003f0e:	000c      	movs	r4, r1
 8003f10:	681d      	ldr	r5, [r3, #0]
 8003f12:	b09d      	sub	sp, #116	; 0x74
 8003f14:	2900      	cmp	r1, #0
 8003f16:	da08      	bge.n	8003f2a <sniprintf+0x22>
 8003f18:	238b      	movs	r3, #139	; 0x8b
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	602b      	str	r3, [r5, #0]
 8003f1e:	4240      	negs	r0, r0
 8003f20:	b01d      	add	sp, #116	; 0x74
 8003f22:	bc30      	pop	{r4, r5}
 8003f24:	bc08      	pop	{r3}
 8003f26:	b002      	add	sp, #8
 8003f28:	4718      	bx	r3
 8003f2a:	2382      	movs	r3, #130	; 0x82
 8003f2c:	466a      	mov	r2, sp
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	8293      	strh	r3, [r2, #20]
 8003f32:	2300      	movs	r3, #0
 8003f34:	9002      	str	r0, [sp, #8]
 8003f36:	9006      	str	r0, [sp, #24]
 8003f38:	4299      	cmp	r1, r3
 8003f3a:	d000      	beq.n	8003f3e <sniprintf+0x36>
 8003f3c:	1e4b      	subs	r3, r1, #1
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	9307      	str	r3, [sp, #28]
 8003f42:	2301      	movs	r3, #1
 8003f44:	466a      	mov	r2, sp
 8003f46:	425b      	negs	r3, r3
 8003f48:	82d3      	strh	r3, [r2, #22]
 8003f4a:	0028      	movs	r0, r5
 8003f4c:	ab21      	add	r3, sp, #132	; 0x84
 8003f4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f50:	a902      	add	r1, sp, #8
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	f000 fa1e 	bl	8004394 <_svfiprintf_r>
 8003f58:	1c43      	adds	r3, r0, #1
 8003f5a:	da01      	bge.n	8003f60 <sniprintf+0x58>
 8003f5c:	238b      	movs	r3, #139	; 0x8b
 8003f5e:	602b      	str	r3, [r5, #0]
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d0dd      	beq.n	8003f20 <sniprintf+0x18>
 8003f64:	2300      	movs	r3, #0
 8003f66:	9a02      	ldr	r2, [sp, #8]
 8003f68:	7013      	strb	r3, [r2, #0]
 8003f6a:	e7d9      	b.n	8003f20 <sniprintf+0x18>
 8003f6c:	20000090 	.word	0x20000090

08003f70 <siprintf>:
 8003f70:	b40e      	push	{r1, r2, r3}
 8003f72:	b500      	push	{lr}
 8003f74:	490b      	ldr	r1, [pc, #44]	; (8003fa4 <siprintf+0x34>)
 8003f76:	b09c      	sub	sp, #112	; 0x70
 8003f78:	ab1d      	add	r3, sp, #116	; 0x74
 8003f7a:	9002      	str	r0, [sp, #8]
 8003f7c:	9006      	str	r0, [sp, #24]
 8003f7e:	9107      	str	r1, [sp, #28]
 8003f80:	9104      	str	r1, [sp, #16]
 8003f82:	4809      	ldr	r0, [pc, #36]	; (8003fa8 <siprintf+0x38>)
 8003f84:	4909      	ldr	r1, [pc, #36]	; (8003fac <siprintf+0x3c>)
 8003f86:	cb04      	ldmia	r3!, {r2}
 8003f88:	9105      	str	r1, [sp, #20]
 8003f8a:	6800      	ldr	r0, [r0, #0]
 8003f8c:	a902      	add	r1, sp, #8
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	f000 fa00 	bl	8004394 <_svfiprintf_r>
 8003f94:	2300      	movs	r3, #0
 8003f96:	9a02      	ldr	r2, [sp, #8]
 8003f98:	7013      	strb	r3, [r2, #0]
 8003f9a:	b01c      	add	sp, #112	; 0x70
 8003f9c:	bc08      	pop	{r3}
 8003f9e:	b003      	add	sp, #12
 8003fa0:	4718      	bx	r3
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	7fffffff 	.word	0x7fffffff
 8003fa8:	20000090 	.word	0x20000090
 8003fac:	ffff0208 	.word	0xffff0208

08003fb0 <strncmp>:
 8003fb0:	b530      	push	{r4, r5, lr}
 8003fb2:	0005      	movs	r5, r0
 8003fb4:	1e10      	subs	r0, r2, #0
 8003fb6:	d008      	beq.n	8003fca <strncmp+0x1a>
 8003fb8:	2400      	movs	r4, #0
 8003fba:	3a01      	subs	r2, #1
 8003fbc:	5d2b      	ldrb	r3, [r5, r4]
 8003fbe:	5d08      	ldrb	r0, [r1, r4]
 8003fc0:	4283      	cmp	r3, r0
 8003fc2:	d101      	bne.n	8003fc8 <strncmp+0x18>
 8003fc4:	4294      	cmp	r4, r2
 8003fc6:	d101      	bne.n	8003fcc <strncmp+0x1c>
 8003fc8:	1a18      	subs	r0, r3, r0
 8003fca:	bd30      	pop	{r4, r5, pc}
 8003fcc:	3401      	adds	r4, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f4      	bne.n	8003fbc <strncmp+0xc>
 8003fd2:	e7f9      	b.n	8003fc8 <strncmp+0x18>

08003fd4 <strtok>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	4b16      	ldr	r3, [pc, #88]	; (8004030 <strtok+0x5c>)
 8003fd8:	0005      	movs	r5, r0
 8003fda:	681f      	ldr	r7, [r3, #0]
 8003fdc:	000e      	movs	r6, r1
 8003fde:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003fe0:	2c00      	cmp	r4, #0
 8003fe2:	d11d      	bne.n	8004020 <strtok+0x4c>
 8003fe4:	2050      	movs	r0, #80	; 0x50
 8003fe6:	f000 f887 	bl	80040f8 <malloc>
 8003fea:	1e02      	subs	r2, r0, #0
 8003fec:	65b8      	str	r0, [r7, #88]	; 0x58
 8003fee:	d104      	bne.n	8003ffa <strtok+0x26>
 8003ff0:	2157      	movs	r1, #87	; 0x57
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <strtok+0x60>)
 8003ff4:	4810      	ldr	r0, [pc, #64]	; (8004038 <strtok+0x64>)
 8003ff6:	f000 f851 	bl	800409c <__assert_func>
 8003ffa:	6004      	str	r4, [r0, #0]
 8003ffc:	6044      	str	r4, [r0, #4]
 8003ffe:	6084      	str	r4, [r0, #8]
 8004000:	60c4      	str	r4, [r0, #12]
 8004002:	6104      	str	r4, [r0, #16]
 8004004:	6144      	str	r4, [r0, #20]
 8004006:	6184      	str	r4, [r0, #24]
 8004008:	6284      	str	r4, [r0, #40]	; 0x28
 800400a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800400c:	6304      	str	r4, [r0, #48]	; 0x30
 800400e:	6344      	str	r4, [r0, #52]	; 0x34
 8004010:	6384      	str	r4, [r0, #56]	; 0x38
 8004012:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004014:	6404      	str	r4, [r0, #64]	; 0x40
 8004016:	6444      	str	r4, [r0, #68]	; 0x44
 8004018:	6484      	str	r4, [r0, #72]	; 0x48
 800401a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800401c:	7704      	strb	r4, [r0, #28]
 800401e:	6244      	str	r4, [r0, #36]	; 0x24
 8004020:	0031      	movs	r1, r6
 8004022:	0028      	movs	r0, r5
 8004024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004026:	2301      	movs	r3, #1
 8004028:	f000 f808 	bl	800403c <__strtok_r>
 800402c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	20000090 	.word	0x20000090
 8004034:	08005704 	.word	0x08005704
 8004038:	0800571b 	.word	0x0800571b

0800403c <__strtok_r>:
 800403c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403e:	2800      	cmp	r0, #0
 8004040:	d102      	bne.n	8004048 <__strtok_r+0xc>
 8004042:	6810      	ldr	r0, [r2, #0]
 8004044:	2800      	cmp	r0, #0
 8004046:	d013      	beq.n	8004070 <__strtok_r+0x34>
 8004048:	0004      	movs	r4, r0
 800404a:	0020      	movs	r0, r4
 800404c:	000e      	movs	r6, r1
 800404e:	7805      	ldrb	r5, [r0, #0]
 8004050:	3401      	adds	r4, #1
 8004052:	7837      	ldrb	r7, [r6, #0]
 8004054:	2f00      	cmp	r7, #0
 8004056:	d104      	bne.n	8004062 <__strtok_r+0x26>
 8004058:	2d00      	cmp	r5, #0
 800405a:	d10f      	bne.n	800407c <__strtok_r+0x40>
 800405c:	0028      	movs	r0, r5
 800405e:	6015      	str	r5, [r2, #0]
 8004060:	e006      	b.n	8004070 <__strtok_r+0x34>
 8004062:	3601      	adds	r6, #1
 8004064:	42bd      	cmp	r5, r7
 8004066:	d1f4      	bne.n	8004052 <__strtok_r+0x16>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1ee      	bne.n	800404a <__strtok_r+0xe>
 800406c:	6014      	str	r4, [r2, #0]
 800406e:	7003      	strb	r3, [r0, #0]
 8004070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004072:	002f      	movs	r7, r5
 8004074:	e00f      	b.n	8004096 <__strtok_r+0x5a>
 8004076:	3301      	adds	r3, #1
 8004078:	2e00      	cmp	r6, #0
 800407a:	d104      	bne.n	8004086 <__strtok_r+0x4a>
 800407c:	0023      	movs	r3, r4
 800407e:	3401      	adds	r4, #1
 8004080:	781d      	ldrb	r5, [r3, #0]
 8004082:	0027      	movs	r7, r4
 8004084:	000b      	movs	r3, r1
 8004086:	781e      	ldrb	r6, [r3, #0]
 8004088:	42b5      	cmp	r5, r6
 800408a:	d1f4      	bne.n	8004076 <__strtok_r+0x3a>
 800408c:	2d00      	cmp	r5, #0
 800408e:	d0f0      	beq.n	8004072 <__strtok_r+0x36>
 8004090:	2300      	movs	r3, #0
 8004092:	3c01      	subs	r4, #1
 8004094:	7023      	strb	r3, [r4, #0]
 8004096:	6017      	str	r7, [r2, #0]
 8004098:	e7ea      	b.n	8004070 <__strtok_r+0x34>
	...

0800409c <__assert_func>:
 800409c:	b530      	push	{r4, r5, lr}
 800409e:	0014      	movs	r4, r2
 80040a0:	001a      	movs	r2, r3
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <__assert_func+0x2c>)
 80040a4:	0005      	movs	r5, r0
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	b085      	sub	sp, #20
 80040aa:	68d8      	ldr	r0, [r3, #12]
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <__assert_func+0x30>)
 80040ae:	2c00      	cmp	r4, #0
 80040b0:	d101      	bne.n	80040b6 <__assert_func+0x1a>
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <__assert_func+0x34>)
 80040b4:	001c      	movs	r4, r3
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	9100      	str	r1, [sp, #0]
 80040ba:	002b      	movs	r3, r5
 80040bc:	4905      	ldr	r1, [pc, #20]	; (80040d4 <__assert_func+0x38>)
 80040be:	9402      	str	r4, [sp, #8]
 80040c0:	f000 f80a 	bl	80040d8 <fiprintf>
 80040c4:	f000 fe2a 	bl	8004d1c <abort>
 80040c8:	20000090 	.word	0x20000090
 80040cc:	08005778 	.word	0x08005778
 80040d0:	080057b3 	.word	0x080057b3
 80040d4:	08005785 	.word	0x08005785

080040d8 <fiprintf>:
 80040d8:	b40e      	push	{r1, r2, r3}
 80040da:	b503      	push	{r0, r1, lr}
 80040dc:	0001      	movs	r1, r0
 80040de:	ab03      	add	r3, sp, #12
 80040e0:	4804      	ldr	r0, [pc, #16]	; (80040f4 <fiprintf+0x1c>)
 80040e2:	cb04      	ldmia	r3!, {r2}
 80040e4:	6800      	ldr	r0, [r0, #0]
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	f000 fa7c 	bl	80045e4 <_vfiprintf_r>
 80040ec:	b002      	add	sp, #8
 80040ee:	bc08      	pop	{r3}
 80040f0:	b003      	add	sp, #12
 80040f2:	4718      	bx	r3
 80040f4:	20000090 	.word	0x20000090

080040f8 <malloc>:
 80040f8:	b510      	push	{r4, lr}
 80040fa:	4b03      	ldr	r3, [pc, #12]	; (8004108 <malloc+0x10>)
 80040fc:	0001      	movs	r1, r0
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	f000 f870 	bl	80041e4 <_malloc_r>
 8004104:	bd10      	pop	{r4, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	20000090 	.word	0x20000090

0800410c <_free_r>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	0005      	movs	r5, r0
 8004110:	2900      	cmp	r1, #0
 8004112:	d010      	beq.n	8004136 <_free_r+0x2a>
 8004114:	1f0c      	subs	r4, r1, #4
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	da00      	bge.n	800411e <_free_r+0x12>
 800411c:	18e4      	adds	r4, r4, r3
 800411e:	0028      	movs	r0, r5
 8004120:	f001 f86a 	bl	80051f8 <__malloc_lock>
 8004124:	4a1d      	ldr	r2, [pc, #116]	; (800419c <_free_r+0x90>)
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <_free_r+0x2c>
 800412c:	6063      	str	r3, [r4, #4]
 800412e:	6014      	str	r4, [r2, #0]
 8004130:	0028      	movs	r0, r5
 8004132:	f001 f869 	bl	8005208 <__malloc_unlock>
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	42a3      	cmp	r3, r4
 800413a:	d908      	bls.n	800414e <_free_r+0x42>
 800413c:	6821      	ldr	r1, [r4, #0]
 800413e:	1860      	adds	r0, r4, r1
 8004140:	4283      	cmp	r3, r0
 8004142:	d1f3      	bne.n	800412c <_free_r+0x20>
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	1841      	adds	r1, r0, r1
 800414a:	6021      	str	r1, [r4, #0]
 800414c:	e7ee      	b.n	800412c <_free_r+0x20>
 800414e:	001a      	movs	r2, r3
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <_free_r+0x4e>
 8004156:	42a3      	cmp	r3, r4
 8004158:	d9f9      	bls.n	800414e <_free_r+0x42>
 800415a:	6811      	ldr	r1, [r2, #0]
 800415c:	1850      	adds	r0, r2, r1
 800415e:	42a0      	cmp	r0, r4
 8004160:	d10b      	bne.n	800417a <_free_r+0x6e>
 8004162:	6820      	ldr	r0, [r4, #0]
 8004164:	1809      	adds	r1, r1, r0
 8004166:	1850      	adds	r0, r2, r1
 8004168:	6011      	str	r1, [r2, #0]
 800416a:	4283      	cmp	r3, r0
 800416c:	d1e0      	bne.n	8004130 <_free_r+0x24>
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	1841      	adds	r1, r0, r1
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	6053      	str	r3, [r2, #4]
 8004178:	e7da      	b.n	8004130 <_free_r+0x24>
 800417a:	42a0      	cmp	r0, r4
 800417c:	d902      	bls.n	8004184 <_free_r+0x78>
 800417e:	230c      	movs	r3, #12
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	e7d5      	b.n	8004130 <_free_r+0x24>
 8004184:	6821      	ldr	r1, [r4, #0]
 8004186:	1860      	adds	r0, r4, r1
 8004188:	4283      	cmp	r3, r0
 800418a:	d103      	bne.n	8004194 <_free_r+0x88>
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	1841      	adds	r1, r0, r1
 8004192:	6021      	str	r1, [r4, #0]
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	6054      	str	r4, [r2, #4]
 8004198:	e7ca      	b.n	8004130 <_free_r+0x24>
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	200004c4 	.word	0x200004c4

080041a0 <sbrk_aligned>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4e0f      	ldr	r6, [pc, #60]	; (80041e0 <sbrk_aligned+0x40>)
 80041a4:	000d      	movs	r5, r1
 80041a6:	6831      	ldr	r1, [r6, #0]
 80041a8:	0004      	movs	r4, r0
 80041aa:	2900      	cmp	r1, #0
 80041ac:	d102      	bne.n	80041b4 <sbrk_aligned+0x14>
 80041ae:	f000 fcd5 	bl	8004b5c <_sbrk_r>
 80041b2:	6030      	str	r0, [r6, #0]
 80041b4:	0029      	movs	r1, r5
 80041b6:	0020      	movs	r0, r4
 80041b8:	f000 fcd0 	bl	8004b5c <_sbrk_r>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d00a      	beq.n	80041d6 <sbrk_aligned+0x36>
 80041c0:	2303      	movs	r3, #3
 80041c2:	1cc5      	adds	r5, r0, #3
 80041c4:	439d      	bics	r5, r3
 80041c6:	42a8      	cmp	r0, r5
 80041c8:	d007      	beq.n	80041da <sbrk_aligned+0x3a>
 80041ca:	1a29      	subs	r1, r5, r0
 80041cc:	0020      	movs	r0, r4
 80041ce:	f000 fcc5 	bl	8004b5c <_sbrk_r>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	d101      	bne.n	80041da <sbrk_aligned+0x3a>
 80041d6:	2501      	movs	r5, #1
 80041d8:	426d      	negs	r5, r5
 80041da:	0028      	movs	r0, r5
 80041dc:	bd70      	pop	{r4, r5, r6, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	200004c8 	.word	0x200004c8

080041e4 <_malloc_r>:
 80041e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041e6:	2203      	movs	r2, #3
 80041e8:	1ccb      	adds	r3, r1, #3
 80041ea:	4393      	bics	r3, r2
 80041ec:	3308      	adds	r3, #8
 80041ee:	0006      	movs	r6, r0
 80041f0:	001f      	movs	r7, r3
 80041f2:	2b0c      	cmp	r3, #12
 80041f4:	d232      	bcs.n	800425c <_malloc_r+0x78>
 80041f6:	270c      	movs	r7, #12
 80041f8:	42b9      	cmp	r1, r7
 80041fa:	d831      	bhi.n	8004260 <_malloc_r+0x7c>
 80041fc:	0030      	movs	r0, r6
 80041fe:	f000 fffb 	bl	80051f8 <__malloc_lock>
 8004202:	4d32      	ldr	r5, [pc, #200]	; (80042cc <_malloc_r+0xe8>)
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	001c      	movs	r4, r3
 8004208:	2c00      	cmp	r4, #0
 800420a:	d12e      	bne.n	800426a <_malloc_r+0x86>
 800420c:	0039      	movs	r1, r7
 800420e:	0030      	movs	r0, r6
 8004210:	f7ff ffc6 	bl	80041a0 <sbrk_aligned>
 8004214:	0004      	movs	r4, r0
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	d11e      	bne.n	8004258 <_malloc_r+0x74>
 800421a:	682c      	ldr	r4, [r5, #0]
 800421c:	0025      	movs	r5, r4
 800421e:	2d00      	cmp	r5, #0
 8004220:	d14a      	bne.n	80042b8 <_malloc_r+0xd4>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	0029      	movs	r1, r5
 8004226:	18e3      	adds	r3, r4, r3
 8004228:	0030      	movs	r0, r6
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	f000 fc96 	bl	8004b5c <_sbrk_r>
 8004230:	9b01      	ldr	r3, [sp, #4]
 8004232:	4283      	cmp	r3, r0
 8004234:	d143      	bne.n	80042be <_malloc_r+0xda>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	3703      	adds	r7, #3
 800423a:	1aff      	subs	r7, r7, r3
 800423c:	2303      	movs	r3, #3
 800423e:	439f      	bics	r7, r3
 8004240:	3708      	adds	r7, #8
 8004242:	2f0c      	cmp	r7, #12
 8004244:	d200      	bcs.n	8004248 <_malloc_r+0x64>
 8004246:	270c      	movs	r7, #12
 8004248:	0039      	movs	r1, r7
 800424a:	0030      	movs	r0, r6
 800424c:	f7ff ffa8 	bl	80041a0 <sbrk_aligned>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d034      	beq.n	80042be <_malloc_r+0xda>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	19df      	adds	r7, r3, r7
 8004258:	6027      	str	r7, [r4, #0]
 800425a:	e013      	b.n	8004284 <_malloc_r+0xa0>
 800425c:	2b00      	cmp	r3, #0
 800425e:	dacb      	bge.n	80041f8 <_malloc_r+0x14>
 8004260:	230c      	movs	r3, #12
 8004262:	2500      	movs	r5, #0
 8004264:	6033      	str	r3, [r6, #0]
 8004266:	0028      	movs	r0, r5
 8004268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	1bd1      	subs	r1, r2, r7
 800426e:	d420      	bmi.n	80042b2 <_malloc_r+0xce>
 8004270:	290b      	cmp	r1, #11
 8004272:	d917      	bls.n	80042a4 <_malloc_r+0xc0>
 8004274:	19e2      	adds	r2, r4, r7
 8004276:	6027      	str	r7, [r4, #0]
 8004278:	42a3      	cmp	r3, r4
 800427a:	d111      	bne.n	80042a0 <_malloc_r+0xbc>
 800427c:	602a      	str	r2, [r5, #0]
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	6011      	str	r1, [r2, #0]
 8004282:	6053      	str	r3, [r2, #4]
 8004284:	0030      	movs	r0, r6
 8004286:	0025      	movs	r5, r4
 8004288:	f000 ffbe 	bl	8005208 <__malloc_unlock>
 800428c:	2207      	movs	r2, #7
 800428e:	350b      	adds	r5, #11
 8004290:	1d23      	adds	r3, r4, #4
 8004292:	4395      	bics	r5, r2
 8004294:	1aea      	subs	r2, r5, r3
 8004296:	429d      	cmp	r5, r3
 8004298:	d0e5      	beq.n	8004266 <_malloc_r+0x82>
 800429a:	1b5b      	subs	r3, r3, r5
 800429c:	50a3      	str	r3, [r4, r2]
 800429e:	e7e2      	b.n	8004266 <_malloc_r+0x82>
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	e7ec      	b.n	800427e <_malloc_r+0x9a>
 80042a4:	6862      	ldr	r2, [r4, #4]
 80042a6:	42a3      	cmp	r3, r4
 80042a8:	d101      	bne.n	80042ae <_malloc_r+0xca>
 80042aa:	602a      	str	r2, [r5, #0]
 80042ac:	e7ea      	b.n	8004284 <_malloc_r+0xa0>
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	e7e8      	b.n	8004284 <_malloc_r+0xa0>
 80042b2:	0023      	movs	r3, r4
 80042b4:	6864      	ldr	r4, [r4, #4]
 80042b6:	e7a7      	b.n	8004208 <_malloc_r+0x24>
 80042b8:	002c      	movs	r4, r5
 80042ba:	686d      	ldr	r5, [r5, #4]
 80042bc:	e7af      	b.n	800421e <_malloc_r+0x3a>
 80042be:	230c      	movs	r3, #12
 80042c0:	0030      	movs	r0, r6
 80042c2:	6033      	str	r3, [r6, #0]
 80042c4:	f000 ffa0 	bl	8005208 <__malloc_unlock>
 80042c8:	e7cd      	b.n	8004266 <_malloc_r+0x82>
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	200004c4 	.word	0x200004c4

080042d0 <__ssputs_r>:
 80042d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d2:	688e      	ldr	r6, [r1, #8]
 80042d4:	b085      	sub	sp, #20
 80042d6:	0007      	movs	r7, r0
 80042d8:	000c      	movs	r4, r1
 80042da:	9203      	str	r2, [sp, #12]
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	429e      	cmp	r6, r3
 80042e0:	d83c      	bhi.n	800435c <__ssputs_r+0x8c>
 80042e2:	2390      	movs	r3, #144	; 0x90
 80042e4:	898a      	ldrh	r2, [r1, #12]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	421a      	tst	r2, r3
 80042ea:	d034      	beq.n	8004356 <__ssputs_r+0x86>
 80042ec:	6909      	ldr	r1, [r1, #16]
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	6960      	ldr	r0, [r4, #20]
 80042f2:	1a5b      	subs	r3, r3, r1
 80042f4:	9302      	str	r3, [sp, #8]
 80042f6:	2303      	movs	r3, #3
 80042f8:	4343      	muls	r3, r0
 80042fa:	0fdd      	lsrs	r5, r3, #31
 80042fc:	18ed      	adds	r5, r5, r3
 80042fe:	9b01      	ldr	r3, [sp, #4]
 8004300:	9802      	ldr	r0, [sp, #8]
 8004302:	3301      	adds	r3, #1
 8004304:	181b      	adds	r3, r3, r0
 8004306:	106d      	asrs	r5, r5, #1
 8004308:	42ab      	cmp	r3, r5
 800430a:	d900      	bls.n	800430e <__ssputs_r+0x3e>
 800430c:	001d      	movs	r5, r3
 800430e:	0553      	lsls	r3, r2, #21
 8004310:	d532      	bpl.n	8004378 <__ssputs_r+0xa8>
 8004312:	0029      	movs	r1, r5
 8004314:	0038      	movs	r0, r7
 8004316:	f7ff ff65 	bl	80041e4 <_malloc_r>
 800431a:	1e06      	subs	r6, r0, #0
 800431c:	d109      	bne.n	8004332 <__ssputs_r+0x62>
 800431e:	230c      	movs	r3, #12
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	2340      	movs	r3, #64	; 0x40
 8004324:	2001      	movs	r0, #1
 8004326:	89a2      	ldrh	r2, [r4, #12]
 8004328:	4240      	negs	r0, r0
 800432a:	4313      	orrs	r3, r2
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	b005      	add	sp, #20
 8004330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004332:	9a02      	ldr	r2, [sp, #8]
 8004334:	6921      	ldr	r1, [r4, #16]
 8004336:	f000 ff42 	bl	80051be <memcpy>
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <__ssputs_r+0xc0>)
 800433e:	401a      	ands	r2, r3
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	4313      	orrs	r3, r2
 8004344:	81a3      	strh	r3, [r4, #12]
 8004346:	9b02      	ldr	r3, [sp, #8]
 8004348:	6126      	str	r6, [r4, #16]
 800434a:	18f6      	adds	r6, r6, r3
 800434c:	6026      	str	r6, [r4, #0]
 800434e:	6165      	str	r5, [r4, #20]
 8004350:	9e01      	ldr	r6, [sp, #4]
 8004352:	1aed      	subs	r5, r5, r3
 8004354:	60a5      	str	r5, [r4, #8]
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	429e      	cmp	r6, r3
 800435a:	d900      	bls.n	800435e <__ssputs_r+0x8e>
 800435c:	9e01      	ldr	r6, [sp, #4]
 800435e:	0032      	movs	r2, r6
 8004360:	9903      	ldr	r1, [sp, #12]
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	f000 ff34 	bl	80051d0 <memmove>
 8004368:	68a3      	ldr	r3, [r4, #8]
 800436a:	2000      	movs	r0, #0
 800436c:	1b9b      	subs	r3, r3, r6
 800436e:	60a3      	str	r3, [r4, #8]
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	199e      	adds	r6, r3, r6
 8004374:	6026      	str	r6, [r4, #0]
 8004376:	e7da      	b.n	800432e <__ssputs_r+0x5e>
 8004378:	002a      	movs	r2, r5
 800437a:	0038      	movs	r0, r7
 800437c:	f000 ff4c 	bl	8005218 <_realloc_r>
 8004380:	1e06      	subs	r6, r0, #0
 8004382:	d1e0      	bne.n	8004346 <__ssputs_r+0x76>
 8004384:	0038      	movs	r0, r7
 8004386:	6921      	ldr	r1, [r4, #16]
 8004388:	f7ff fec0 	bl	800410c <_free_r>
 800438c:	e7c7      	b.n	800431e <__ssputs_r+0x4e>
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	fffffb7f 	.word	0xfffffb7f

08004394 <_svfiprintf_r>:
 8004394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004396:	b0a1      	sub	sp, #132	; 0x84
 8004398:	9003      	str	r0, [sp, #12]
 800439a:	001d      	movs	r5, r3
 800439c:	898b      	ldrh	r3, [r1, #12]
 800439e:	000f      	movs	r7, r1
 80043a0:	0016      	movs	r6, r2
 80043a2:	061b      	lsls	r3, r3, #24
 80043a4:	d511      	bpl.n	80043ca <_svfiprintf_r+0x36>
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10e      	bne.n	80043ca <_svfiprintf_r+0x36>
 80043ac:	2140      	movs	r1, #64	; 0x40
 80043ae:	f7ff ff19 	bl	80041e4 <_malloc_r>
 80043b2:	6038      	str	r0, [r7, #0]
 80043b4:	6138      	str	r0, [r7, #16]
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d105      	bne.n	80043c6 <_svfiprintf_r+0x32>
 80043ba:	230c      	movs	r3, #12
 80043bc:	9a03      	ldr	r2, [sp, #12]
 80043be:	3801      	subs	r0, #1
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	b021      	add	sp, #132	; 0x84
 80043c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c6:	2340      	movs	r3, #64	; 0x40
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	2300      	movs	r3, #0
 80043cc:	ac08      	add	r4, sp, #32
 80043ce:	6163      	str	r3, [r4, #20]
 80043d0:	3320      	adds	r3, #32
 80043d2:	7663      	strb	r3, [r4, #25]
 80043d4:	3310      	adds	r3, #16
 80043d6:	76a3      	strb	r3, [r4, #26]
 80043d8:	9507      	str	r5, [sp, #28]
 80043da:	0035      	movs	r5, r6
 80043dc:	782b      	ldrb	r3, [r5, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <_svfiprintf_r+0x52>
 80043e2:	2b25      	cmp	r3, #37	; 0x25
 80043e4:	d147      	bne.n	8004476 <_svfiprintf_r+0xe2>
 80043e6:	1bab      	subs	r3, r5, r6
 80043e8:	9305      	str	r3, [sp, #20]
 80043ea:	42b5      	cmp	r5, r6
 80043ec:	d00c      	beq.n	8004408 <_svfiprintf_r+0x74>
 80043ee:	0032      	movs	r2, r6
 80043f0:	0039      	movs	r1, r7
 80043f2:	9803      	ldr	r0, [sp, #12]
 80043f4:	f7ff ff6c 	bl	80042d0 <__ssputs_r>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d100      	bne.n	80043fe <_svfiprintf_r+0x6a>
 80043fc:	e0ae      	b.n	800455c <_svfiprintf_r+0x1c8>
 80043fe:	6962      	ldr	r2, [r4, #20]
 8004400:	9b05      	ldr	r3, [sp, #20]
 8004402:	4694      	mov	ip, r2
 8004404:	4463      	add	r3, ip
 8004406:	6163      	str	r3, [r4, #20]
 8004408:	782b      	ldrb	r3, [r5, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d100      	bne.n	8004410 <_svfiprintf_r+0x7c>
 800440e:	e0a5      	b.n	800455c <_svfiprintf_r+0x1c8>
 8004410:	2201      	movs	r2, #1
 8004412:	2300      	movs	r3, #0
 8004414:	4252      	negs	r2, r2
 8004416:	6062      	str	r2, [r4, #4]
 8004418:	a904      	add	r1, sp, #16
 800441a:	3254      	adds	r2, #84	; 0x54
 800441c:	1852      	adds	r2, r2, r1
 800441e:	1c6e      	adds	r6, r5, #1
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	60e3      	str	r3, [r4, #12]
 8004424:	60a3      	str	r3, [r4, #8]
 8004426:	7013      	strb	r3, [r2, #0]
 8004428:	65a3      	str	r3, [r4, #88]	; 0x58
 800442a:	2205      	movs	r2, #5
 800442c:	7831      	ldrb	r1, [r6, #0]
 800442e:	4854      	ldr	r0, [pc, #336]	; (8004580 <_svfiprintf_r+0x1ec>)
 8004430:	f000 feba 	bl	80051a8 <memchr>
 8004434:	1c75      	adds	r5, r6, #1
 8004436:	2800      	cmp	r0, #0
 8004438:	d11f      	bne.n	800447a <_svfiprintf_r+0xe6>
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	06d3      	lsls	r3, r2, #27
 800443e:	d504      	bpl.n	800444a <_svfiprintf_r+0xb6>
 8004440:	2353      	movs	r3, #83	; 0x53
 8004442:	a904      	add	r1, sp, #16
 8004444:	185b      	adds	r3, r3, r1
 8004446:	2120      	movs	r1, #32
 8004448:	7019      	strb	r1, [r3, #0]
 800444a:	0713      	lsls	r3, r2, #28
 800444c:	d504      	bpl.n	8004458 <_svfiprintf_r+0xc4>
 800444e:	2353      	movs	r3, #83	; 0x53
 8004450:	a904      	add	r1, sp, #16
 8004452:	185b      	adds	r3, r3, r1
 8004454:	212b      	movs	r1, #43	; 0x2b
 8004456:	7019      	strb	r1, [r3, #0]
 8004458:	7833      	ldrb	r3, [r6, #0]
 800445a:	2b2a      	cmp	r3, #42	; 0x2a
 800445c:	d016      	beq.n	800448c <_svfiprintf_r+0xf8>
 800445e:	0035      	movs	r5, r6
 8004460:	2100      	movs	r1, #0
 8004462:	200a      	movs	r0, #10
 8004464:	68e3      	ldr	r3, [r4, #12]
 8004466:	782a      	ldrb	r2, [r5, #0]
 8004468:	1c6e      	adds	r6, r5, #1
 800446a:	3a30      	subs	r2, #48	; 0x30
 800446c:	2a09      	cmp	r2, #9
 800446e:	d94e      	bls.n	800450e <_svfiprintf_r+0x17a>
 8004470:	2900      	cmp	r1, #0
 8004472:	d111      	bne.n	8004498 <_svfiprintf_r+0x104>
 8004474:	e017      	b.n	80044a6 <_svfiprintf_r+0x112>
 8004476:	3501      	adds	r5, #1
 8004478:	e7b0      	b.n	80043dc <_svfiprintf_r+0x48>
 800447a:	4b41      	ldr	r3, [pc, #260]	; (8004580 <_svfiprintf_r+0x1ec>)
 800447c:	6822      	ldr	r2, [r4, #0]
 800447e:	1ac0      	subs	r0, r0, r3
 8004480:	2301      	movs	r3, #1
 8004482:	4083      	lsls	r3, r0
 8004484:	4313      	orrs	r3, r2
 8004486:	002e      	movs	r6, r5
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	e7ce      	b.n	800442a <_svfiprintf_r+0x96>
 800448c:	9b07      	ldr	r3, [sp, #28]
 800448e:	1d19      	adds	r1, r3, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	9107      	str	r1, [sp, #28]
 8004494:	2b00      	cmp	r3, #0
 8004496:	db01      	blt.n	800449c <_svfiprintf_r+0x108>
 8004498:	930b      	str	r3, [sp, #44]	; 0x2c
 800449a:	e004      	b.n	80044a6 <_svfiprintf_r+0x112>
 800449c:	425b      	negs	r3, r3
 800449e:	60e3      	str	r3, [r4, #12]
 80044a0:	2302      	movs	r3, #2
 80044a2:	4313      	orrs	r3, r2
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	782b      	ldrb	r3, [r5, #0]
 80044a8:	2b2e      	cmp	r3, #46	; 0x2e
 80044aa:	d10a      	bne.n	80044c2 <_svfiprintf_r+0x12e>
 80044ac:	786b      	ldrb	r3, [r5, #1]
 80044ae:	2b2a      	cmp	r3, #42	; 0x2a
 80044b0:	d135      	bne.n	800451e <_svfiprintf_r+0x18a>
 80044b2:	9b07      	ldr	r3, [sp, #28]
 80044b4:	3502      	adds	r5, #2
 80044b6:	1d1a      	adds	r2, r3, #4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	9207      	str	r2, [sp, #28]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	db2b      	blt.n	8004518 <_svfiprintf_r+0x184>
 80044c0:	9309      	str	r3, [sp, #36]	; 0x24
 80044c2:	4e30      	ldr	r6, [pc, #192]	; (8004584 <_svfiprintf_r+0x1f0>)
 80044c4:	2203      	movs	r2, #3
 80044c6:	0030      	movs	r0, r6
 80044c8:	7829      	ldrb	r1, [r5, #0]
 80044ca:	f000 fe6d 	bl	80051a8 <memchr>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d006      	beq.n	80044e0 <_svfiprintf_r+0x14c>
 80044d2:	2340      	movs	r3, #64	; 0x40
 80044d4:	1b80      	subs	r0, r0, r6
 80044d6:	4083      	lsls	r3, r0
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	3501      	adds	r5, #1
 80044dc:	4313      	orrs	r3, r2
 80044de:	6023      	str	r3, [r4, #0]
 80044e0:	7829      	ldrb	r1, [r5, #0]
 80044e2:	2206      	movs	r2, #6
 80044e4:	4828      	ldr	r0, [pc, #160]	; (8004588 <_svfiprintf_r+0x1f4>)
 80044e6:	1c6e      	adds	r6, r5, #1
 80044e8:	7621      	strb	r1, [r4, #24]
 80044ea:	f000 fe5d 	bl	80051a8 <memchr>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d03c      	beq.n	800456c <_svfiprintf_r+0x1d8>
 80044f2:	4b26      	ldr	r3, [pc, #152]	; (800458c <_svfiprintf_r+0x1f8>)
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d125      	bne.n	8004544 <_svfiprintf_r+0x1b0>
 80044f8:	2207      	movs	r2, #7
 80044fa:	9b07      	ldr	r3, [sp, #28]
 80044fc:	3307      	adds	r3, #7
 80044fe:	4393      	bics	r3, r2
 8004500:	3308      	adds	r3, #8
 8004502:	9307      	str	r3, [sp, #28]
 8004504:	6963      	ldr	r3, [r4, #20]
 8004506:	9a04      	ldr	r2, [sp, #16]
 8004508:	189b      	adds	r3, r3, r2
 800450a:	6163      	str	r3, [r4, #20]
 800450c:	e765      	b.n	80043da <_svfiprintf_r+0x46>
 800450e:	4343      	muls	r3, r0
 8004510:	0035      	movs	r5, r6
 8004512:	2101      	movs	r1, #1
 8004514:	189b      	adds	r3, r3, r2
 8004516:	e7a6      	b.n	8004466 <_svfiprintf_r+0xd2>
 8004518:	2301      	movs	r3, #1
 800451a:	425b      	negs	r3, r3
 800451c:	e7d0      	b.n	80044c0 <_svfiprintf_r+0x12c>
 800451e:	2300      	movs	r3, #0
 8004520:	200a      	movs	r0, #10
 8004522:	001a      	movs	r2, r3
 8004524:	3501      	adds	r5, #1
 8004526:	6063      	str	r3, [r4, #4]
 8004528:	7829      	ldrb	r1, [r5, #0]
 800452a:	1c6e      	adds	r6, r5, #1
 800452c:	3930      	subs	r1, #48	; 0x30
 800452e:	2909      	cmp	r1, #9
 8004530:	d903      	bls.n	800453a <_svfiprintf_r+0x1a6>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0c5      	beq.n	80044c2 <_svfiprintf_r+0x12e>
 8004536:	9209      	str	r2, [sp, #36]	; 0x24
 8004538:	e7c3      	b.n	80044c2 <_svfiprintf_r+0x12e>
 800453a:	4342      	muls	r2, r0
 800453c:	0035      	movs	r5, r6
 800453e:	2301      	movs	r3, #1
 8004540:	1852      	adds	r2, r2, r1
 8004542:	e7f1      	b.n	8004528 <_svfiprintf_r+0x194>
 8004544:	ab07      	add	r3, sp, #28
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	003a      	movs	r2, r7
 800454a:	0021      	movs	r1, r4
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <_svfiprintf_r+0x1fc>)
 800454e:	9803      	ldr	r0, [sp, #12]
 8004550:	e000      	b.n	8004554 <_svfiprintf_r+0x1c0>
 8004552:	bf00      	nop
 8004554:	9004      	str	r0, [sp, #16]
 8004556:	9b04      	ldr	r3, [sp, #16]
 8004558:	3301      	adds	r3, #1
 800455a:	d1d3      	bne.n	8004504 <_svfiprintf_r+0x170>
 800455c:	89bb      	ldrh	r3, [r7, #12]
 800455e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004560:	065b      	lsls	r3, r3, #25
 8004562:	d400      	bmi.n	8004566 <_svfiprintf_r+0x1d2>
 8004564:	e72d      	b.n	80043c2 <_svfiprintf_r+0x2e>
 8004566:	2001      	movs	r0, #1
 8004568:	4240      	negs	r0, r0
 800456a:	e72a      	b.n	80043c2 <_svfiprintf_r+0x2e>
 800456c:	ab07      	add	r3, sp, #28
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	003a      	movs	r2, r7
 8004572:	0021      	movs	r1, r4
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <_svfiprintf_r+0x1fc>)
 8004576:	9803      	ldr	r0, [sp, #12]
 8004578:	f000 f9de 	bl	8004938 <_printf_i>
 800457c:	e7ea      	b.n	8004554 <_svfiprintf_r+0x1c0>
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	080057b4 	.word	0x080057b4
 8004584:	080057ba 	.word	0x080057ba
 8004588:	080057be 	.word	0x080057be
 800458c:	00000000 	.word	0x00000000
 8004590:	080042d1 	.word	0x080042d1

08004594 <__sfputc_r>:
 8004594:	6893      	ldr	r3, [r2, #8]
 8004596:	b510      	push	{r4, lr}
 8004598:	3b01      	subs	r3, #1
 800459a:	6093      	str	r3, [r2, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	da04      	bge.n	80045aa <__sfputc_r+0x16>
 80045a0:	6994      	ldr	r4, [r2, #24]
 80045a2:	42a3      	cmp	r3, r4
 80045a4:	db07      	blt.n	80045b6 <__sfputc_r+0x22>
 80045a6:	290a      	cmp	r1, #10
 80045a8:	d005      	beq.n	80045b6 <__sfputc_r+0x22>
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	1c58      	adds	r0, r3, #1
 80045ae:	6010      	str	r0, [r2, #0]
 80045b0:	7019      	strb	r1, [r3, #0]
 80045b2:	0008      	movs	r0, r1
 80045b4:	bd10      	pop	{r4, pc}
 80045b6:	f000 fae3 	bl	8004b80 <__swbuf_r>
 80045ba:	0001      	movs	r1, r0
 80045bc:	e7f9      	b.n	80045b2 <__sfputc_r+0x1e>

080045be <__sfputs_r>:
 80045be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c0:	0006      	movs	r6, r0
 80045c2:	000f      	movs	r7, r1
 80045c4:	0014      	movs	r4, r2
 80045c6:	18d5      	adds	r5, r2, r3
 80045c8:	42ac      	cmp	r4, r5
 80045ca:	d101      	bne.n	80045d0 <__sfputs_r+0x12>
 80045cc:	2000      	movs	r0, #0
 80045ce:	e007      	b.n	80045e0 <__sfputs_r+0x22>
 80045d0:	7821      	ldrb	r1, [r4, #0]
 80045d2:	003a      	movs	r2, r7
 80045d4:	0030      	movs	r0, r6
 80045d6:	f7ff ffdd 	bl	8004594 <__sfputc_r>
 80045da:	3401      	adds	r4, #1
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d1f3      	bne.n	80045c8 <__sfputs_r+0xa>
 80045e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045e4 <_vfiprintf_r>:
 80045e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e6:	b0a1      	sub	sp, #132	; 0x84
 80045e8:	0006      	movs	r6, r0
 80045ea:	000c      	movs	r4, r1
 80045ec:	001f      	movs	r7, r3
 80045ee:	9203      	str	r2, [sp, #12]
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d004      	beq.n	80045fe <_vfiprintf_r+0x1a>
 80045f4:	6983      	ldr	r3, [r0, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <_vfiprintf_r+0x1a>
 80045fa:	f000 fcc5 	bl	8004f88 <__sinit>
 80045fe:	4b8e      	ldr	r3, [pc, #568]	; (8004838 <_vfiprintf_r+0x254>)
 8004600:	429c      	cmp	r4, r3
 8004602:	d11c      	bne.n	800463e <_vfiprintf_r+0x5a>
 8004604:	6874      	ldr	r4, [r6, #4]
 8004606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004608:	07db      	lsls	r3, r3, #31
 800460a:	d405      	bmi.n	8004618 <_vfiprintf_r+0x34>
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	059b      	lsls	r3, r3, #22
 8004610:	d402      	bmi.n	8004618 <_vfiprintf_r+0x34>
 8004612:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004614:	f000 fd59 	bl	80050ca <__retarget_lock_acquire_recursive>
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	071b      	lsls	r3, r3, #28
 800461c:	d502      	bpl.n	8004624 <_vfiprintf_r+0x40>
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11d      	bne.n	8004660 <_vfiprintf_r+0x7c>
 8004624:	0021      	movs	r1, r4
 8004626:	0030      	movs	r0, r6
 8004628:	f000 fb00 	bl	8004c2c <__swsetup_r>
 800462c:	2800      	cmp	r0, #0
 800462e:	d017      	beq.n	8004660 <_vfiprintf_r+0x7c>
 8004630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004632:	07db      	lsls	r3, r3, #31
 8004634:	d50d      	bpl.n	8004652 <_vfiprintf_r+0x6e>
 8004636:	2001      	movs	r0, #1
 8004638:	4240      	negs	r0, r0
 800463a:	b021      	add	sp, #132	; 0x84
 800463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800463e:	4b7f      	ldr	r3, [pc, #508]	; (800483c <_vfiprintf_r+0x258>)
 8004640:	429c      	cmp	r4, r3
 8004642:	d101      	bne.n	8004648 <_vfiprintf_r+0x64>
 8004644:	68b4      	ldr	r4, [r6, #8]
 8004646:	e7de      	b.n	8004606 <_vfiprintf_r+0x22>
 8004648:	4b7d      	ldr	r3, [pc, #500]	; (8004840 <_vfiprintf_r+0x25c>)
 800464a:	429c      	cmp	r4, r3
 800464c:	d1db      	bne.n	8004606 <_vfiprintf_r+0x22>
 800464e:	68f4      	ldr	r4, [r6, #12]
 8004650:	e7d9      	b.n	8004606 <_vfiprintf_r+0x22>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	059b      	lsls	r3, r3, #22
 8004656:	d4ee      	bmi.n	8004636 <_vfiprintf_r+0x52>
 8004658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800465a:	f000 fd37 	bl	80050cc <__retarget_lock_release_recursive>
 800465e:	e7ea      	b.n	8004636 <_vfiprintf_r+0x52>
 8004660:	2300      	movs	r3, #0
 8004662:	ad08      	add	r5, sp, #32
 8004664:	616b      	str	r3, [r5, #20]
 8004666:	3320      	adds	r3, #32
 8004668:	766b      	strb	r3, [r5, #25]
 800466a:	3310      	adds	r3, #16
 800466c:	76ab      	strb	r3, [r5, #26]
 800466e:	9707      	str	r7, [sp, #28]
 8004670:	9f03      	ldr	r7, [sp, #12]
 8004672:	783b      	ldrb	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <_vfiprintf_r+0x98>
 8004678:	2b25      	cmp	r3, #37	; 0x25
 800467a:	d14e      	bne.n	800471a <_vfiprintf_r+0x136>
 800467c:	9b03      	ldr	r3, [sp, #12]
 800467e:	1afb      	subs	r3, r7, r3
 8004680:	9305      	str	r3, [sp, #20]
 8004682:	9b03      	ldr	r3, [sp, #12]
 8004684:	429f      	cmp	r7, r3
 8004686:	d00d      	beq.n	80046a4 <_vfiprintf_r+0xc0>
 8004688:	9b05      	ldr	r3, [sp, #20]
 800468a:	0021      	movs	r1, r4
 800468c:	0030      	movs	r0, r6
 800468e:	9a03      	ldr	r2, [sp, #12]
 8004690:	f7ff ff95 	bl	80045be <__sfputs_r>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d100      	bne.n	800469a <_vfiprintf_r+0xb6>
 8004698:	e0b5      	b.n	8004806 <_vfiprintf_r+0x222>
 800469a:	696a      	ldr	r2, [r5, #20]
 800469c:	9b05      	ldr	r3, [sp, #20]
 800469e:	4694      	mov	ip, r2
 80046a0:	4463      	add	r3, ip
 80046a2:	616b      	str	r3, [r5, #20]
 80046a4:	783b      	ldrb	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d100      	bne.n	80046ac <_vfiprintf_r+0xc8>
 80046aa:	e0ac      	b.n	8004806 <_vfiprintf_r+0x222>
 80046ac:	2201      	movs	r2, #1
 80046ae:	1c7b      	adds	r3, r7, #1
 80046b0:	9303      	str	r3, [sp, #12]
 80046b2:	2300      	movs	r3, #0
 80046b4:	4252      	negs	r2, r2
 80046b6:	606a      	str	r2, [r5, #4]
 80046b8:	a904      	add	r1, sp, #16
 80046ba:	3254      	adds	r2, #84	; 0x54
 80046bc:	1852      	adds	r2, r2, r1
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	60eb      	str	r3, [r5, #12]
 80046c2:	60ab      	str	r3, [r5, #8]
 80046c4:	7013      	strb	r3, [r2, #0]
 80046c6:	65ab      	str	r3, [r5, #88]	; 0x58
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	2205      	movs	r2, #5
 80046cc:	7819      	ldrb	r1, [r3, #0]
 80046ce:	485d      	ldr	r0, [pc, #372]	; (8004844 <_vfiprintf_r+0x260>)
 80046d0:	f000 fd6a 	bl	80051a8 <memchr>
 80046d4:	9b03      	ldr	r3, [sp, #12]
 80046d6:	1c5f      	adds	r7, r3, #1
 80046d8:	2800      	cmp	r0, #0
 80046da:	d120      	bne.n	800471e <_vfiprintf_r+0x13a>
 80046dc:	682a      	ldr	r2, [r5, #0]
 80046de:	06d3      	lsls	r3, r2, #27
 80046e0:	d504      	bpl.n	80046ec <_vfiprintf_r+0x108>
 80046e2:	2353      	movs	r3, #83	; 0x53
 80046e4:	a904      	add	r1, sp, #16
 80046e6:	185b      	adds	r3, r3, r1
 80046e8:	2120      	movs	r1, #32
 80046ea:	7019      	strb	r1, [r3, #0]
 80046ec:	0713      	lsls	r3, r2, #28
 80046ee:	d504      	bpl.n	80046fa <_vfiprintf_r+0x116>
 80046f0:	2353      	movs	r3, #83	; 0x53
 80046f2:	a904      	add	r1, sp, #16
 80046f4:	185b      	adds	r3, r3, r1
 80046f6:	212b      	movs	r1, #43	; 0x2b
 80046f8:	7019      	strb	r1, [r3, #0]
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004700:	d016      	beq.n	8004730 <_vfiprintf_r+0x14c>
 8004702:	2100      	movs	r1, #0
 8004704:	68eb      	ldr	r3, [r5, #12]
 8004706:	9f03      	ldr	r7, [sp, #12]
 8004708:	783a      	ldrb	r2, [r7, #0]
 800470a:	1c78      	adds	r0, r7, #1
 800470c:	3a30      	subs	r2, #48	; 0x30
 800470e:	4684      	mov	ip, r0
 8004710:	2a09      	cmp	r2, #9
 8004712:	d94f      	bls.n	80047b4 <_vfiprintf_r+0x1d0>
 8004714:	2900      	cmp	r1, #0
 8004716:	d111      	bne.n	800473c <_vfiprintf_r+0x158>
 8004718:	e017      	b.n	800474a <_vfiprintf_r+0x166>
 800471a:	3701      	adds	r7, #1
 800471c:	e7a9      	b.n	8004672 <_vfiprintf_r+0x8e>
 800471e:	4b49      	ldr	r3, [pc, #292]	; (8004844 <_vfiprintf_r+0x260>)
 8004720:	682a      	ldr	r2, [r5, #0]
 8004722:	1ac0      	subs	r0, r0, r3
 8004724:	2301      	movs	r3, #1
 8004726:	4083      	lsls	r3, r0
 8004728:	4313      	orrs	r3, r2
 800472a:	602b      	str	r3, [r5, #0]
 800472c:	9703      	str	r7, [sp, #12]
 800472e:	e7cb      	b.n	80046c8 <_vfiprintf_r+0xe4>
 8004730:	9b07      	ldr	r3, [sp, #28]
 8004732:	1d19      	adds	r1, r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	9107      	str	r1, [sp, #28]
 8004738:	2b00      	cmp	r3, #0
 800473a:	db01      	blt.n	8004740 <_vfiprintf_r+0x15c>
 800473c:	930b      	str	r3, [sp, #44]	; 0x2c
 800473e:	e004      	b.n	800474a <_vfiprintf_r+0x166>
 8004740:	425b      	negs	r3, r3
 8004742:	60eb      	str	r3, [r5, #12]
 8004744:	2302      	movs	r3, #2
 8004746:	4313      	orrs	r3, r2
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	783b      	ldrb	r3, [r7, #0]
 800474c:	2b2e      	cmp	r3, #46	; 0x2e
 800474e:	d10a      	bne.n	8004766 <_vfiprintf_r+0x182>
 8004750:	787b      	ldrb	r3, [r7, #1]
 8004752:	2b2a      	cmp	r3, #42	; 0x2a
 8004754:	d137      	bne.n	80047c6 <_vfiprintf_r+0x1e2>
 8004756:	9b07      	ldr	r3, [sp, #28]
 8004758:	3702      	adds	r7, #2
 800475a:	1d1a      	adds	r2, r3, #4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	9207      	str	r2, [sp, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	db2d      	blt.n	80047c0 <_vfiprintf_r+0x1dc>
 8004764:	9309      	str	r3, [sp, #36]	; 0x24
 8004766:	2203      	movs	r2, #3
 8004768:	7839      	ldrb	r1, [r7, #0]
 800476a:	4837      	ldr	r0, [pc, #220]	; (8004848 <_vfiprintf_r+0x264>)
 800476c:	f000 fd1c 	bl	80051a8 <memchr>
 8004770:	2800      	cmp	r0, #0
 8004772:	d007      	beq.n	8004784 <_vfiprintf_r+0x1a0>
 8004774:	4b34      	ldr	r3, [pc, #208]	; (8004848 <_vfiprintf_r+0x264>)
 8004776:	682a      	ldr	r2, [r5, #0]
 8004778:	1ac0      	subs	r0, r0, r3
 800477a:	2340      	movs	r3, #64	; 0x40
 800477c:	4083      	lsls	r3, r0
 800477e:	4313      	orrs	r3, r2
 8004780:	3701      	adds	r7, #1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	7839      	ldrb	r1, [r7, #0]
 8004786:	1c7b      	adds	r3, r7, #1
 8004788:	2206      	movs	r2, #6
 800478a:	4830      	ldr	r0, [pc, #192]	; (800484c <_vfiprintf_r+0x268>)
 800478c:	9303      	str	r3, [sp, #12]
 800478e:	7629      	strb	r1, [r5, #24]
 8004790:	f000 fd0a 	bl	80051a8 <memchr>
 8004794:	2800      	cmp	r0, #0
 8004796:	d045      	beq.n	8004824 <_vfiprintf_r+0x240>
 8004798:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <_vfiprintf_r+0x26c>)
 800479a:	2b00      	cmp	r3, #0
 800479c:	d127      	bne.n	80047ee <_vfiprintf_r+0x20a>
 800479e:	2207      	movs	r2, #7
 80047a0:	9b07      	ldr	r3, [sp, #28]
 80047a2:	3307      	adds	r3, #7
 80047a4:	4393      	bics	r3, r2
 80047a6:	3308      	adds	r3, #8
 80047a8:	9307      	str	r3, [sp, #28]
 80047aa:	696b      	ldr	r3, [r5, #20]
 80047ac:	9a04      	ldr	r2, [sp, #16]
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	616b      	str	r3, [r5, #20]
 80047b2:	e75d      	b.n	8004670 <_vfiprintf_r+0x8c>
 80047b4:	210a      	movs	r1, #10
 80047b6:	434b      	muls	r3, r1
 80047b8:	4667      	mov	r7, ip
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	3909      	subs	r1, #9
 80047be:	e7a3      	b.n	8004708 <_vfiprintf_r+0x124>
 80047c0:	2301      	movs	r3, #1
 80047c2:	425b      	negs	r3, r3
 80047c4:	e7ce      	b.n	8004764 <_vfiprintf_r+0x180>
 80047c6:	2300      	movs	r3, #0
 80047c8:	001a      	movs	r2, r3
 80047ca:	3701      	adds	r7, #1
 80047cc:	606b      	str	r3, [r5, #4]
 80047ce:	7839      	ldrb	r1, [r7, #0]
 80047d0:	1c78      	adds	r0, r7, #1
 80047d2:	3930      	subs	r1, #48	; 0x30
 80047d4:	4684      	mov	ip, r0
 80047d6:	2909      	cmp	r1, #9
 80047d8:	d903      	bls.n	80047e2 <_vfiprintf_r+0x1fe>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0c3      	beq.n	8004766 <_vfiprintf_r+0x182>
 80047de:	9209      	str	r2, [sp, #36]	; 0x24
 80047e0:	e7c1      	b.n	8004766 <_vfiprintf_r+0x182>
 80047e2:	230a      	movs	r3, #10
 80047e4:	435a      	muls	r2, r3
 80047e6:	4667      	mov	r7, ip
 80047e8:	1852      	adds	r2, r2, r1
 80047ea:	3b09      	subs	r3, #9
 80047ec:	e7ef      	b.n	80047ce <_vfiprintf_r+0x1ea>
 80047ee:	ab07      	add	r3, sp, #28
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	0022      	movs	r2, r4
 80047f4:	0029      	movs	r1, r5
 80047f6:	0030      	movs	r0, r6
 80047f8:	4b16      	ldr	r3, [pc, #88]	; (8004854 <_vfiprintf_r+0x270>)
 80047fa:	e000      	b.n	80047fe <_vfiprintf_r+0x21a>
 80047fc:	bf00      	nop
 80047fe:	9004      	str	r0, [sp, #16]
 8004800:	9b04      	ldr	r3, [sp, #16]
 8004802:	3301      	adds	r3, #1
 8004804:	d1d1      	bne.n	80047aa <_vfiprintf_r+0x1c6>
 8004806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004808:	07db      	lsls	r3, r3, #31
 800480a:	d405      	bmi.n	8004818 <_vfiprintf_r+0x234>
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	059b      	lsls	r3, r3, #22
 8004810:	d402      	bmi.n	8004818 <_vfiprintf_r+0x234>
 8004812:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004814:	f000 fc5a 	bl	80050cc <__retarget_lock_release_recursive>
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	065b      	lsls	r3, r3, #25
 800481c:	d500      	bpl.n	8004820 <_vfiprintf_r+0x23c>
 800481e:	e70a      	b.n	8004636 <_vfiprintf_r+0x52>
 8004820:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004822:	e70a      	b.n	800463a <_vfiprintf_r+0x56>
 8004824:	ab07      	add	r3, sp, #28
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	0022      	movs	r2, r4
 800482a:	0029      	movs	r1, r5
 800482c:	0030      	movs	r0, r6
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <_vfiprintf_r+0x270>)
 8004830:	f000 f882 	bl	8004938 <_printf_i>
 8004834:	e7e3      	b.n	80047fe <_vfiprintf_r+0x21a>
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	08005808 	.word	0x08005808
 800483c:	08005828 	.word	0x08005828
 8004840:	080057e8 	.word	0x080057e8
 8004844:	080057b4 	.word	0x080057b4
 8004848:	080057ba 	.word	0x080057ba
 800484c:	080057be 	.word	0x080057be
 8004850:	00000000 	.word	0x00000000
 8004854:	080045bf 	.word	0x080045bf

08004858 <_printf_common>:
 8004858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800485a:	0015      	movs	r5, r2
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	688a      	ldr	r2, [r1, #8]
 8004860:	690b      	ldr	r3, [r1, #16]
 8004862:	000c      	movs	r4, r1
 8004864:	9000      	str	r0, [sp, #0]
 8004866:	4293      	cmp	r3, r2
 8004868:	da00      	bge.n	800486c <_printf_common+0x14>
 800486a:	0013      	movs	r3, r2
 800486c:	0022      	movs	r2, r4
 800486e:	602b      	str	r3, [r5, #0]
 8004870:	3243      	adds	r2, #67	; 0x43
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	2a00      	cmp	r2, #0
 8004876:	d001      	beq.n	800487c <_printf_common+0x24>
 8004878:	3301      	adds	r3, #1
 800487a:	602b      	str	r3, [r5, #0]
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	069b      	lsls	r3, r3, #26
 8004880:	d502      	bpl.n	8004888 <_printf_common+0x30>
 8004882:	682b      	ldr	r3, [r5, #0]
 8004884:	3302      	adds	r3, #2
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	6822      	ldr	r2, [r4, #0]
 800488a:	2306      	movs	r3, #6
 800488c:	0017      	movs	r7, r2
 800488e:	401f      	ands	r7, r3
 8004890:	421a      	tst	r2, r3
 8004892:	d027      	beq.n	80048e4 <_printf_common+0x8c>
 8004894:	0023      	movs	r3, r4
 8004896:	3343      	adds	r3, #67	; 0x43
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	1e5a      	subs	r2, r3, #1
 800489c:	4193      	sbcs	r3, r2
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	0692      	lsls	r2, r2, #26
 80048a2:	d430      	bmi.n	8004906 <_printf_common+0xae>
 80048a4:	0022      	movs	r2, r4
 80048a6:	9901      	ldr	r1, [sp, #4]
 80048a8:	9800      	ldr	r0, [sp, #0]
 80048aa:	9e08      	ldr	r6, [sp, #32]
 80048ac:	3243      	adds	r2, #67	; 0x43
 80048ae:	47b0      	blx	r6
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d025      	beq.n	8004900 <_printf_common+0xa8>
 80048b4:	2306      	movs	r3, #6
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	682a      	ldr	r2, [r5, #0]
 80048ba:	68e1      	ldr	r1, [r4, #12]
 80048bc:	2500      	movs	r5, #0
 80048be:	4003      	ands	r3, r0
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d103      	bne.n	80048cc <_printf_common+0x74>
 80048c4:	1a8d      	subs	r5, r1, r2
 80048c6:	43eb      	mvns	r3, r5
 80048c8:	17db      	asrs	r3, r3, #31
 80048ca:	401d      	ands	r5, r3
 80048cc:	68a3      	ldr	r3, [r4, #8]
 80048ce:	6922      	ldr	r2, [r4, #16]
 80048d0:	4293      	cmp	r3, r2
 80048d2:	dd01      	ble.n	80048d8 <_printf_common+0x80>
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	18ed      	adds	r5, r5, r3
 80048d8:	2700      	movs	r7, #0
 80048da:	42bd      	cmp	r5, r7
 80048dc:	d120      	bne.n	8004920 <_printf_common+0xc8>
 80048de:	2000      	movs	r0, #0
 80048e0:	e010      	b.n	8004904 <_printf_common+0xac>
 80048e2:	3701      	adds	r7, #1
 80048e4:	68e3      	ldr	r3, [r4, #12]
 80048e6:	682a      	ldr	r2, [r5, #0]
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	42bb      	cmp	r3, r7
 80048ec:	ddd2      	ble.n	8004894 <_printf_common+0x3c>
 80048ee:	0022      	movs	r2, r4
 80048f0:	2301      	movs	r3, #1
 80048f2:	9901      	ldr	r1, [sp, #4]
 80048f4:	9800      	ldr	r0, [sp, #0]
 80048f6:	9e08      	ldr	r6, [sp, #32]
 80048f8:	3219      	adds	r2, #25
 80048fa:	47b0      	blx	r6
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d1f0      	bne.n	80048e2 <_printf_common+0x8a>
 8004900:	2001      	movs	r0, #1
 8004902:	4240      	negs	r0, r0
 8004904:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004906:	2030      	movs	r0, #48	; 0x30
 8004908:	18e1      	adds	r1, r4, r3
 800490a:	3143      	adds	r1, #67	; 0x43
 800490c:	7008      	strb	r0, [r1, #0]
 800490e:	0021      	movs	r1, r4
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	3145      	adds	r1, #69	; 0x45
 8004914:	7809      	ldrb	r1, [r1, #0]
 8004916:	18a2      	adds	r2, r4, r2
 8004918:	3243      	adds	r2, #67	; 0x43
 800491a:	3302      	adds	r3, #2
 800491c:	7011      	strb	r1, [r2, #0]
 800491e:	e7c1      	b.n	80048a4 <_printf_common+0x4c>
 8004920:	0022      	movs	r2, r4
 8004922:	2301      	movs	r3, #1
 8004924:	9901      	ldr	r1, [sp, #4]
 8004926:	9800      	ldr	r0, [sp, #0]
 8004928:	9e08      	ldr	r6, [sp, #32]
 800492a:	321a      	adds	r2, #26
 800492c:	47b0      	blx	r6
 800492e:	1c43      	adds	r3, r0, #1
 8004930:	d0e6      	beq.n	8004900 <_printf_common+0xa8>
 8004932:	3701      	adds	r7, #1
 8004934:	e7d1      	b.n	80048da <_printf_common+0x82>
	...

08004938 <_printf_i>:
 8004938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493a:	b08b      	sub	sp, #44	; 0x2c
 800493c:	9206      	str	r2, [sp, #24]
 800493e:	000a      	movs	r2, r1
 8004940:	3243      	adds	r2, #67	; 0x43
 8004942:	9307      	str	r3, [sp, #28]
 8004944:	9005      	str	r0, [sp, #20]
 8004946:	9204      	str	r2, [sp, #16]
 8004948:	7e0a      	ldrb	r2, [r1, #24]
 800494a:	000c      	movs	r4, r1
 800494c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800494e:	2a78      	cmp	r2, #120	; 0x78
 8004950:	d807      	bhi.n	8004962 <_printf_i+0x2a>
 8004952:	2a62      	cmp	r2, #98	; 0x62
 8004954:	d809      	bhi.n	800496a <_printf_i+0x32>
 8004956:	2a00      	cmp	r2, #0
 8004958:	d100      	bne.n	800495c <_printf_i+0x24>
 800495a:	e0c1      	b.n	8004ae0 <_printf_i+0x1a8>
 800495c:	2a58      	cmp	r2, #88	; 0x58
 800495e:	d100      	bne.n	8004962 <_printf_i+0x2a>
 8004960:	e08c      	b.n	8004a7c <_printf_i+0x144>
 8004962:	0026      	movs	r6, r4
 8004964:	3642      	adds	r6, #66	; 0x42
 8004966:	7032      	strb	r2, [r6, #0]
 8004968:	e022      	b.n	80049b0 <_printf_i+0x78>
 800496a:	0010      	movs	r0, r2
 800496c:	3863      	subs	r0, #99	; 0x63
 800496e:	2815      	cmp	r0, #21
 8004970:	d8f7      	bhi.n	8004962 <_printf_i+0x2a>
 8004972:	f7fb fbcf 	bl	8000114 <__gnu_thumb1_case_shi>
 8004976:	0016      	.short	0x0016
 8004978:	fff6001f 	.word	0xfff6001f
 800497c:	fff6fff6 	.word	0xfff6fff6
 8004980:	001ffff6 	.word	0x001ffff6
 8004984:	fff6fff6 	.word	0xfff6fff6
 8004988:	fff6fff6 	.word	0xfff6fff6
 800498c:	003600a8 	.word	0x003600a8
 8004990:	fff6009a 	.word	0xfff6009a
 8004994:	00b9fff6 	.word	0x00b9fff6
 8004998:	0036fff6 	.word	0x0036fff6
 800499c:	fff6fff6 	.word	0xfff6fff6
 80049a0:	009e      	.short	0x009e
 80049a2:	0026      	movs	r6, r4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	3642      	adds	r6, #66	; 0x42
 80049a8:	1d11      	adds	r1, r2, #4
 80049aa:	6019      	str	r1, [r3, #0]
 80049ac:	6813      	ldr	r3, [r2, #0]
 80049ae:	7033      	strb	r3, [r6, #0]
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0a7      	b.n	8004b04 <_printf_i+0x1cc>
 80049b4:	6808      	ldr	r0, [r1, #0]
 80049b6:	6819      	ldr	r1, [r3, #0]
 80049b8:	1d0a      	adds	r2, r1, #4
 80049ba:	0605      	lsls	r5, r0, #24
 80049bc:	d50b      	bpl.n	80049d6 <_printf_i+0x9e>
 80049be:	680d      	ldr	r5, [r1, #0]
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	da03      	bge.n	80049ce <_printf_i+0x96>
 80049c6:	232d      	movs	r3, #45	; 0x2d
 80049c8:	9a04      	ldr	r2, [sp, #16]
 80049ca:	426d      	negs	r5, r5
 80049cc:	7013      	strb	r3, [r2, #0]
 80049ce:	4b61      	ldr	r3, [pc, #388]	; (8004b54 <_printf_i+0x21c>)
 80049d0:	270a      	movs	r7, #10
 80049d2:	9303      	str	r3, [sp, #12]
 80049d4:	e01b      	b.n	8004a0e <_printf_i+0xd6>
 80049d6:	680d      	ldr	r5, [r1, #0]
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	0641      	lsls	r1, r0, #25
 80049dc:	d5f1      	bpl.n	80049c2 <_printf_i+0x8a>
 80049de:	b22d      	sxth	r5, r5
 80049e0:	e7ef      	b.n	80049c2 <_printf_i+0x8a>
 80049e2:	680d      	ldr	r5, [r1, #0]
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	1d08      	adds	r0, r1, #4
 80049e8:	6018      	str	r0, [r3, #0]
 80049ea:	062e      	lsls	r6, r5, #24
 80049ec:	d501      	bpl.n	80049f2 <_printf_i+0xba>
 80049ee:	680d      	ldr	r5, [r1, #0]
 80049f0:	e003      	b.n	80049fa <_printf_i+0xc2>
 80049f2:	066d      	lsls	r5, r5, #25
 80049f4:	d5fb      	bpl.n	80049ee <_printf_i+0xb6>
 80049f6:	680d      	ldr	r5, [r1, #0]
 80049f8:	b2ad      	uxth	r5, r5
 80049fa:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <_printf_i+0x21c>)
 80049fc:	2708      	movs	r7, #8
 80049fe:	9303      	str	r3, [sp, #12]
 8004a00:	2a6f      	cmp	r2, #111	; 0x6f
 8004a02:	d000      	beq.n	8004a06 <_printf_i+0xce>
 8004a04:	3702      	adds	r7, #2
 8004a06:	0023      	movs	r3, r4
 8004a08:	2200      	movs	r2, #0
 8004a0a:	3343      	adds	r3, #67	; 0x43
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	6863      	ldr	r3, [r4, #4]
 8004a10:	60a3      	str	r3, [r4, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db03      	blt.n	8004a1e <_printf_i+0xe6>
 8004a16:	2204      	movs	r2, #4
 8004a18:	6821      	ldr	r1, [r4, #0]
 8004a1a:	4391      	bics	r1, r2
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	d102      	bne.n	8004a28 <_printf_i+0xf0>
 8004a22:	9e04      	ldr	r6, [sp, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00c      	beq.n	8004a42 <_printf_i+0x10a>
 8004a28:	9e04      	ldr	r6, [sp, #16]
 8004a2a:	0028      	movs	r0, r5
 8004a2c:	0039      	movs	r1, r7
 8004a2e:	f7fb fc01 	bl	8000234 <__aeabi_uidivmod>
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	3e01      	subs	r6, #1
 8004a36:	5c5b      	ldrb	r3, [r3, r1]
 8004a38:	7033      	strb	r3, [r6, #0]
 8004a3a:	002b      	movs	r3, r5
 8004a3c:	0005      	movs	r5, r0
 8004a3e:	429f      	cmp	r7, r3
 8004a40:	d9f3      	bls.n	8004a2a <_printf_i+0xf2>
 8004a42:	2f08      	cmp	r7, #8
 8004a44:	d109      	bne.n	8004a5a <_printf_i+0x122>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	07db      	lsls	r3, r3, #31
 8004a4a:	d506      	bpl.n	8004a5a <_printf_i+0x122>
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	6922      	ldr	r2, [r4, #16]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	dc02      	bgt.n	8004a5a <_printf_i+0x122>
 8004a54:	2330      	movs	r3, #48	; 0x30
 8004a56:	3e01      	subs	r6, #1
 8004a58:	7033      	strb	r3, [r6, #0]
 8004a5a:	9b04      	ldr	r3, [sp, #16]
 8004a5c:	1b9b      	subs	r3, r3, r6
 8004a5e:	6123      	str	r3, [r4, #16]
 8004a60:	9b07      	ldr	r3, [sp, #28]
 8004a62:	0021      	movs	r1, r4
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	9805      	ldr	r0, [sp, #20]
 8004a68:	9b06      	ldr	r3, [sp, #24]
 8004a6a:	aa09      	add	r2, sp, #36	; 0x24
 8004a6c:	f7ff fef4 	bl	8004858 <_printf_common>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d14c      	bne.n	8004b0e <_printf_i+0x1d6>
 8004a74:	2001      	movs	r0, #1
 8004a76:	4240      	negs	r0, r0
 8004a78:	b00b      	add	sp, #44	; 0x2c
 8004a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7c:	3145      	adds	r1, #69	; 0x45
 8004a7e:	700a      	strb	r2, [r1, #0]
 8004a80:	4a34      	ldr	r2, [pc, #208]	; (8004b54 <_printf_i+0x21c>)
 8004a82:	9203      	str	r2, [sp, #12]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	6821      	ldr	r1, [r4, #0]
 8004a88:	ca20      	ldmia	r2!, {r5}
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	0608      	lsls	r0, r1, #24
 8004a8e:	d516      	bpl.n	8004abe <_printf_i+0x186>
 8004a90:	07cb      	lsls	r3, r1, #31
 8004a92:	d502      	bpl.n	8004a9a <_printf_i+0x162>
 8004a94:	2320      	movs	r3, #32
 8004a96:	4319      	orrs	r1, r3
 8004a98:	6021      	str	r1, [r4, #0]
 8004a9a:	2710      	movs	r7, #16
 8004a9c:	2d00      	cmp	r5, #0
 8004a9e:	d1b2      	bne.n	8004a06 <_printf_i+0xce>
 8004aa0:	2320      	movs	r3, #32
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	439a      	bics	r2, r3
 8004aa6:	6022      	str	r2, [r4, #0]
 8004aa8:	e7ad      	b.n	8004a06 <_printf_i+0xce>
 8004aaa:	2220      	movs	r2, #32
 8004aac:	6809      	ldr	r1, [r1, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	6022      	str	r2, [r4, #0]
 8004ab2:	0022      	movs	r2, r4
 8004ab4:	2178      	movs	r1, #120	; 0x78
 8004ab6:	3245      	adds	r2, #69	; 0x45
 8004ab8:	7011      	strb	r1, [r2, #0]
 8004aba:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <_printf_i+0x220>)
 8004abc:	e7e1      	b.n	8004a82 <_printf_i+0x14a>
 8004abe:	0648      	lsls	r0, r1, #25
 8004ac0:	d5e6      	bpl.n	8004a90 <_printf_i+0x158>
 8004ac2:	b2ad      	uxth	r5, r5
 8004ac4:	e7e4      	b.n	8004a90 <_printf_i+0x158>
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	680d      	ldr	r5, [r1, #0]
 8004aca:	1d10      	adds	r0, r2, #4
 8004acc:	6949      	ldr	r1, [r1, #20]
 8004ace:	6018      	str	r0, [r3, #0]
 8004ad0:	6813      	ldr	r3, [r2, #0]
 8004ad2:	062e      	lsls	r6, r5, #24
 8004ad4:	d501      	bpl.n	8004ada <_printf_i+0x1a2>
 8004ad6:	6019      	str	r1, [r3, #0]
 8004ad8:	e002      	b.n	8004ae0 <_printf_i+0x1a8>
 8004ada:	066d      	lsls	r5, r5, #25
 8004adc:	d5fb      	bpl.n	8004ad6 <_printf_i+0x19e>
 8004ade:	8019      	strh	r1, [r3, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9e04      	ldr	r6, [sp, #16]
 8004ae4:	6123      	str	r3, [r4, #16]
 8004ae6:	e7bb      	b.n	8004a60 <_printf_i+0x128>
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	1d11      	adds	r1, r2, #4
 8004aec:	6019      	str	r1, [r3, #0]
 8004aee:	6816      	ldr	r6, [r2, #0]
 8004af0:	2100      	movs	r1, #0
 8004af2:	0030      	movs	r0, r6
 8004af4:	6862      	ldr	r2, [r4, #4]
 8004af6:	f000 fb57 	bl	80051a8 <memchr>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d001      	beq.n	8004b02 <_printf_i+0x1ca>
 8004afe:	1b80      	subs	r0, r0, r6
 8004b00:	6060      	str	r0, [r4, #4]
 8004b02:	6863      	ldr	r3, [r4, #4]
 8004b04:	6123      	str	r3, [r4, #16]
 8004b06:	2300      	movs	r3, #0
 8004b08:	9a04      	ldr	r2, [sp, #16]
 8004b0a:	7013      	strb	r3, [r2, #0]
 8004b0c:	e7a8      	b.n	8004a60 <_printf_i+0x128>
 8004b0e:	6923      	ldr	r3, [r4, #16]
 8004b10:	0032      	movs	r2, r6
 8004b12:	9906      	ldr	r1, [sp, #24]
 8004b14:	9805      	ldr	r0, [sp, #20]
 8004b16:	9d07      	ldr	r5, [sp, #28]
 8004b18:	47a8      	blx	r5
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d0aa      	beq.n	8004a74 <_printf_i+0x13c>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	079b      	lsls	r3, r3, #30
 8004b22:	d415      	bmi.n	8004b50 <_printf_i+0x218>
 8004b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b26:	68e0      	ldr	r0, [r4, #12]
 8004b28:	4298      	cmp	r0, r3
 8004b2a:	daa5      	bge.n	8004a78 <_printf_i+0x140>
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	e7a3      	b.n	8004a78 <_printf_i+0x140>
 8004b30:	0022      	movs	r2, r4
 8004b32:	2301      	movs	r3, #1
 8004b34:	9906      	ldr	r1, [sp, #24]
 8004b36:	9805      	ldr	r0, [sp, #20]
 8004b38:	9e07      	ldr	r6, [sp, #28]
 8004b3a:	3219      	adds	r2, #25
 8004b3c:	47b0      	blx	r6
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	d098      	beq.n	8004a74 <_printf_i+0x13c>
 8004b42:	3501      	adds	r5, #1
 8004b44:	68e3      	ldr	r3, [r4, #12]
 8004b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	42ab      	cmp	r3, r5
 8004b4c:	dcf0      	bgt.n	8004b30 <_printf_i+0x1f8>
 8004b4e:	e7e9      	b.n	8004b24 <_printf_i+0x1ec>
 8004b50:	2500      	movs	r5, #0
 8004b52:	e7f7      	b.n	8004b44 <_printf_i+0x20c>
 8004b54:	080057c5 	.word	0x080057c5
 8004b58:	080057d6 	.word	0x080057d6

08004b5c <_sbrk_r>:
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	b570      	push	{r4, r5, r6, lr}
 8004b60:	4d06      	ldr	r5, [pc, #24]	; (8004b7c <_sbrk_r+0x20>)
 8004b62:	0004      	movs	r4, r0
 8004b64:	0008      	movs	r0, r1
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	f7fc fbbe 	bl	80012e8 <_sbrk>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d103      	bne.n	8004b78 <_sbrk_r+0x1c>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d000      	beq.n	8004b78 <_sbrk_r+0x1c>
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	200004d0 	.word	0x200004d0

08004b80 <__swbuf_r>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	0005      	movs	r5, r0
 8004b84:	000e      	movs	r6, r1
 8004b86:	0014      	movs	r4, r2
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d004      	beq.n	8004b96 <__swbuf_r+0x16>
 8004b8c:	6983      	ldr	r3, [r0, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <__swbuf_r+0x16>
 8004b92:	f000 f9f9 	bl	8004f88 <__sinit>
 8004b96:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <__swbuf_r+0xa0>)
 8004b98:	429c      	cmp	r4, r3
 8004b9a:	d12e      	bne.n	8004bfa <__swbuf_r+0x7a>
 8004b9c:	686c      	ldr	r4, [r5, #4]
 8004b9e:	69a3      	ldr	r3, [r4, #24]
 8004ba0:	60a3      	str	r3, [r4, #8]
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	071b      	lsls	r3, r3, #28
 8004ba6:	d532      	bpl.n	8004c0e <__swbuf_r+0x8e>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d02f      	beq.n	8004c0e <__swbuf_r+0x8e>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	6922      	ldr	r2, [r4, #16]
 8004bb2:	b2f7      	uxtb	r7, r6
 8004bb4:	1a98      	subs	r0, r3, r2
 8004bb6:	6963      	ldr	r3, [r4, #20]
 8004bb8:	b2f6      	uxtb	r6, r6
 8004bba:	4283      	cmp	r3, r0
 8004bbc:	dc05      	bgt.n	8004bca <__swbuf_r+0x4a>
 8004bbe:	0021      	movs	r1, r4
 8004bc0:	0028      	movs	r0, r5
 8004bc2:	f000 f93f 	bl	8004e44 <_fflush_r>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d127      	bne.n	8004c1a <__swbuf_r+0x9a>
 8004bca:	68a3      	ldr	r3, [r4, #8]
 8004bcc:	3001      	adds	r0, #1
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	60a3      	str	r3, [r4, #8]
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	6022      	str	r2, [r4, #0]
 8004bd8:	701f      	strb	r7, [r3, #0]
 8004bda:	6963      	ldr	r3, [r4, #20]
 8004bdc:	4283      	cmp	r3, r0
 8004bde:	d004      	beq.n	8004bea <__swbuf_r+0x6a>
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	07db      	lsls	r3, r3, #31
 8004be4:	d507      	bpl.n	8004bf6 <__swbuf_r+0x76>
 8004be6:	2e0a      	cmp	r6, #10
 8004be8:	d105      	bne.n	8004bf6 <__swbuf_r+0x76>
 8004bea:	0021      	movs	r1, r4
 8004bec:	0028      	movs	r0, r5
 8004bee:	f000 f929 	bl	8004e44 <_fflush_r>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d111      	bne.n	8004c1a <__swbuf_r+0x9a>
 8004bf6:	0030      	movs	r0, r6
 8004bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <__swbuf_r+0xa4>)
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	d101      	bne.n	8004c04 <__swbuf_r+0x84>
 8004c00:	68ac      	ldr	r4, [r5, #8]
 8004c02:	e7cc      	b.n	8004b9e <__swbuf_r+0x1e>
 8004c04:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <__swbuf_r+0xa8>)
 8004c06:	429c      	cmp	r4, r3
 8004c08:	d1c9      	bne.n	8004b9e <__swbuf_r+0x1e>
 8004c0a:	68ec      	ldr	r4, [r5, #12]
 8004c0c:	e7c7      	b.n	8004b9e <__swbuf_r+0x1e>
 8004c0e:	0021      	movs	r1, r4
 8004c10:	0028      	movs	r0, r5
 8004c12:	f000 f80b 	bl	8004c2c <__swsetup_r>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d0c9      	beq.n	8004bae <__swbuf_r+0x2e>
 8004c1a:	2601      	movs	r6, #1
 8004c1c:	4276      	negs	r6, r6
 8004c1e:	e7ea      	b.n	8004bf6 <__swbuf_r+0x76>
 8004c20:	08005808 	.word	0x08005808
 8004c24:	08005828 	.word	0x08005828
 8004c28:	080057e8 	.word	0x080057e8

08004c2c <__swsetup_r>:
 8004c2c:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <__swsetup_r+0xe0>)
 8004c2e:	b570      	push	{r4, r5, r6, lr}
 8004c30:	681d      	ldr	r5, [r3, #0]
 8004c32:	0006      	movs	r6, r0
 8004c34:	000c      	movs	r4, r1
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	d005      	beq.n	8004c46 <__swsetup_r+0x1a>
 8004c3a:	69ab      	ldr	r3, [r5, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <__swsetup_r+0x1a>
 8004c40:	0028      	movs	r0, r5
 8004c42:	f000 f9a1 	bl	8004f88 <__sinit>
 8004c46:	4b32      	ldr	r3, [pc, #200]	; (8004d10 <__swsetup_r+0xe4>)
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	d10f      	bne.n	8004c6c <__swsetup_r+0x40>
 8004c4c:	686c      	ldr	r4, [r5, #4]
 8004c4e:	230c      	movs	r3, #12
 8004c50:	5ee2      	ldrsh	r2, [r4, r3]
 8004c52:	b293      	uxth	r3, r2
 8004c54:	0711      	lsls	r1, r2, #28
 8004c56:	d42d      	bmi.n	8004cb4 <__swsetup_r+0x88>
 8004c58:	06d9      	lsls	r1, r3, #27
 8004c5a:	d411      	bmi.n	8004c80 <__swsetup_r+0x54>
 8004c5c:	2309      	movs	r3, #9
 8004c5e:	2001      	movs	r0, #1
 8004c60:	6033      	str	r3, [r6, #0]
 8004c62:	3337      	adds	r3, #55	; 0x37
 8004c64:	4313      	orrs	r3, r2
 8004c66:	81a3      	strh	r3, [r4, #12]
 8004c68:	4240      	negs	r0, r0
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <__swsetup_r+0xe8>)
 8004c6e:	429c      	cmp	r4, r3
 8004c70:	d101      	bne.n	8004c76 <__swsetup_r+0x4a>
 8004c72:	68ac      	ldr	r4, [r5, #8]
 8004c74:	e7eb      	b.n	8004c4e <__swsetup_r+0x22>
 8004c76:	4b28      	ldr	r3, [pc, #160]	; (8004d18 <__swsetup_r+0xec>)
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d1e8      	bne.n	8004c4e <__swsetup_r+0x22>
 8004c7c:	68ec      	ldr	r4, [r5, #12]
 8004c7e:	e7e6      	b.n	8004c4e <__swsetup_r+0x22>
 8004c80:	075b      	lsls	r3, r3, #29
 8004c82:	d513      	bpl.n	8004cac <__swsetup_r+0x80>
 8004c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d008      	beq.n	8004c9c <__swsetup_r+0x70>
 8004c8a:	0023      	movs	r3, r4
 8004c8c:	3344      	adds	r3, #68	; 0x44
 8004c8e:	4299      	cmp	r1, r3
 8004c90:	d002      	beq.n	8004c98 <__swsetup_r+0x6c>
 8004c92:	0030      	movs	r0, r6
 8004c94:	f7ff fa3a 	bl	800410c <_free_r>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6363      	str	r3, [r4, #52]	; 0x34
 8004c9c:	2224      	movs	r2, #36	; 0x24
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	4393      	bics	r3, r2
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6063      	str	r3, [r4, #4]
 8004ca8:	6923      	ldr	r3, [r4, #16]
 8004caa:	6023      	str	r3, [r4, #0]
 8004cac:	2308      	movs	r3, #8
 8004cae:	89a2      	ldrh	r2, [r4, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	6923      	ldr	r3, [r4, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <__swsetup_r+0xa6>
 8004cba:	21a0      	movs	r1, #160	; 0xa0
 8004cbc:	2280      	movs	r2, #128	; 0x80
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	0089      	lsls	r1, r1, #2
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	400b      	ands	r3, r1
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <__swsetup_r+0xa6>
 8004cca:	0021      	movs	r1, r4
 8004ccc:	0030      	movs	r0, r6
 8004cce:	f000 fa27 	bl	8005120 <__smakebuf_r>
 8004cd2:	220c      	movs	r2, #12
 8004cd4:	5ea3      	ldrsh	r3, [r4, r2]
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	001a      	movs	r2, r3
 8004cda:	b299      	uxth	r1, r3
 8004cdc:	4002      	ands	r2, r0
 8004cde:	4203      	tst	r3, r0
 8004ce0:	d00f      	beq.n	8004d02 <__swsetup_r+0xd6>
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	60a2      	str	r2, [r4, #8]
 8004ce6:	6962      	ldr	r2, [r4, #20]
 8004ce8:	4252      	negs	r2, r2
 8004cea:	61a2      	str	r2, [r4, #24]
 8004cec:	2000      	movs	r0, #0
 8004cee:	6922      	ldr	r2, [r4, #16]
 8004cf0:	4282      	cmp	r2, r0
 8004cf2:	d1ba      	bne.n	8004c6a <__swsetup_r+0x3e>
 8004cf4:	060a      	lsls	r2, r1, #24
 8004cf6:	d5b8      	bpl.n	8004c6a <__swsetup_r+0x3e>
 8004cf8:	2240      	movs	r2, #64	; 0x40
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	81a3      	strh	r3, [r4, #12]
 8004cfe:	3801      	subs	r0, #1
 8004d00:	e7b3      	b.n	8004c6a <__swsetup_r+0x3e>
 8004d02:	0788      	lsls	r0, r1, #30
 8004d04:	d400      	bmi.n	8004d08 <__swsetup_r+0xdc>
 8004d06:	6962      	ldr	r2, [r4, #20]
 8004d08:	60a2      	str	r2, [r4, #8]
 8004d0a:	e7ef      	b.n	8004cec <__swsetup_r+0xc0>
 8004d0c:	20000090 	.word	0x20000090
 8004d10:	08005808 	.word	0x08005808
 8004d14:	08005828 	.word	0x08005828
 8004d18:	080057e8 	.word	0x080057e8

08004d1c <abort>:
 8004d1c:	2006      	movs	r0, #6
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	f000 fad4 	bl	80052cc <raise>
 8004d24:	2001      	movs	r0, #1
 8004d26:	f7fc fa6d 	bl	8001204 <_exit>
	...

08004d2c <__sflush_r>:
 8004d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d2e:	898b      	ldrh	r3, [r1, #12]
 8004d30:	0005      	movs	r5, r0
 8004d32:	000c      	movs	r4, r1
 8004d34:	071a      	lsls	r2, r3, #28
 8004d36:	d45f      	bmi.n	8004df8 <__sflush_r+0xcc>
 8004d38:	684a      	ldr	r2, [r1, #4]
 8004d3a:	2a00      	cmp	r2, #0
 8004d3c:	dc04      	bgt.n	8004d48 <__sflush_r+0x1c>
 8004d3e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004d40:	2a00      	cmp	r2, #0
 8004d42:	dc01      	bgt.n	8004d48 <__sflush_r+0x1c>
 8004d44:	2000      	movs	r0, #0
 8004d46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004d4a:	2f00      	cmp	r7, #0
 8004d4c:	d0fa      	beq.n	8004d44 <__sflush_r+0x18>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	682e      	ldr	r6, [r5, #0]
 8004d54:	602a      	str	r2, [r5, #0]
 8004d56:	001a      	movs	r2, r3
 8004d58:	0149      	lsls	r1, r1, #5
 8004d5a:	400a      	ands	r2, r1
 8004d5c:	420b      	tst	r3, r1
 8004d5e:	d034      	beq.n	8004dca <__sflush_r+0x9e>
 8004d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	075b      	lsls	r3, r3, #29
 8004d66:	d506      	bpl.n	8004d76 <__sflush_r+0x4a>
 8004d68:	6863      	ldr	r3, [r4, #4]
 8004d6a:	1ac0      	subs	r0, r0, r3
 8004d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <__sflush_r+0x4a>
 8004d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d74:	1ac0      	subs	r0, r0, r3
 8004d76:	0002      	movs	r2, r0
 8004d78:	6a21      	ldr	r1, [r4, #32]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004d80:	47b8      	blx	r7
 8004d82:	89a1      	ldrh	r1, [r4, #12]
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d106      	bne.n	8004d96 <__sflush_r+0x6a>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	2b1d      	cmp	r3, #29
 8004d8c:	d831      	bhi.n	8004df2 <__sflush_r+0xc6>
 8004d8e:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <__sflush_r+0x114>)
 8004d90:	40da      	lsrs	r2, r3
 8004d92:	07d3      	lsls	r3, r2, #31
 8004d94:	d52d      	bpl.n	8004df2 <__sflush_r+0xc6>
 8004d96:	2300      	movs	r3, #0
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	04cb      	lsls	r3, r1, #19
 8004da0:	d505      	bpl.n	8004dae <__sflush_r+0x82>
 8004da2:	1c43      	adds	r3, r0, #1
 8004da4:	d102      	bne.n	8004dac <__sflush_r+0x80>
 8004da6:	682b      	ldr	r3, [r5, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d100      	bne.n	8004dae <__sflush_r+0x82>
 8004dac:	6560      	str	r0, [r4, #84]	; 0x54
 8004dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004db0:	602e      	str	r6, [r5, #0]
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d0c6      	beq.n	8004d44 <__sflush_r+0x18>
 8004db6:	0023      	movs	r3, r4
 8004db8:	3344      	adds	r3, #68	; 0x44
 8004dba:	4299      	cmp	r1, r3
 8004dbc:	d002      	beq.n	8004dc4 <__sflush_r+0x98>
 8004dbe:	0028      	movs	r0, r5
 8004dc0:	f7ff f9a4 	bl	800410c <_free_r>
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	6360      	str	r0, [r4, #52]	; 0x34
 8004dc8:	e7bd      	b.n	8004d46 <__sflush_r+0x1a>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	0028      	movs	r0, r5
 8004dce:	6a21      	ldr	r1, [r4, #32]
 8004dd0:	47b8      	blx	r7
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	d1c5      	bne.n	8004d62 <__sflush_r+0x36>
 8004dd6:	682b      	ldr	r3, [r5, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0c2      	beq.n	8004d62 <__sflush_r+0x36>
 8004ddc:	2b1d      	cmp	r3, #29
 8004dde:	d001      	beq.n	8004de4 <__sflush_r+0xb8>
 8004de0:	2b16      	cmp	r3, #22
 8004de2:	d101      	bne.n	8004de8 <__sflush_r+0xbc>
 8004de4:	602e      	str	r6, [r5, #0]
 8004de6:	e7ad      	b.n	8004d44 <__sflush_r+0x18>
 8004de8:	2340      	movs	r3, #64	; 0x40
 8004dea:	89a2      	ldrh	r2, [r4, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	81a3      	strh	r3, [r4, #12]
 8004df0:	e7a9      	b.n	8004d46 <__sflush_r+0x1a>
 8004df2:	2340      	movs	r3, #64	; 0x40
 8004df4:	430b      	orrs	r3, r1
 8004df6:	e7fa      	b.n	8004dee <__sflush_r+0xc2>
 8004df8:	690f      	ldr	r7, [r1, #16]
 8004dfa:	2f00      	cmp	r7, #0
 8004dfc:	d0a2      	beq.n	8004d44 <__sflush_r+0x18>
 8004dfe:	680a      	ldr	r2, [r1, #0]
 8004e00:	600f      	str	r7, [r1, #0]
 8004e02:	1bd2      	subs	r2, r2, r7
 8004e04:	9201      	str	r2, [sp, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	079b      	lsls	r3, r3, #30
 8004e0a:	d100      	bne.n	8004e0e <__sflush_r+0xe2>
 8004e0c:	694a      	ldr	r2, [r1, #20]
 8004e0e:	60a2      	str	r2, [r4, #8]
 8004e10:	9b01      	ldr	r3, [sp, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dc00      	bgt.n	8004e18 <__sflush_r+0xec>
 8004e16:	e795      	b.n	8004d44 <__sflush_r+0x18>
 8004e18:	003a      	movs	r2, r7
 8004e1a:	0028      	movs	r0, r5
 8004e1c:	9b01      	ldr	r3, [sp, #4]
 8004e1e:	6a21      	ldr	r1, [r4, #32]
 8004e20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e22:	47b0      	blx	r6
 8004e24:	2800      	cmp	r0, #0
 8004e26:	dc06      	bgt.n	8004e36 <__sflush_r+0x10a>
 8004e28:	2340      	movs	r3, #64	; 0x40
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	89a2      	ldrh	r2, [r4, #12]
 8004e2e:	4240      	negs	r0, r0
 8004e30:	4313      	orrs	r3, r2
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	e787      	b.n	8004d46 <__sflush_r+0x1a>
 8004e36:	9b01      	ldr	r3, [sp, #4]
 8004e38:	183f      	adds	r7, r7, r0
 8004e3a:	1a1b      	subs	r3, r3, r0
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	e7e7      	b.n	8004e10 <__sflush_r+0xe4>
 8004e40:	20400001 	.word	0x20400001

08004e44 <_fflush_r>:
 8004e44:	690b      	ldr	r3, [r1, #16]
 8004e46:	b570      	push	{r4, r5, r6, lr}
 8004e48:	0005      	movs	r5, r0
 8004e4a:	000c      	movs	r4, r1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <_fflush_r+0x12>
 8004e50:	2500      	movs	r5, #0
 8004e52:	0028      	movs	r0, r5
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d004      	beq.n	8004e64 <_fflush_r+0x20>
 8004e5a:	6983      	ldr	r3, [r0, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <_fflush_r+0x20>
 8004e60:	f000 f892 	bl	8004f88 <__sinit>
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <_fflush_r+0x74>)
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d11b      	bne.n	8004ea2 <_fflush_r+0x5e>
 8004e6a:	686c      	ldr	r4, [r5, #4]
 8004e6c:	220c      	movs	r2, #12
 8004e6e:	5ea3      	ldrsh	r3, [r4, r2]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ed      	beq.n	8004e50 <_fflush_r+0xc>
 8004e74:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e76:	07d2      	lsls	r2, r2, #31
 8004e78:	d404      	bmi.n	8004e84 <_fflush_r+0x40>
 8004e7a:	059b      	lsls	r3, r3, #22
 8004e7c:	d402      	bmi.n	8004e84 <_fflush_r+0x40>
 8004e7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e80:	f000 f923 	bl	80050ca <__retarget_lock_acquire_recursive>
 8004e84:	0028      	movs	r0, r5
 8004e86:	0021      	movs	r1, r4
 8004e88:	f7ff ff50 	bl	8004d2c <__sflush_r>
 8004e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e8e:	0005      	movs	r5, r0
 8004e90:	07db      	lsls	r3, r3, #31
 8004e92:	d4de      	bmi.n	8004e52 <_fflush_r+0xe>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	059b      	lsls	r3, r3, #22
 8004e98:	d4db      	bmi.n	8004e52 <_fflush_r+0xe>
 8004e9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9c:	f000 f916 	bl	80050cc <__retarget_lock_release_recursive>
 8004ea0:	e7d7      	b.n	8004e52 <_fflush_r+0xe>
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <_fflush_r+0x78>)
 8004ea4:	429c      	cmp	r4, r3
 8004ea6:	d101      	bne.n	8004eac <_fflush_r+0x68>
 8004ea8:	68ac      	ldr	r4, [r5, #8]
 8004eaa:	e7df      	b.n	8004e6c <_fflush_r+0x28>
 8004eac:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <_fflush_r+0x7c>)
 8004eae:	429c      	cmp	r4, r3
 8004eb0:	d1dc      	bne.n	8004e6c <_fflush_r+0x28>
 8004eb2:	68ec      	ldr	r4, [r5, #12]
 8004eb4:	e7da      	b.n	8004e6c <_fflush_r+0x28>
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	08005808 	.word	0x08005808
 8004ebc:	08005828 	.word	0x08005828
 8004ec0:	080057e8 	.word	0x080057e8

08004ec4 <std>:
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	b510      	push	{r4, lr}
 8004ec8:	0004      	movs	r4, r0
 8004eca:	6003      	str	r3, [r0, #0]
 8004ecc:	6043      	str	r3, [r0, #4]
 8004ece:	6083      	str	r3, [r0, #8]
 8004ed0:	8181      	strh	r1, [r0, #12]
 8004ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ed4:	0019      	movs	r1, r3
 8004ed6:	81c2      	strh	r2, [r0, #14]
 8004ed8:	6103      	str	r3, [r0, #16]
 8004eda:	6143      	str	r3, [r0, #20]
 8004edc:	6183      	str	r3, [r0, #24]
 8004ede:	2208      	movs	r2, #8
 8004ee0:	305c      	adds	r0, #92	; 0x5c
 8004ee2:	f7ff f809 	bl	8003ef8 <memset>
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <std+0x38>)
 8004ee8:	6224      	str	r4, [r4, #32]
 8004eea:	6263      	str	r3, [r4, #36]	; 0x24
 8004eec:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <std+0x3c>)
 8004eee:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ef0:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <std+0x40>)
 8004ef2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ef4:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <std+0x44>)
 8004ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ef8:	bd10      	pop	{r4, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	0800530d 	.word	0x0800530d
 8004f00:	08005335 	.word	0x08005335
 8004f04:	0800536d 	.word	0x0800536d
 8004f08:	08005399 	.word	0x08005399

08004f0c <_cleanup_r>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	4902      	ldr	r1, [pc, #8]	; (8004f18 <_cleanup_r+0xc>)
 8004f10:	f000 f8ba 	bl	8005088 <_fwalk_reent>
 8004f14:	bd10      	pop	{r4, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	08004e45 	.word	0x08004e45

08004f1c <__sfmoreglue>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	2568      	movs	r5, #104	; 0x68
 8004f20:	1e4a      	subs	r2, r1, #1
 8004f22:	4355      	muls	r5, r2
 8004f24:	000e      	movs	r6, r1
 8004f26:	0029      	movs	r1, r5
 8004f28:	3174      	adds	r1, #116	; 0x74
 8004f2a:	f7ff f95b 	bl	80041e4 <_malloc_r>
 8004f2e:	1e04      	subs	r4, r0, #0
 8004f30:	d008      	beq.n	8004f44 <__sfmoreglue+0x28>
 8004f32:	2100      	movs	r1, #0
 8004f34:	002a      	movs	r2, r5
 8004f36:	6001      	str	r1, [r0, #0]
 8004f38:	6046      	str	r6, [r0, #4]
 8004f3a:	300c      	adds	r0, #12
 8004f3c:	60a0      	str	r0, [r4, #8]
 8004f3e:	3268      	adds	r2, #104	; 0x68
 8004f40:	f7fe ffda 	bl	8003ef8 <memset>
 8004f44:	0020      	movs	r0, r4
 8004f46:	bd70      	pop	{r4, r5, r6, pc}

08004f48 <__sfp_lock_acquire>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	4802      	ldr	r0, [pc, #8]	; (8004f54 <__sfp_lock_acquire+0xc>)
 8004f4c:	f000 f8bd 	bl	80050ca <__retarget_lock_acquire_recursive>
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	200004cd 	.word	0x200004cd

08004f58 <__sfp_lock_release>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	4802      	ldr	r0, [pc, #8]	; (8004f64 <__sfp_lock_release+0xc>)
 8004f5c:	f000 f8b6 	bl	80050cc <__retarget_lock_release_recursive>
 8004f60:	bd10      	pop	{r4, pc}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	200004cd 	.word	0x200004cd

08004f68 <__sinit_lock_acquire>:
 8004f68:	b510      	push	{r4, lr}
 8004f6a:	4802      	ldr	r0, [pc, #8]	; (8004f74 <__sinit_lock_acquire+0xc>)
 8004f6c:	f000 f8ad 	bl	80050ca <__retarget_lock_acquire_recursive>
 8004f70:	bd10      	pop	{r4, pc}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	200004ce 	.word	0x200004ce

08004f78 <__sinit_lock_release>:
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	4802      	ldr	r0, [pc, #8]	; (8004f84 <__sinit_lock_release+0xc>)
 8004f7c:	f000 f8a6 	bl	80050cc <__retarget_lock_release_recursive>
 8004f80:	bd10      	pop	{r4, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	200004ce 	.word	0x200004ce

08004f88 <__sinit>:
 8004f88:	b513      	push	{r0, r1, r4, lr}
 8004f8a:	0004      	movs	r4, r0
 8004f8c:	f7ff ffec 	bl	8004f68 <__sinit_lock_acquire>
 8004f90:	69a3      	ldr	r3, [r4, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <__sinit+0x14>
 8004f96:	f7ff ffef 	bl	8004f78 <__sinit_lock_release>
 8004f9a:	bd13      	pop	{r0, r1, r4, pc}
 8004f9c:	64a3      	str	r3, [r4, #72]	; 0x48
 8004f9e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <__sinit+0x68>)
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <__sinit+0x6c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	42a3      	cmp	r3, r4
 8004fae:	d101      	bne.n	8004fb4 <__sinit+0x2c>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	61a3      	str	r3, [r4, #24]
 8004fb4:	0020      	movs	r0, r4
 8004fb6:	f000 f81f 	bl	8004ff8 <__sfp>
 8004fba:	6060      	str	r0, [r4, #4]
 8004fbc:	0020      	movs	r0, r4
 8004fbe:	f000 f81b 	bl	8004ff8 <__sfp>
 8004fc2:	60a0      	str	r0, [r4, #8]
 8004fc4:	0020      	movs	r0, r4
 8004fc6:	f000 f817 	bl	8004ff8 <__sfp>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2104      	movs	r1, #4
 8004fce:	60e0      	str	r0, [r4, #12]
 8004fd0:	6860      	ldr	r0, [r4, #4]
 8004fd2:	f7ff ff77 	bl	8004ec4 <std>
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	2109      	movs	r1, #9
 8004fda:	68a0      	ldr	r0, [r4, #8]
 8004fdc:	f7ff ff72 	bl	8004ec4 <std>
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	2112      	movs	r1, #18
 8004fe4:	68e0      	ldr	r0, [r4, #12]
 8004fe6:	f7ff ff6d 	bl	8004ec4 <std>
 8004fea:	2301      	movs	r3, #1
 8004fec:	61a3      	str	r3, [r4, #24]
 8004fee:	e7d2      	b.n	8004f96 <__sinit+0xe>
 8004ff0:	08005700 	.word	0x08005700
 8004ff4:	08004f0d 	.word	0x08004f0d

08004ff8 <__sfp>:
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	0007      	movs	r7, r0
 8004ffc:	f7ff ffa4 	bl	8004f48 <__sfp_lock_acquire>
 8005000:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <__sfp+0x88>)
 8005002:	681e      	ldr	r6, [r3, #0]
 8005004:	69b3      	ldr	r3, [r6, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d102      	bne.n	8005010 <__sfp+0x18>
 800500a:	0030      	movs	r0, r6
 800500c:	f7ff ffbc 	bl	8004f88 <__sinit>
 8005010:	3648      	adds	r6, #72	; 0x48
 8005012:	68b4      	ldr	r4, [r6, #8]
 8005014:	6873      	ldr	r3, [r6, #4]
 8005016:	3b01      	subs	r3, #1
 8005018:	d504      	bpl.n	8005024 <__sfp+0x2c>
 800501a:	6833      	ldr	r3, [r6, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d022      	beq.n	8005066 <__sfp+0x6e>
 8005020:	6836      	ldr	r6, [r6, #0]
 8005022:	e7f6      	b.n	8005012 <__sfp+0x1a>
 8005024:	220c      	movs	r2, #12
 8005026:	5ea5      	ldrsh	r5, [r4, r2]
 8005028:	2d00      	cmp	r5, #0
 800502a:	d11a      	bne.n	8005062 <__sfp+0x6a>
 800502c:	0020      	movs	r0, r4
 800502e:	4b15      	ldr	r3, [pc, #84]	; (8005084 <__sfp+0x8c>)
 8005030:	3058      	adds	r0, #88	; 0x58
 8005032:	60e3      	str	r3, [r4, #12]
 8005034:	6665      	str	r5, [r4, #100]	; 0x64
 8005036:	f000 f847 	bl	80050c8 <__retarget_lock_init_recursive>
 800503a:	f7ff ff8d 	bl	8004f58 <__sfp_lock_release>
 800503e:	0020      	movs	r0, r4
 8005040:	2208      	movs	r2, #8
 8005042:	0029      	movs	r1, r5
 8005044:	6025      	str	r5, [r4, #0]
 8005046:	60a5      	str	r5, [r4, #8]
 8005048:	6065      	str	r5, [r4, #4]
 800504a:	6125      	str	r5, [r4, #16]
 800504c:	6165      	str	r5, [r4, #20]
 800504e:	61a5      	str	r5, [r4, #24]
 8005050:	305c      	adds	r0, #92	; 0x5c
 8005052:	f7fe ff51 	bl	8003ef8 <memset>
 8005056:	6365      	str	r5, [r4, #52]	; 0x34
 8005058:	63a5      	str	r5, [r4, #56]	; 0x38
 800505a:	64a5      	str	r5, [r4, #72]	; 0x48
 800505c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800505e:	0020      	movs	r0, r4
 8005060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005062:	3468      	adds	r4, #104	; 0x68
 8005064:	e7d7      	b.n	8005016 <__sfp+0x1e>
 8005066:	2104      	movs	r1, #4
 8005068:	0038      	movs	r0, r7
 800506a:	f7ff ff57 	bl	8004f1c <__sfmoreglue>
 800506e:	1e04      	subs	r4, r0, #0
 8005070:	6030      	str	r0, [r6, #0]
 8005072:	d1d5      	bne.n	8005020 <__sfp+0x28>
 8005074:	f7ff ff70 	bl	8004f58 <__sfp_lock_release>
 8005078:	230c      	movs	r3, #12
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	e7ef      	b.n	800505e <__sfp+0x66>
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	08005700 	.word	0x08005700
 8005084:	ffff0001 	.word	0xffff0001

08005088 <_fwalk_reent>:
 8005088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800508a:	0004      	movs	r4, r0
 800508c:	0006      	movs	r6, r0
 800508e:	2700      	movs	r7, #0
 8005090:	9101      	str	r1, [sp, #4]
 8005092:	3448      	adds	r4, #72	; 0x48
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	68a5      	ldr	r5, [r4, #8]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	9b00      	ldr	r3, [sp, #0]
 800509c:	3b01      	subs	r3, #1
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	d504      	bpl.n	80050ac <_fwalk_reent+0x24>
 80050a2:	6824      	ldr	r4, [r4, #0]
 80050a4:	2c00      	cmp	r4, #0
 80050a6:	d1f5      	bne.n	8005094 <_fwalk_reent+0xc>
 80050a8:	0038      	movs	r0, r7
 80050aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050ac:	89ab      	ldrh	r3, [r5, #12]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d908      	bls.n	80050c4 <_fwalk_reent+0x3c>
 80050b2:	220e      	movs	r2, #14
 80050b4:	5eab      	ldrsh	r3, [r5, r2]
 80050b6:	3301      	adds	r3, #1
 80050b8:	d004      	beq.n	80050c4 <_fwalk_reent+0x3c>
 80050ba:	0029      	movs	r1, r5
 80050bc:	0030      	movs	r0, r6
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	4798      	blx	r3
 80050c2:	4307      	orrs	r7, r0
 80050c4:	3568      	adds	r5, #104	; 0x68
 80050c6:	e7e8      	b.n	800509a <_fwalk_reent+0x12>

080050c8 <__retarget_lock_init_recursive>:
 80050c8:	4770      	bx	lr

080050ca <__retarget_lock_acquire_recursive>:
 80050ca:	4770      	bx	lr

080050cc <__retarget_lock_release_recursive>:
 80050cc:	4770      	bx	lr
	...

080050d0 <__swhatbuf_r>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	000e      	movs	r6, r1
 80050d4:	001d      	movs	r5, r3
 80050d6:	230e      	movs	r3, #14
 80050d8:	5ec9      	ldrsh	r1, [r1, r3]
 80050da:	0014      	movs	r4, r2
 80050dc:	b096      	sub	sp, #88	; 0x58
 80050de:	2900      	cmp	r1, #0
 80050e0:	da08      	bge.n	80050f4 <__swhatbuf_r+0x24>
 80050e2:	220c      	movs	r2, #12
 80050e4:	5eb3      	ldrsh	r3, [r6, r2]
 80050e6:	2200      	movs	r2, #0
 80050e8:	602a      	str	r2, [r5, #0]
 80050ea:	061b      	lsls	r3, r3, #24
 80050ec:	d411      	bmi.n	8005112 <__swhatbuf_r+0x42>
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	e00f      	b.n	8005114 <__swhatbuf_r+0x44>
 80050f4:	466a      	mov	r2, sp
 80050f6:	f000 f97b 	bl	80053f0 <_fstat_r>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	dbf1      	blt.n	80050e2 <__swhatbuf_r+0x12>
 80050fe:	23f0      	movs	r3, #240	; 0xf0
 8005100:	9901      	ldr	r1, [sp, #4]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	4019      	ands	r1, r3
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <__swhatbuf_r+0x4c>)
 8005108:	18c9      	adds	r1, r1, r3
 800510a:	424b      	negs	r3, r1
 800510c:	4159      	adcs	r1, r3
 800510e:	6029      	str	r1, [r5, #0]
 8005110:	e7ed      	b.n	80050ee <__swhatbuf_r+0x1e>
 8005112:	2340      	movs	r3, #64	; 0x40
 8005114:	2000      	movs	r0, #0
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	b016      	add	sp, #88	; 0x58
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	ffffe000 	.word	0xffffe000

08005120 <__smakebuf_r>:
 8005120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005122:	2602      	movs	r6, #2
 8005124:	898b      	ldrh	r3, [r1, #12]
 8005126:	0005      	movs	r5, r0
 8005128:	000c      	movs	r4, r1
 800512a:	4233      	tst	r3, r6
 800512c:	d006      	beq.n	800513c <__smakebuf_r+0x1c>
 800512e:	0023      	movs	r3, r4
 8005130:	3347      	adds	r3, #71	; 0x47
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	2301      	movs	r3, #1
 8005138:	6163      	str	r3, [r4, #20]
 800513a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800513c:	466a      	mov	r2, sp
 800513e:	ab01      	add	r3, sp, #4
 8005140:	f7ff ffc6 	bl	80050d0 <__swhatbuf_r>
 8005144:	9900      	ldr	r1, [sp, #0]
 8005146:	0007      	movs	r7, r0
 8005148:	0028      	movs	r0, r5
 800514a:	f7ff f84b 	bl	80041e4 <_malloc_r>
 800514e:	2800      	cmp	r0, #0
 8005150:	d108      	bne.n	8005164 <__smakebuf_r+0x44>
 8005152:	220c      	movs	r2, #12
 8005154:	5ea3      	ldrsh	r3, [r4, r2]
 8005156:	059a      	lsls	r2, r3, #22
 8005158:	d4ef      	bmi.n	800513a <__smakebuf_r+0x1a>
 800515a:	2203      	movs	r2, #3
 800515c:	4393      	bics	r3, r2
 800515e:	431e      	orrs	r6, r3
 8005160:	81a6      	strh	r6, [r4, #12]
 8005162:	e7e4      	b.n	800512e <__smakebuf_r+0xe>
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <__smakebuf_r+0x84>)
 8005166:	62ab      	str	r3, [r5, #40]	; 0x28
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	89a2      	ldrh	r2, [r4, #12]
 800516c:	6020      	str	r0, [r4, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	9b00      	ldr	r3, [sp, #0]
 8005174:	6120      	str	r0, [r4, #16]
 8005176:	6163      	str	r3, [r4, #20]
 8005178:	9b01      	ldr	r3, [sp, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <__smakebuf_r+0x7a>
 800517e:	0028      	movs	r0, r5
 8005180:	230e      	movs	r3, #14
 8005182:	5ee1      	ldrsh	r1, [r4, r3]
 8005184:	f000 f946 	bl	8005414 <_isatty_r>
 8005188:	2800      	cmp	r0, #0
 800518a:	d006      	beq.n	800519a <__smakebuf_r+0x7a>
 800518c:	2203      	movs	r2, #3
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	4393      	bics	r3, r2
 8005192:	001a      	movs	r2, r3
 8005194:	2301      	movs	r3, #1
 8005196:	4313      	orrs	r3, r2
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	89a0      	ldrh	r0, [r4, #12]
 800519c:	4307      	orrs	r7, r0
 800519e:	81a7      	strh	r7, [r4, #12]
 80051a0:	e7cb      	b.n	800513a <__smakebuf_r+0x1a>
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	08004f0d 	.word	0x08004f0d

080051a8 <memchr>:
 80051a8:	b2c9      	uxtb	r1, r1
 80051aa:	1882      	adds	r2, r0, r2
 80051ac:	4290      	cmp	r0, r2
 80051ae:	d101      	bne.n	80051b4 <memchr+0xc>
 80051b0:	2000      	movs	r0, #0
 80051b2:	4770      	bx	lr
 80051b4:	7803      	ldrb	r3, [r0, #0]
 80051b6:	428b      	cmp	r3, r1
 80051b8:	d0fb      	beq.n	80051b2 <memchr+0xa>
 80051ba:	3001      	adds	r0, #1
 80051bc:	e7f6      	b.n	80051ac <memchr+0x4>

080051be <memcpy>:
 80051be:	2300      	movs	r3, #0
 80051c0:	b510      	push	{r4, lr}
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d100      	bne.n	80051c8 <memcpy+0xa>
 80051c6:	bd10      	pop	{r4, pc}
 80051c8:	5ccc      	ldrb	r4, [r1, r3]
 80051ca:	54c4      	strb	r4, [r0, r3]
 80051cc:	3301      	adds	r3, #1
 80051ce:	e7f8      	b.n	80051c2 <memcpy+0x4>

080051d0 <memmove>:
 80051d0:	b510      	push	{r4, lr}
 80051d2:	4288      	cmp	r0, r1
 80051d4:	d902      	bls.n	80051dc <memmove+0xc>
 80051d6:	188b      	adds	r3, r1, r2
 80051d8:	4298      	cmp	r0, r3
 80051da:	d303      	bcc.n	80051e4 <memmove+0x14>
 80051dc:	2300      	movs	r3, #0
 80051de:	e007      	b.n	80051f0 <memmove+0x20>
 80051e0:	5c8b      	ldrb	r3, [r1, r2]
 80051e2:	5483      	strb	r3, [r0, r2]
 80051e4:	3a01      	subs	r2, #1
 80051e6:	d2fb      	bcs.n	80051e0 <memmove+0x10>
 80051e8:	bd10      	pop	{r4, pc}
 80051ea:	5ccc      	ldrb	r4, [r1, r3]
 80051ec:	54c4      	strb	r4, [r0, r3]
 80051ee:	3301      	adds	r3, #1
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d1fa      	bne.n	80051ea <memmove+0x1a>
 80051f4:	e7f8      	b.n	80051e8 <memmove+0x18>
	...

080051f8 <__malloc_lock>:
 80051f8:	b510      	push	{r4, lr}
 80051fa:	4802      	ldr	r0, [pc, #8]	; (8005204 <__malloc_lock+0xc>)
 80051fc:	f7ff ff65 	bl	80050ca <__retarget_lock_acquire_recursive>
 8005200:	bd10      	pop	{r4, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	200004cc 	.word	0x200004cc

08005208 <__malloc_unlock>:
 8005208:	b510      	push	{r4, lr}
 800520a:	4802      	ldr	r0, [pc, #8]	; (8005214 <__malloc_unlock+0xc>)
 800520c:	f7ff ff5e 	bl	80050cc <__retarget_lock_release_recursive>
 8005210:	bd10      	pop	{r4, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	200004cc 	.word	0x200004cc

08005218 <_realloc_r>:
 8005218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800521a:	0007      	movs	r7, r0
 800521c:	000e      	movs	r6, r1
 800521e:	0014      	movs	r4, r2
 8005220:	2900      	cmp	r1, #0
 8005222:	d105      	bne.n	8005230 <_realloc_r+0x18>
 8005224:	0011      	movs	r1, r2
 8005226:	f7fe ffdd 	bl	80041e4 <_malloc_r>
 800522a:	0005      	movs	r5, r0
 800522c:	0028      	movs	r0, r5
 800522e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005230:	2a00      	cmp	r2, #0
 8005232:	d103      	bne.n	800523c <_realloc_r+0x24>
 8005234:	f7fe ff6a 	bl	800410c <_free_r>
 8005238:	0025      	movs	r5, r4
 800523a:	e7f7      	b.n	800522c <_realloc_r+0x14>
 800523c:	f000 f910 	bl	8005460 <_malloc_usable_size_r>
 8005240:	9001      	str	r0, [sp, #4]
 8005242:	4284      	cmp	r4, r0
 8005244:	d803      	bhi.n	800524e <_realloc_r+0x36>
 8005246:	0035      	movs	r5, r6
 8005248:	0843      	lsrs	r3, r0, #1
 800524a:	42a3      	cmp	r3, r4
 800524c:	d3ee      	bcc.n	800522c <_realloc_r+0x14>
 800524e:	0021      	movs	r1, r4
 8005250:	0038      	movs	r0, r7
 8005252:	f7fe ffc7 	bl	80041e4 <_malloc_r>
 8005256:	1e05      	subs	r5, r0, #0
 8005258:	d0e8      	beq.n	800522c <_realloc_r+0x14>
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	0022      	movs	r2, r4
 800525e:	429c      	cmp	r4, r3
 8005260:	d900      	bls.n	8005264 <_realloc_r+0x4c>
 8005262:	001a      	movs	r2, r3
 8005264:	0031      	movs	r1, r6
 8005266:	0028      	movs	r0, r5
 8005268:	f7ff ffa9 	bl	80051be <memcpy>
 800526c:	0031      	movs	r1, r6
 800526e:	0038      	movs	r0, r7
 8005270:	f7fe ff4c 	bl	800410c <_free_r>
 8005274:	e7da      	b.n	800522c <_realloc_r+0x14>

08005276 <_raise_r>:
 8005276:	b570      	push	{r4, r5, r6, lr}
 8005278:	0004      	movs	r4, r0
 800527a:	000d      	movs	r5, r1
 800527c:	291f      	cmp	r1, #31
 800527e:	d904      	bls.n	800528a <_raise_r+0x14>
 8005280:	2316      	movs	r3, #22
 8005282:	6003      	str	r3, [r0, #0]
 8005284:	2001      	movs	r0, #1
 8005286:	4240      	negs	r0, r0
 8005288:	bd70      	pop	{r4, r5, r6, pc}
 800528a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <_raise_r+0x24>
 8005290:	008a      	lsls	r2, r1, #2
 8005292:	189b      	adds	r3, r3, r2
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	2a00      	cmp	r2, #0
 8005298:	d108      	bne.n	80052ac <_raise_r+0x36>
 800529a:	0020      	movs	r0, r4
 800529c:	f000 f832 	bl	8005304 <_getpid_r>
 80052a0:	002a      	movs	r2, r5
 80052a2:	0001      	movs	r1, r0
 80052a4:	0020      	movs	r0, r4
 80052a6:	f000 f81b 	bl	80052e0 <_kill_r>
 80052aa:	e7ed      	b.n	8005288 <_raise_r+0x12>
 80052ac:	2000      	movs	r0, #0
 80052ae:	2a01      	cmp	r2, #1
 80052b0:	d0ea      	beq.n	8005288 <_raise_r+0x12>
 80052b2:	1c51      	adds	r1, r2, #1
 80052b4:	d103      	bne.n	80052be <_raise_r+0x48>
 80052b6:	2316      	movs	r3, #22
 80052b8:	3001      	adds	r0, #1
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	e7e4      	b.n	8005288 <_raise_r+0x12>
 80052be:	2400      	movs	r4, #0
 80052c0:	0028      	movs	r0, r5
 80052c2:	601c      	str	r4, [r3, #0]
 80052c4:	4790      	blx	r2
 80052c6:	0020      	movs	r0, r4
 80052c8:	e7de      	b.n	8005288 <_raise_r+0x12>
	...

080052cc <raise>:
 80052cc:	b510      	push	{r4, lr}
 80052ce:	4b03      	ldr	r3, [pc, #12]	; (80052dc <raise+0x10>)
 80052d0:	0001      	movs	r1, r0
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	f7ff ffcf 	bl	8005276 <_raise_r>
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	20000090 	.word	0x20000090

080052e0 <_kill_r>:
 80052e0:	2300      	movs	r3, #0
 80052e2:	b570      	push	{r4, r5, r6, lr}
 80052e4:	4d06      	ldr	r5, [pc, #24]	; (8005300 <_kill_r+0x20>)
 80052e6:	0004      	movs	r4, r0
 80052e8:	0008      	movs	r0, r1
 80052ea:	0011      	movs	r1, r2
 80052ec:	602b      	str	r3, [r5, #0]
 80052ee:	f7fb ff79 	bl	80011e4 <_kill>
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	d103      	bne.n	80052fe <_kill_r+0x1e>
 80052f6:	682b      	ldr	r3, [r5, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d000      	beq.n	80052fe <_kill_r+0x1e>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	200004d0 	.word	0x200004d0

08005304 <_getpid_r>:
 8005304:	b510      	push	{r4, lr}
 8005306:	f7fb ff67 	bl	80011d8 <_getpid>
 800530a:	bd10      	pop	{r4, pc}

0800530c <__sread>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	000c      	movs	r4, r1
 8005310:	250e      	movs	r5, #14
 8005312:	5f49      	ldrsh	r1, [r1, r5]
 8005314:	f000 f8ac 	bl	8005470 <_read_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	db03      	blt.n	8005324 <__sread+0x18>
 800531c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800531e:	181b      	adds	r3, r3, r0
 8005320:	6563      	str	r3, [r4, #84]	; 0x54
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	4a02      	ldr	r2, [pc, #8]	; (8005330 <__sread+0x24>)
 8005328:	4013      	ands	r3, r2
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	e7f9      	b.n	8005322 <__sread+0x16>
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	ffffefff 	.word	0xffffefff

08005334 <__swrite>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	001f      	movs	r7, r3
 8005338:	898b      	ldrh	r3, [r1, #12]
 800533a:	0005      	movs	r5, r0
 800533c:	000c      	movs	r4, r1
 800533e:	0016      	movs	r6, r2
 8005340:	05db      	lsls	r3, r3, #23
 8005342:	d505      	bpl.n	8005350 <__swrite+0x1c>
 8005344:	230e      	movs	r3, #14
 8005346:	5ec9      	ldrsh	r1, [r1, r3]
 8005348:	2200      	movs	r2, #0
 800534a:	2302      	movs	r3, #2
 800534c:	f000 f874 	bl	8005438 <_lseek_r>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	4a05      	ldr	r2, [pc, #20]	; (8005368 <__swrite+0x34>)
 8005354:	0028      	movs	r0, r5
 8005356:	4013      	ands	r3, r2
 8005358:	81a3      	strh	r3, [r4, #12]
 800535a:	0032      	movs	r2, r6
 800535c:	230e      	movs	r3, #14
 800535e:	5ee1      	ldrsh	r1, [r4, r3]
 8005360:	003b      	movs	r3, r7
 8005362:	f000 f81f 	bl	80053a4 <_write_r>
 8005366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005368:	ffffefff 	.word	0xffffefff

0800536c <__sseek>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	000c      	movs	r4, r1
 8005370:	250e      	movs	r5, #14
 8005372:	5f49      	ldrsh	r1, [r1, r5]
 8005374:	f000 f860 	bl	8005438 <_lseek_r>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	1c42      	adds	r2, r0, #1
 800537c:	d103      	bne.n	8005386 <__sseek+0x1a>
 800537e:	4a05      	ldr	r2, [pc, #20]	; (8005394 <__sseek+0x28>)
 8005380:	4013      	ands	r3, r2
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	bd70      	pop	{r4, r5, r6, pc}
 8005386:	2280      	movs	r2, #128	; 0x80
 8005388:	0152      	lsls	r2, r2, #5
 800538a:	4313      	orrs	r3, r2
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	6560      	str	r0, [r4, #84]	; 0x54
 8005390:	e7f8      	b.n	8005384 <__sseek+0x18>
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	ffffefff 	.word	0xffffefff

08005398 <__sclose>:
 8005398:	b510      	push	{r4, lr}
 800539a:	230e      	movs	r3, #14
 800539c:	5ec9      	ldrsh	r1, [r1, r3]
 800539e:	f000 f815 	bl	80053cc <_close_r>
 80053a2:	bd10      	pop	{r4, pc}

080053a4 <_write_r>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	0004      	movs	r4, r0
 80053a8:	0008      	movs	r0, r1
 80053aa:	0011      	movs	r1, r2
 80053ac:	001a      	movs	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	4d05      	ldr	r5, [pc, #20]	; (80053c8 <_write_r+0x24>)
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	f7fb ff4f 	bl	8001256 <_write>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d103      	bne.n	80053c4 <_write_r+0x20>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d000      	beq.n	80053c4 <_write_r+0x20>
 80053c2:	6023      	str	r3, [r4, #0]
 80053c4:	bd70      	pop	{r4, r5, r6, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	200004d0 	.word	0x200004d0

080053cc <_close_r>:
 80053cc:	2300      	movs	r3, #0
 80053ce:	b570      	push	{r4, r5, r6, lr}
 80053d0:	4d06      	ldr	r5, [pc, #24]	; (80053ec <_close_r+0x20>)
 80053d2:	0004      	movs	r4, r0
 80053d4:	0008      	movs	r0, r1
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	f7fb ff59 	bl	800128e <_close>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d103      	bne.n	80053e8 <_close_r+0x1c>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d000      	beq.n	80053e8 <_close_r+0x1c>
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	bd70      	pop	{r4, r5, r6, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	200004d0 	.word	0x200004d0

080053f0 <_fstat_r>:
 80053f0:	2300      	movs	r3, #0
 80053f2:	b570      	push	{r4, r5, r6, lr}
 80053f4:	4d06      	ldr	r5, [pc, #24]	; (8005410 <_fstat_r+0x20>)
 80053f6:	0004      	movs	r4, r0
 80053f8:	0008      	movs	r0, r1
 80053fa:	0011      	movs	r1, r2
 80053fc:	602b      	str	r3, [r5, #0]
 80053fe:	f7fb ff50 	bl	80012a2 <_fstat>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d103      	bne.n	800540e <_fstat_r+0x1e>
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d000      	beq.n	800540e <_fstat_r+0x1e>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	200004d0 	.word	0x200004d0

08005414 <_isatty_r>:
 8005414:	2300      	movs	r3, #0
 8005416:	b570      	push	{r4, r5, r6, lr}
 8005418:	4d06      	ldr	r5, [pc, #24]	; (8005434 <_isatty_r+0x20>)
 800541a:	0004      	movs	r4, r0
 800541c:	0008      	movs	r0, r1
 800541e:	602b      	str	r3, [r5, #0]
 8005420:	f7fb ff4d 	bl	80012be <_isatty>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d103      	bne.n	8005430 <_isatty_r+0x1c>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d000      	beq.n	8005430 <_isatty_r+0x1c>
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	bd70      	pop	{r4, r5, r6, pc}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	200004d0 	.word	0x200004d0

08005438 <_lseek_r>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	0004      	movs	r4, r0
 800543c:	0008      	movs	r0, r1
 800543e:	0011      	movs	r1, r2
 8005440:	001a      	movs	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	4d05      	ldr	r5, [pc, #20]	; (800545c <_lseek_r+0x24>)
 8005446:	602b      	str	r3, [r5, #0]
 8005448:	f7fb ff42 	bl	80012d0 <_lseek>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d103      	bne.n	8005458 <_lseek_r+0x20>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d000      	beq.n	8005458 <_lseek_r+0x20>
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	bd70      	pop	{r4, r5, r6, pc}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	200004d0 	.word	0x200004d0

08005460 <_malloc_usable_size_r>:
 8005460:	1f0b      	subs	r3, r1, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	1f18      	subs	r0, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	da01      	bge.n	800546e <_malloc_usable_size_r+0xe>
 800546a:	580b      	ldr	r3, [r1, r0]
 800546c:	18c0      	adds	r0, r0, r3
 800546e:	4770      	bx	lr

08005470 <_read_r>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	0004      	movs	r4, r0
 8005474:	0008      	movs	r0, r1
 8005476:	0011      	movs	r1, r2
 8005478:	001a      	movs	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	4d05      	ldr	r5, [pc, #20]	; (8005494 <_read_r+0x24>)
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	f7fb fecc 	bl	800121c <_read>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d103      	bne.n	8005490 <_read_r+0x20>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d000      	beq.n	8005490 <_read_r+0x20>
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	bd70      	pop	{r4, r5, r6, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	200004d0 	.word	0x200004d0

08005498 <_init>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr

080054a4 <_fini>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr
