
Test_Swarm_002-Polling_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005788  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be8  08005be8  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf0  08005bf0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08005bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000100  08005cf8  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08005cf8  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ce7  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae6  00000000  00000000  00034e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  000378f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00038b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188c4  00000000  00000000  00039c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fcd  00000000  00000000  00052524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b2ce  00000000  00000000  000674f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001027bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  00102810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800582c 	.word	0x0800582c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	0800582c 	.word	0x0800582c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 ff07 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f959 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fa85 	bl	8000b5c <MX_GPIO_Init>
  MX_RTC_Init();
 8000652:	f000 f9ab 	bl	80009ac <MX_RTC_Init>
  MX_TIM14_Init();
 8000656:	f000 f9e1 	bl	8000a1c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 800065a:	f000 fa31 	bl	8000ac0 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800065e:	f000 fa05 	bl	8000a6c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000662:	4b7c      	ldr	r3, [pc, #496]	; (8000854 <main+0x214>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2202      	movs	r2, #2
 8000668:	4252      	negs	r2, r2
 800066a:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT ( &htim16 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 800066c:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <main+0x218>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2202      	movs	r2, #2
 8000672:	4252      	negs	r2, r2
 8000674:	611a      	str	r2, [r3, #16]
  //wait_for_tim16x ( 2 ) ;

  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 8000676:	4b79      	ldr	r3, [pc, #484]	; (800085c <main+0x21c>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	4b79      	ldr	r3, [pc, #484]	; (8000860 <main+0x220>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2201      	movs	r2, #1
 8000680:	0019      	movs	r1, r3
 8000682:	f000 faaf 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 1 )
 8000686:	4b77      	ldr	r3, [pc, #476]	; (8000864 <main+0x224>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d107      	bne.n	800069e <main+0x5e>
	  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 800068e:	4b76      	ldr	r3, [pc, #472]	; (8000868 <main+0x228>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	4b76      	ldr	r3, [pc, #472]	; (800086c <main+0x22c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2202      	movs	r2, #2
 8000698:	0019      	movs	r1, r3
 800069a:	f000 faa3 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 2 )
 800069e:	4b71      	ldr	r3, [pc, #452]	; (8000864 <main+0x224>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d107      	bne.n	80006b6 <main+0x76>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006a6:	4b72      	ldr	r3, [pc, #456]	; (8000870 <main+0x230>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	4b72      	ldr	r3, [pc, #456]	; (8000874 <main+0x234>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2203      	movs	r2, #3
 80006b0:	0019      	movs	r1, r3
 80006b2:	f000 fa97 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 3 )
 80006b6:	4b6b      	ldr	r3, [pc, #428]	; (8000864 <main+0x224>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d107      	bne.n	80006ce <main+0x8e>
	  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006be:	4b6e      	ldr	r3, [pc, #440]	; (8000878 <main+0x238>)
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	4b6e      	ldr	r3, [pc, #440]	; (800087c <main+0x23c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2204      	movs	r2, #4
 80006c8:	0019      	movs	r1, r3
 80006ca:	f000 fa8b 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 4 )
 80006ce:	4b65      	ldr	r3, [pc, #404]	; (8000864 <main+0x224>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d107      	bne.n	80006e6 <main+0xa6>
	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006d6:	4b6a      	ldr	r3, [pc, #424]	; (8000880 <main+0x240>)
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	4b6a      	ldr	r3, [pc, #424]	; (8000884 <main+0x244>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2205      	movs	r2, #5
 80006e0:	0019      	movs	r1, r3
 80006e2:	f000 fa7f 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 5 )
 80006e6:	4b5f      	ldr	r3, [pc, #380]	; (8000864 <main+0x224>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	d107      	bne.n	80006fe <main+0xbe>
	  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 6 ) ;
 80006ee:	4b66      	ldr	r3, [pc, #408]	; (8000888 <main+0x248>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	4b66      	ldr	r3, [pc, #408]	; (800088c <main+0x24c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2206      	movs	r2, #6
 80006f8:	0019      	movs	r1, r3
 80006fa:	f000 fa73 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 6 )
 80006fe:	4b59      	ldr	r3, [pc, #356]	; (8000864 <main+0x224>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b06      	cmp	r3, #6
 8000704:	d107      	bne.n	8000716 <main+0xd6>
	  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 7 ) ;
 8000706:	4b62      	ldr	r3, [pc, #392]	; (8000890 <main+0x250>)
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	4b62      	ldr	r3, [pc, #392]	; (8000894 <main+0x254>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2207      	movs	r2, #7
 8000710:	0019      	movs	r1, r3
 8000712:	f000 fa67 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 7 )
 8000716:	4b53      	ldr	r3, [pc, #332]	; (8000864 <main+0x224>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b07      	cmp	r3, #7
 800071c:	d107      	bne.n	800072e <main+0xee>
	  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 8 ) ;
 800071e:	4b5e      	ldr	r3, [pc, #376]	; (8000898 <main+0x258>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	4b5e      	ldr	r3, [pc, #376]	; (800089c <main+0x25c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2208      	movs	r2, #8
 8000728:	0019      	movs	r1, r3
 800072a:	f000 fa5b 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 8 )
 800072e:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <main+0x224>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b08      	cmp	r3, #8
 8000734:	d107      	bne.n	8000746 <main+0x106>
	  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 9 ) ;
 8000736:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <main+0x260>)
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <main+0x264>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2209      	movs	r2, #9
 8000740:	0019      	movs	r1, r3
 8000742:	f000 fa4f 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 9 )
 8000746:	4b47      	ldr	r3, [pc, #284]	; (8000864 <main+0x224>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b09      	cmp	r3, #9
 800074c:	d107      	bne.n	800075e <main+0x11e>
	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 10 ) ;
 800074e:	4b56      	ldr	r3, [pc, #344]	; (80008a8 <main+0x268>)
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	4b56      	ldr	r3, [pc, #344]	; (80008ac <main+0x26c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	220a      	movs	r2, #10
 8000758:	0019      	movs	r1, r3
 800075a:	f000 fa43 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 10 )
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <main+0x224>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b0a      	cmp	r3, #10
 8000764:	d107      	bne.n	8000776 <main+0x136>
	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 11 ) ;
 8000766:	4b52      	ldr	r3, [pc, #328]	; (80008b0 <main+0x270>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <main+0x274>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	220b      	movs	r2, #11
 8000770:	0019      	movs	r1, r3
 8000772:	f000 fa37 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 11 )
 8000776:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <main+0x224>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b0b      	cmp	r3, #11
 800077c:	d107      	bne.n	800078e <main+0x14e>
	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 12 ) ;
 800077e:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <main+0x278>)
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	4b4e      	ldr	r3, [pc, #312]	; (80008bc <main+0x27c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	220c      	movs	r2, #12
 8000788:	0019      	movs	r1, r3
 800078a:	f000 fa2b 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 12 )
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <main+0x224>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b0c      	cmp	r3, #12
 8000794:	d107      	bne.n	80007a6 <main+0x166>
	  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 13 ) ;
 8000796:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <main+0x280>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <main+0x284>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	220d      	movs	r2, #13
 80007a0:	0019      	movs	r1, r3
 80007a2:	f000 fa1f 	bl	8000be4 <send2swarm_at_command>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( checklist == 13 )
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <main+0x224>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b0d      	cmp	r3, #13
 80007ac:	d107      	bne.n	80007be <main+0x17e>
		  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 14 ) ;
 80007ae:	4b46      	ldr	r3, [pc, #280]	; (80008c8 <main+0x288>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	4b46      	ldr	r3, [pc, #280]	; (80008cc <main+0x28c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	220e      	movs	r2, #14
 80007b8:	0019      	movs	r1, r3
 80007ba:	f000 fa13 	bl	8000be4 <send2swarm_at_command>
	  //wait_for_tim16x ( 6 ) ;
	  if ( checklist == 14 )
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <main+0x224>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b0e      	cmp	r3, #14
 80007c4:	d107      	bne.n	80007d6 <main+0x196>
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007c6:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <main+0x290>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	4b42      	ldr	r3, [pc, #264]	; (80008d4 <main+0x294>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	220f      	movs	r2, #15
 80007d0:	0019      	movs	r1, r3
 80007d2:	f000 fa07 	bl	8000be4 <send2swarm_at_command>
	  if ( checklist == 15 )
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <main+0x224>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b0f      	cmp	r3, #15
 80007dc:	d107      	bne.n	80007ee <main+0x1ae>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <main+0x298>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <main+0x29c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2210      	movs	r2, #16
 80007e8:	0019      	movs	r1, r3
 80007ea:	f000 f9fb 	bl	8000be4 <send2swarm_at_command>
	  if ( checklist == 16 )
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <main+0x224>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b10      	cmp	r3, #16
 80007f4:	d10f      	bne.n	8000816 <main+0x1d6>
	  {
		  snprintf ( td_at_comm , TD_PAYLOAD_BUFF_SIZE , "$TD HD=60,\"%s;%s\"" , pw_buff , gn_buff ) ;
 80007f6:	493a      	ldr	r1, [pc, #232]	; (80008e0 <main+0x2a0>)
 80007f8:	4a3a      	ldr	r2, [pc, #232]	; (80008e4 <main+0x2a4>)
 80007fa:	483b      	ldr	r0, [pc, #236]	; (80008e8 <main+0x2a8>)
 80007fc:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <main+0x2ac>)
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	000b      	movs	r3, r1
 8000802:	215a      	movs	r1, #90	; 0x5a
 8000804:	f003 fd4a 	bl	800429c <sniprintf>
		  send2swarm_at_command ( td_at_comm , td_ok_answer , 17 ) ;
 8000808:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <main+0x2b0>)
 800080a:	6819      	ldr	r1, [r3, #0]
 800080c:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <main+0x2a8>)
 800080e:	2211      	movs	r2, #17
 8000810:	0018      	movs	r0, r3
 8000812:	f000 f9e7 	bl	8000be4 <send2swarm_at_command>
		  //send2swarm_at_command ( td_mzo_at_comm , td_ok_answer , 17 ) ;
	  }
	  if ( checklist == 17 )
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <main+0x224>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b11      	cmp	r3, #17
 800081c:	d102      	bne.n	8000824 <main+0x1e4>
		  wait_for_tim16x ( 6 ) ;
 800081e:	2006      	movs	r0, #6
 8000820:	f000 fb4c 	bl	8000ebc <wait_for_tim16x>

	  send2swarm_at_command ( sl_3c5ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50min.
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <main+0x2b4>)
 8000826:	6818      	ldr	r0, [r3, #0]
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <main+0x2b8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2212      	movs	r2, #18
 800082e:	0019      	movs	r1, r3
 8000830:	f000 f9d8 	bl	8000be4 <send2swarm_at_command>
	  rx_buff[0] = 0 ;
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <main+0x2bc>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
	  pw_buff[0] = 0 ;
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <main+0x2a0>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	  gn_buff[0] = 0 ;
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <main+0x2ac>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	  checklist = 13 ;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <main+0x224>)
 8000848:	220d      	movs	r2, #13
 800084a:	701a      	strb	r2, [r3, #0]


	  /* Enter LowPower Mode */

	  // Option1: Enter the SHUTDOWN mode. App applies hard restart after WFI
	  HAL_PWREx_EnterSHUTDOWNMode () ; // Enter the SHUTDOWN mode. Docelowo rozważyć STOP Mode 2, żeby nie zaczynać zawsze od konfiguracji
 800084c:	f001 f9a4 	bl	8001b98 <HAL_PWREx_EnterSHUTDOWNMode>
	  if ( checklist == 13 )
 8000850:	e7a9      	b.n	80007a6 <main+0x166>
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000148 	.word	0x20000148
 8000858:	20000194 	.word	0x20000194
 800085c:	20000004 	.word	0x20000004
 8000860:	20000048 	.word	0x20000048
 8000864:	20000274 	.word	0x20000274
 8000868:	20000008 	.word	0x20000008
 800086c:	2000004c 	.word	0x2000004c
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000050 	.word	0x20000050
 8000878:	20000010 	.word	0x20000010
 800087c:	20000054 	.word	0x20000054
 8000880:	20000014 	.word	0x20000014
 8000884:	20000058 	.word	0x20000058
 8000888:	2000001c 	.word	0x2000001c
 800088c:	20000060 	.word	0x20000060
 8000890:	20000020 	.word	0x20000020
 8000894:	20000064 	.word	0x20000064
 8000898:	20000024 	.word	0x20000024
 800089c:	20000068 	.word	0x20000068
 80008a0:	20000028 	.word	0x20000028
 80008a4:	2000006c 	.word	0x2000006c
 80008a8:	2000002c 	.word	0x2000002c
 80008ac:	20000070 	.word	0x20000070
 80008b0:	20000030 	.word	0x20000030
 80008b4:	20000074 	.word	0x20000074
 80008b8:	20000034 	.word	0x20000034
 80008bc:	20000078 	.word	0x20000078
 80008c0:	20000038 	.word	0x20000038
 80008c4:	2000007c 	.word	0x2000007c
 80008c8:	20000018 	.word	0x20000018
 80008cc:	2000005c 	.word	0x2000005c
 80008d0:	2000003c 	.word	0x2000003c
 80008d4:	20000080 	.word	0x20000080
 80008d8:	20000040 	.word	0x20000040
 80008dc:	20000084 	.word	0x20000084
 80008e0:	2000043c 	.word	0x2000043c
 80008e4:	080059e4 	.word	0x080059e4
 80008e8:	20000468 	.word	0x20000468
 80008ec:	20000444 	.word	0x20000444
 80008f0:	20000088 	.word	0x20000088
 80008f4:	20000044 	.word	0x20000044
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	20000278 	.word	0x20000278

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b093      	sub	sp, #76	; 0x4c
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	2410      	movs	r4, #16
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2338      	movs	r3, #56	; 0x38
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f003 fcbb 	bl	800428c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000916:	003b      	movs	r3, r7
 8000918:	0018      	movs	r0, r3
 800091a:	2310      	movs	r3, #16
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f003 fcb4 	bl	800428c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	0018      	movs	r0, r3
 800092a:	f001 f8f5 	bl	8001b18 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800092e:	f001 f8e5 	bl	8001afc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <SystemClock_Config+0xa8>)
 8000934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <SystemClock_Config+0xa8>)
 8000938:	2118      	movs	r1, #24
 800093a:	438a      	bics	r2, r1
 800093c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2206      	movs	r2, #6
 8000942:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2201      	movs	r2, #1
 8000948:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0052      	lsls	r2, r2, #1
 8000950:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2240      	movs	r2, #64	; 0x40
 800095c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	193b      	adds	r3, r7, r4
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f93c 	bl	8001be4 <HAL_RCC_OscConfig>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000970:	f000 fb30 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	003b      	movs	r3, r7
 8000976:	2207      	movs	r2, #7
 8000978:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800097a:	003b      	movs	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	003b      	movs	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000986:	003b      	movs	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800098c:	003b      	movs	r3, r7
 800098e:	2100      	movs	r1, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fc41 	bl	8002218 <HAL_RCC_ClockConfig>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800099a:	f000 fb1b 	bl	8000fd4 <Error_Handler>
  }
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b013      	add	sp, #76	; 0x4c
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_RTC_Init+0x68>)
 80009b2:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <MX_RTC_Init+0x6c>)
 80009b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_RTC_Init+0x68>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_RTC_Init+0x68>)
 80009be:	227f      	movs	r2, #127	; 0x7f
 80009c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_RTC_Init+0x68>)
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_RTC_Init+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_RTC_Init+0x68>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_RTC_Init+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_RTC_Init+0x68>)
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	05d2      	lsls	r2, r2, #23
 80009e0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_RTC_Init+0x68>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_RTC_Init+0x68>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 ff38 	bl	8002860 <HAL_RTC_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 faee 	bl	8000fd4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_RTC_Init+0x68>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	213c      	movs	r1, #60	; 0x3c
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f87e 	bl	8002b00 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000a08:	f000 fae4 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	2000011c 	.word	0x2000011c
 8000a18:	40002800 	.word	0x40002800

08000a1c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <MX_TIM14_Init+0x44>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <MX_TIM14_Init+0x48>)
 8000a2a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <MX_TIM14_Init+0x4c>)
 8000a36:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f002 f91a 	bl	8002c80 <HAL_TIM_Base_Init>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a50:	f000 fac0 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000148 	.word	0x20000148
 8000a60:	40002000 	.word	0x40002000
 8000a64:	00003e7f 	.word	0x00003e7f
 8000a68:	000007cf 	.word	0x000007cf

08000a6c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a78:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <MX_TIM16_Init+0x4c>)
 8000a7a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <MX_TIM16_Init+0x50>)
 8000a86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 f8ef 	bl	8002c80 <HAL_TIM_Base_Init>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000aa6:	f000 fa95 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000194 	.word	0x20000194
 8000ab4:	40014400 	.word	0x40014400
 8000ab8:	00003e7f 	.word	0x00003e7f
 8000abc:	0000270f 	.word	0x0000270f

08000ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ac6:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <MX_USART1_UART_Init+0x98>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000acc:	22e1      	movs	r2, #225	; 0xe1
 8000ace:	0252      	lsls	r2, r2, #9
 8000ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 fb72 	bl	80031f4 <HAL_UART_Init>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 fa5e 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f003 f98b 	bl	8003e38 <HAL_UARTEx_SetTxFifoThreshold>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f000 fa55 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f003 f9c2 	bl	8003eb8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 fa4c 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f003 f940 	bl	8003dc4 <HAL_UARTEx_DisableFifoMode>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 fa44 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	200001e0 	.word	0x200001e0
 8000b58:	40013800 	.word	0x40013800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	240c      	movs	r4, #12
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	0018      	movs	r0, r3
 8000b68:	2314      	movs	r3, #20
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f003 fb8d 	bl	800428c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b78:	2104      	movs	r1, #4
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b82:	2204      	movs	r2, #4
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_GPIO_Init+0x84>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2140      	movs	r1, #64	; 0x40
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 ff89 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000bae:	0021      	movs	r1, r4
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2240      	movs	r2, #64	; 0x40
 8000bb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2201      	movs	r2, #1
 8000bba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <MX_GPIO_Init+0x84>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f000 fe12 	bl	80017f8 <HAL_GPIO_Init>

}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b009      	add	sp, #36	; 0x24
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	50000800 	.word	0x50000800

08000be4 <send2swarm_at_command>:

/* USER CODE BEGIN 4 */
void send2swarm_at_command ( const char* at_command , const char* answer , uint8_t step )
{
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	701a      	strb	r2, [r3, #0]
	//uint32_t temp_tickstart = HAL_GetTick () ; //temp
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fa85 	bl	8000104 <strlen>
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	2517      	movs	r5, #23
 8000bfe:	197c      	adds	r4, r7, r5
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f000 f987 	bl	8000f18 <nmea_checksum>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	7023      	strb	r3, [r4, #0]

	sprintf ( (char*) tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000c0e:	197b      	adds	r3, r7, r5
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4974      	ldr	r1, [pc, #464]	; (8000de8 <send2swarm_at_command+0x204>)
 8000c16:	4875      	ldr	r0, [pc, #468]	; (8000dec <send2swarm_at_command+0x208>)
 8000c18:	f003 fb74 	bl	8004304 <siprintf>
	//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
	uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000c1c:	4b74      	ldr	r3, [pc, #464]	; (8000df0 <send2swarm_at_command+0x20c>)
 8000c1e:	4975      	ldr	r1, [pc, #468]	; (8000df4 <send2swarm_at_command+0x210>)
 8000c20:	4875      	ldr	r0, [pc, #468]	; (8000df8 <send2swarm_at_command+0x214>)
 8000c22:	22fa      	movs	r2, #250	; 0xfa
 8000c24:	9200      	str	r2, [sp, #0]
 8000c26:	22c8      	movs	r2, #200	; 0xc8
 8000c28:	f003 f988 	bl	8003f3c <HAL_UARTEx_ReceiveToIdle>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	001a      	movs	r2, r3
 8000c30:	4b72      	ldr	r3, [pc, #456]	; (8000dfc <send2swarm_at_command+0x218>)
 8000c32:	701a      	strb	r2, [r3, #0]
	uart_status = HAL_UART_AbortReceive ( &huart1 ) ;
 8000c34:	4b70      	ldr	r3, [pc, #448]	; (8000df8 <send2swarm_at_command+0x214>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 fbce 	bl	80033d8 <HAL_UART_AbortReceive>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	001a      	movs	r2, r3
 8000c40:	4b6e      	ldr	r3, [pc, #440]	; (8000dfc <send2swarm_at_command+0x218>)
 8000c42:	701a      	strb	r2, [r3, #0]
	rx_buff[0] = 0 ;
 8000c44:	4b6b      	ldr	r3, [pc, #428]	; (8000df4 <send2swarm_at_command+0x210>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , SWARM_UART_TX_TIMEOUT ) ;
 8000c4a:	4b68      	ldr	r3, [pc, #416]	; (8000dec <send2swarm_at_command+0x208>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fa59 	bl	8000104 <strlen>
 8000c52:	0003      	movs	r3, r0
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	23fa      	movs	r3, #250	; 0xfa
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4964      	ldr	r1, [pc, #400]	; (8000dec <send2swarm_at_command+0x208>)
 8000c5c:	4866      	ldr	r0, [pc, #408]	; (8000df8 <send2swarm_at_command+0x214>)
 8000c5e:	f002 fb1f 	bl	80032a0 <HAL_UART_Transmit>
 8000c62:	0003      	movs	r3, r0
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b65      	ldr	r3, [pc, #404]	; (8000dfc <send2swarm_at_command+0x218>)
 8000c68:	701a      	strb	r2, [r3, #0]
	//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
	uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000c6a:	4b61      	ldr	r3, [pc, #388]	; (8000df0 <send2swarm_at_command+0x20c>)
 8000c6c:	4961      	ldr	r1, [pc, #388]	; (8000df4 <send2swarm_at_command+0x210>)
 8000c6e:	4862      	ldr	r0, [pc, #392]	; (8000df8 <send2swarm_at_command+0x214>)
 8000c70:	22fa      	movs	r2, #250	; 0xfa
 8000c72:	9200      	str	r2, [sp, #0]
 8000c74:	22c8      	movs	r2, #200	; 0xc8
 8000c76:	f003 f961 	bl	8003f3c <HAL_UARTEx_ReceiveToIdle>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	4b5f      	ldr	r3, [pc, #380]	; (8000dfc <send2swarm_at_command+0x218>)
 8000c80:	701a      	strb	r2, [r3, #0]
	/* Wait of SWARM UARt RX */
	tim16_on = 1 ;
 8000c82:	4b5f      	ldr	r3, [pc, #380]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000c88:	4b5e      	ldr	r3, [pc, #376]	; (8000e04 <send2swarm_at_command+0x220>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 f850 	bl	8002d30 <HAL_TIM_Base_Start_IT>
	while ( tim16_on )
 8000c90:	e01f      	b.n	8000cd2 <send2swarm_at_command+0xee>
	{
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff fa35 	bl	8000104 <strlen>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	4b55      	ldr	r3, [pc, #340]	; (8000df4 <send2swarm_at_command+0x210>)
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f003 fb4f 	bl	8004344 <strncmp>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d104      	bne.n	8000cb4 <send2swarm_at_command+0xd0>
		{
			checklist = step ;
 8000caa:	4b57      	ldr	r3, [pc, #348]	; (8000e08 <send2swarm_at_command+0x224>)
 8000cac:	1dfa      	adds	r2, r7, #7
 8000cae:	7812      	ldrb	r2, [r2, #0]
 8000cb0:	701a      	strb	r2, [r3, #0]
			break ;
 8000cb2:	e012      	b.n	8000cda <send2swarm_at_command+0xf6>
		}
		else
		{
			rx_buff[0] = 0 ;
 8000cb4:	4b4f      	ldr	r3, [pc, #316]	; (8000df4 <send2swarm_at_command+0x210>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
			//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
			uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000cba:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <send2swarm_at_command+0x20c>)
 8000cbc:	494d      	ldr	r1, [pc, #308]	; (8000df4 <send2swarm_at_command+0x210>)
 8000cbe:	484e      	ldr	r0, [pc, #312]	; (8000df8 <send2swarm_at_command+0x214>)
 8000cc0:	22fa      	movs	r2, #250	; 0xfa
 8000cc2:	9200      	str	r2, [sp, #0]
 8000cc4:	22c8      	movs	r2, #200	; 0xc8
 8000cc6:	f003 f939 	bl	8003f3c <HAL_UARTEx_ReceiveToIdle>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	001a      	movs	r2, r3
 8000cce:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <send2swarm_at_command+0x218>)
 8000cd0:	701a      	strb	r2, [r3, #0]
	while ( tim16_on )
 8000cd2:	4b4b      	ldr	r3, [pc, #300]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1db      	bne.n	8000c92 <send2swarm_at_command+0xae>
		}
	}
	if ( checklist != step && step != 17 )
 8000cda:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <send2swarm_at_command+0x224>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	1dfa      	adds	r2, r7, #7
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d057      	beq.n	8000d96 <send2swarm_at_command+0x1b2>
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b11      	cmp	r3, #17
 8000cec:	d053      	beq.n	8000d96 <send2swarm_at_command+0x1b2>
	{
		uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , SWARM_UART_TX_TIMEOUT ) ;
 8000cee:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <send2swarm_at_command+0x208>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fa07 	bl	8000104 <strlen>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	23fa      	movs	r3, #250	; 0xfa
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	493b      	ldr	r1, [pc, #236]	; (8000dec <send2swarm_at_command+0x208>)
 8000d00:	483d      	ldr	r0, [pc, #244]	; (8000df8 <send2swarm_at_command+0x214>)
 8000d02:	f002 facd 	bl	80032a0 <HAL_UART_Transmit>
 8000d06:	0003      	movs	r3, r0
 8000d08:	001a      	movs	r2, r3
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <send2swarm_at_command+0x218>)
 8000d0c:	701a      	strb	r2, [r3, #0]
		//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
		uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000d0e:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <send2swarm_at_command+0x20c>)
 8000d10:	4938      	ldr	r1, [pc, #224]	; (8000df4 <send2swarm_at_command+0x210>)
 8000d12:	4839      	ldr	r0, [pc, #228]	; (8000df8 <send2swarm_at_command+0x214>)
 8000d14:	22fa      	movs	r2, #250	; 0xfa
 8000d16:	9200      	str	r2, [sp, #0]
 8000d18:	22c8      	movs	r2, #200	; 0xc8
 8000d1a:	f003 f90f 	bl	8003f3c <HAL_UARTEx_ReceiveToIdle>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	001a      	movs	r2, r3
 8000d22:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <send2swarm_at_command+0x218>)
 8000d24:	701a      	strb	r2, [r3, #0]
		/* Wait of SWARM UARt RX */
		tim16_on = 1 ;
 8000d26:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <send2swarm_at_command+0x220>)
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 fffe 	bl	8002d30 <HAL_TIM_Base_Start_IT>
		while ( tim16_on )
 8000d34:	e02b      	b.n	8000d8e <send2swarm_at_command+0x1aa>
		{
			//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
			uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000d36:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <send2swarm_at_command+0x20c>)
 8000d38:	492e      	ldr	r1, [pc, #184]	; (8000df4 <send2swarm_at_command+0x210>)
 8000d3a:	482f      	ldr	r0, [pc, #188]	; (8000df8 <send2swarm_at_command+0x214>)
 8000d3c:	22fa      	movs	r2, #250	; 0xfa
 8000d3e:	9200      	str	r2, [sp, #0]
 8000d40:	22c8      	movs	r2, #200	; 0xc8
 8000d42:	f003 f8fb 	bl	8003f3c <HAL_UARTEx_ReceiveToIdle>
 8000d46:	0003      	movs	r3, r0
 8000d48:	001a      	movs	r2, r3
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <send2swarm_at_command+0x218>)
 8000d4c:	701a      	strb	r2, [r3, #0]
			if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff f9d7 	bl	8000104 <strlen>
 8000d56:	0002      	movs	r2, r0
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <send2swarm_at_command+0x210>)
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f003 faf1 	bl	8004344 <strncmp>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d104      	bne.n	8000d70 <send2swarm_at_command+0x18c>
			{
				checklist = step ;
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <send2swarm_at_command+0x224>)
 8000d68:	1dfa      	adds	r2, r7, #7
 8000d6a:	7812      	ldrb	r2, [r2, #0]
 8000d6c:	701a      	strb	r2, [r3, #0]
				break ;
 8000d6e:	e012      	b.n	8000d96 <send2swarm_at_command+0x1b2>
			}
			else
			{
				rx_buff[0] = 0 ;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <send2swarm_at_command+0x210>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
				//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
				uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <send2swarm_at_command+0x20c>)
 8000d78:	491e      	ldr	r1, [pc, #120]	; (8000df4 <send2swarm_at_command+0x210>)
 8000d7a:	481f      	ldr	r0, [pc, #124]	; (8000df8 <send2swarm_at_command+0x214>)
 8000d7c:	22fa      	movs	r2, #250	; 0xfa
 8000d7e:	9200      	str	r2, [sp, #0]
 8000d80:	22c8      	movs	r2, #200	; 0xc8
 8000d82:	f003 f8db 	bl	8003f3c <HAL_UARTEx_ReceiveToIdle>
 8000d86:	0003      	movs	r3, r0
 8000d88:	001a      	movs	r2, r3
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <send2swarm_at_command+0x218>)
 8000d8c:	701a      	strb	r2, [r3, #0]
		while ( tim16_on )
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1cf      	bne.n	8000d36 <send2swarm_at_command+0x152>
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
			checklist = step ;
	}
	*/

	if ( strncmp ( pw_mostrecent_at_comm , at_command , strlen ( pw_mostrecent_at_comm ) ) == 0 )
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <send2swarm_at_command+0x228>)
 8000d98:	681c      	ldr	r4, [r3, #0]
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <send2swarm_at_command+0x228>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff f9b0 	bl	8000104 <strlen>
 8000da4:	0002      	movs	r2, r0
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	0019      	movs	r1, r3
 8000daa:	0020      	movs	r0, r4
 8000dac:	f003 faca 	bl	8004344 <strncmp>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d101      	bne.n	8000db8 <send2swarm_at_command+0x1d4>
		pw2payload () ;
 8000db4:	f000 f82e 	bl	8000e14 <pw2payload>
	if ( strncmp ( gn_mostrecent_at_comm , at_command , strlen ( gn_mostrecent_at_comm ) ) == 0 )
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <send2swarm_at_command+0x22c>)
 8000dba:	681c      	ldr	r4, [r3, #0]
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <send2swarm_at_command+0x22c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff f99f 	bl	8000104 <strlen>
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	0019      	movs	r1, r3
 8000dcc:	0020      	movs	r0, r4
 8000dce:	f003 fab9 	bl	8004344 <strncmp>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d101      	bne.n	8000dda <send2swarm_at_command+0x1f6>
		gn2payload () ;
 8000dd6:	f000 f847 	bl	8000e68 <gn2payload>
	rx_buff[0] = 0 ;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <send2swarm_at_command+0x210>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b006      	add	sp, #24
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	080059f8 	.word	0x080059f8
 8000dec:	20000340 	.word	0x20000340
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000278 	.word	0x20000278
 8000df8:	200001e0 	.word	0x200001e0
 8000dfc:	20000277 	.word	0x20000277
 8000e00:	20000276 	.word	0x20000276
 8000e04:	20000194 	.word	0x20000194
 8000e08:	20000274 	.word	0x20000274
 8000e0c:	20000018 	.word	0x20000018
 8000e10:	2000003c 	.word	0x2000003c

08000e14 <pw2payload>:

void pw2payload ()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <pw2payload+0x3c>)
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <pw2payload+0x40>)
 8000e1c:	0011      	movs	r1, r2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f003 faa2 	bl	8004368 <strtok>
 8000e24:	0002      	movs	r2, r0
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <pw2payload+0x44>)
 8000e28:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "," ) ;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <pw2payload+0x48>)
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f003 fa9a 	bl	8004368 <strtok>
 8000e34:	0002      	movs	r2, r0
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <pw2payload+0x44>)
 8000e38:	601a      	str	r2, [r3, #0]
	sprintf ( pw_buff , "%4s" , chunk ) ;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <pw2payload+0x44>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <pw2payload+0x4c>)
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <pw2payload+0x50>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f003 fa5e 	bl	8004304 <siprintf>
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	08005a04 	.word	0x08005a04
 8000e54:	20000278 	.word	0x20000278
 8000e58:	200004c4 	.word	0x200004c4
 8000e5c:	08005a08 	.word	0x08005a08
 8000e60:	08005a0c 	.word	0x08005a0c
 8000e64:	2000043c 	.word	0x2000043c

08000e68 <gn2payload>:
void gn2payload ()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <gn2payload+0x3c>)
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <gn2payload+0x40>)
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f003 fa78 	bl	8004368 <strtok>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <gn2payload+0x44>)
 8000e7c:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "*" ) ;
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <gn2payload+0x48>)
 8000e80:	0019      	movs	r1, r3
 8000e82:	2000      	movs	r0, #0
 8000e84:	f003 fa70 	bl	8004368 <strtok>
 8000e88:	0002      	movs	r2, r0
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <gn2payload+0x44>)
 8000e8c:	601a      	str	r2, [r3, #0]
	sprintf ( (char*) gn_buff , "%s" , chunk ) ;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <gn2payload+0x44>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <gn2payload+0x4c>)
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <gn2payload+0x50>)
 8000e96:	0018      	movs	r0, r3
 8000e98:	f003 fa34 	bl	8004304 <siprintf>
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	08005a04 	.word	0x08005a04
 8000ea8:	20000278 	.word	0x20000278
 8000eac:	200004c4 	.word	0x200004c4
 8000eb0:	08005a10 	.word	0x08005a10
 8000eb4:	08005a14 	.word	0x08005a14
 8000eb8:	20000444 	.word	0x20000444

08000ebc <wait_for_tim16x>:

void wait_for_tim16x ( uint8_t x )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	701a      	strb	r2, [r3, #0]
	uint8_t i ;
	for ( i = 0 ; i < x ; i++ )
 8000ec8:	230f      	movs	r3, #15
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e012      	b.n	8000ef8 <wait_for_tim16x+0x3c>
	{
		tim16_on = 1 ;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <wait_for_tim16x+0x54>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <wait_for_tim16x+0x58>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 ff28 	bl	8002d30 <HAL_TIM_Base_Start_IT>
		while ( tim16_on )
 8000ee0:	e000      	b.n	8000ee4 <wait_for_tim16x+0x28>
			__NOP () ;
 8000ee2:	46c0      	nop			; (mov r8, r8)
		while ( tim16_on )
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <wait_for_tim16x+0x54>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1fa      	bne.n	8000ee2 <wait_for_tim16x+0x26>
	for ( i = 0 ; i < x ; i++ )
 8000eec:	210f      	movs	r1, #15
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	3201      	adds	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	230f      	movs	r3, #15
 8000efa:	18fa      	adds	r2, r7, r3
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	7812      	ldrb	r2, [r2, #0]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3e5      	bcc.n	8000ed2 <wait_for_tim16x+0x16>
	}
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b004      	add	sp, #16
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000276 	.word	0x20000276
 8000f14:	20000194 	.word	0x20000194

08000f18 <nmea_checksum>:

uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b24      	cmp	r3, #36	; 0x24
 8000f2c:	d102      	bne.n	8000f34 <nmea_checksum+0x1c>
		i++ ;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f34:	230b      	movs	r3, #11
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e00c      	b.n	8000f58 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	18d3      	adds	r3, r2, r3
 8000f44:	7819      	ldrb	r1, [r3, #0]
 8000f46:	220b      	movs	r2, #11
 8000f48:	18bb      	adds	r3, r7, r2
 8000f4a:	18ba      	adds	r2, r7, r2
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	404a      	eors	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3301      	adds	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d205      	bcs.n	8000f6c <nmea_checksum+0x54>
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	18d3      	adds	r3, r2, r3
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e8      	bne.n	8000f3e <nmea_checksum+0x26>
	return cs;
 8000f6c:	230b      	movs	r3, #11
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	781b      	ldrb	r3, [r3, #0]
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d106      	bne.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 ff1e 	bl	8002dd8 <HAL_TIM_Base_Stop_IT>
	}
	if ( htim->Instance == TIM16 )
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d106      	bne.n	8000fb4 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		tim16_on = 0 ;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim16 ) ;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 ff12 	bl	8002dd8 <HAL_TIM_Base_Stop_IT>
	}
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40002000 	.word	0x40002000
 8000fc0:	20000275 	.word	0x20000275
 8000fc4:	20000148 	.word	0x20000148
 8000fc8:	40014400 	.word	0x40014400
 8000fcc:	20000276 	.word	0x20000276
 8000fd0:	20000194 	.word	0x20000194

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_MspInit+0x44>)
 8000fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_MspInit+0x44>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_MspInit+0x44>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_MspInit+0x44>)
 8001000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_MspInit+0x44>)
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	0549      	lsls	r1, r1, #21
 8001008:	430a      	orrs	r2, r1
 800100a:	63da      	str	r2, [r3, #60]	; 0x3c
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_MspInit+0x44>)
 800100e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	4013      	ands	r3, r2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b08f      	sub	sp, #60	; 0x3c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	2410      	movs	r4, #16
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	2328      	movs	r3, #40	; 0x28
 8001038:	001a      	movs	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f003 f926 	bl	800428c <memset>
  if(hrtc->Instance==RTC)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a19      	ldr	r2, [pc, #100]	; (80010ac <HAL_RTC_MspInit+0x84>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d12c      	bne.n	80010a4 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800104a:	193b      	adds	r3, r7, r4
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	0292      	lsls	r2, r2, #10
 8001050:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001052:	193b      	adds	r3, r7, r4
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105a:	193b      	adds	r3, r7, r4
 800105c:	0018      	movs	r0, r3
 800105e:	f001 fa85 	bl	800256c <HAL_RCCEx_PeriphCLKConfig>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d001      	beq.n	800106a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001066:	f7ff ffb5 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_RTC_MspInit+0x88>)
 800106c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_RTC_MspInit+0x88>)
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	0209      	lsls	r1, r1, #8
 8001074:	430a      	orrs	r2, r1
 8001076:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_RTC_MspInit+0x88>)
 800107a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_RTC_MspInit+0x88>)
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	00c9      	lsls	r1, r1, #3
 8001082:	430a      	orrs	r2, r1
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_RTC_MspInit+0x88>)
 8001088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4013      	ands	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2002      	movs	r0, #2
 800109a:	f000 fb0f 	bl	80016bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800109e:	2002      	movs	r0, #2
 80010a0:	f000 fb21 	bl	80016e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b00f      	add	sp, #60	; 0x3c
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	40002800 	.word	0x40002800
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_TIM_Base_MspInit+0x80>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d116      	bne.n	80010f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_TIM_Base_MspInit+0x84>)
 80010c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_TIM_Base_MspInit+0x84>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	0209      	lsls	r1, r1, #8
 80010d0:	430a      	orrs	r2, r1
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_TIM_Base_MspInit+0x84>)
 80010d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2013      	movs	r0, #19
 80010e8:	f000 fae8 	bl	80016bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80010ec:	2013      	movs	r0, #19
 80010ee:	f000 fafa 	bl	80016e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010f2:	e01a      	b.n	800112a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_TIM_Base_MspInit+0x88>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d115      	bne.n	800112a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_TIM_Base_MspInit+0x84>)
 8001100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_TIM_Base_MspInit+0x84>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0289      	lsls	r1, r1, #10
 8001108:	430a      	orrs	r2, r1
 800110a:	641a      	str	r2, [r3, #64]	; 0x40
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_TIM_Base_MspInit+0x84>)
 800110e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2015      	movs	r0, #21
 8001120:	f000 facc 	bl	80016bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001124:	2015      	movs	r0, #21
 8001126:	f000 fade 	bl	80016e6 <HAL_NVIC_EnableIRQ>
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	40002000 	.word	0x40002000
 8001138:	40021000 	.word	0x40021000
 800113c:	40014400 	.word	0x40014400

08001140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b095      	sub	sp, #84	; 0x54
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	233c      	movs	r3, #60	; 0x3c
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	0018      	movs	r0, r3
 800114e:	2314      	movs	r3, #20
 8001150:	001a      	movs	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	f003 f89a 	bl	800428c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	2414      	movs	r4, #20
 800115a:	193b      	adds	r3, r7, r4
 800115c:	0018      	movs	r0, r3
 800115e:	2328      	movs	r3, #40	; 0x28
 8001160:	001a      	movs	r2, r3
 8001162:	2100      	movs	r1, #0
 8001164:	f003 f892 	bl	800428c <memset>
  if(huart->Instance==USART1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <HAL_UART_MspInit+0xbc>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d13f      	bne.n	80011f2 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001172:	193b      	adds	r3, r7, r4
 8001174:	2201      	movs	r2, #1
 8001176:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001178:	193b      	adds	r3, r7, r4
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	193b      	adds	r3, r7, r4
 8001180:	0018      	movs	r0, r3
 8001182:	f001 f9f3 	bl	800256c <HAL_RCCEx_PeriphCLKConfig>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d001      	beq.n	800118e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800118a:	f7ff ff23 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_UART_MspInit+0xc0>)
 8001190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_UART_MspInit+0xc0>)
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	01c9      	lsls	r1, r1, #7
 8001198:	430a      	orrs	r2, r1
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_UART_MspInit+0xc0>)
 800119e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	01db      	lsls	r3, r3, #7
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_UART_MspInit+0xc0>)
 80011ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_UART_MspInit+0xc0>)
 80011b0:	2101      	movs	r1, #1
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_UART_MspInit+0xc0>)
 80011b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ba:	2201      	movs	r2, #1
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011c2:	213c      	movs	r1, #60	; 0x3c
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	22c0      	movs	r2, #192	; 0xc0
 80011c8:	00d2      	lsls	r2, r2, #3
 80011ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	2202      	movs	r2, #2
 80011d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2201      	movs	r2, #1
 80011e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	187a      	adds	r2, r7, r1
 80011e6:	23a0      	movs	r3, #160	; 0xa0
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	0011      	movs	r1, r2
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 fb03 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b015      	add	sp, #84	; 0x54
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	40013800 	.word	0x40013800
 8001200:	40021000 	.word	0x40021000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 f980 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <RTC_TAMP_IRQHandler+0x14>)
 800123a:	0018      	movs	r0, r3
 800123c:	f001 fcfa 	bl	8002c34 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	2000011c 	.word	0x2000011c

0800124c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <TIM14_IRQHandler+0x14>)
 8001252:	0018      	movs	r0, r3
 8001254:	f001 fdee 	bl	8002e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	20000148 	.word	0x20000148

08001264 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <TIM16_IRQHandler+0x14>)
 800126a:	0018      	movs	r0, r3
 800126c:	f001 fde2 	bl	8002e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000194 	.word	0x20000194

0800127c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	return 1;
 8001280:	2301      	movs	r3, #1
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001292:	f002 ffd1 	bl	8004238 <__errno>
 8001296:	0003      	movs	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
	return -1;
 800129c:	2301      	movs	r3, #1
 800129e:	425b      	negs	r3, r3
}
 80012a0:	0018      	movs	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b0:	2301      	movs	r3, #1
 80012b2:	425a      	negs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	0011      	movs	r1, r2
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff ffe5 	bl	8001288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012be:	e7fe      	b.n	80012be <_exit+0x16>

080012c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e00a      	b.n	80012e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012d2:	e000      	b.n	80012d6 <_read+0x16>
 80012d4:	bf00      	nop
 80012d6:	0001      	movs	r1, r0
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	b2ca      	uxtb	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf0      	blt.n	80012d2 <_read+0x12>
	}

return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b006      	add	sp, #24
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e009      	b.n	8001320 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60ba      	str	r2, [r7, #8]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	0018      	movs	r0, r3
 8001316:	e000      	b.n	800131a <_write+0x20>
 8001318:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf1      	blt.n	800130c <_write+0x12>
	}
	return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	0018      	movs	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	b006      	add	sp, #24
 8001330:	bd80      	pop	{r7, pc}

08001332 <_close>:

int _close(int file)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	return -1;
 800133a:	2301      	movs	r3, #1
 800133c:	425b      	negs	r3, r3
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	0192      	lsls	r2, r2, #6
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}

08001362 <_isatty>:

int _isatty(int file)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
	return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}

08001374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
	return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b004      	add	sp, #16
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f002 ff3c 	bl	8004238 <__errno>
 80013c0:	0003      	movs	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	425b      	negs	r3, r3
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	18d2      	adds	r2, r2, r3
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <_sbrk+0x64>)
 80013dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b006      	add	sp, #24
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20002000 	.word	0x20002000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	200004c8 	.word	0x200004c8
 80013f4:	200004e0 	.word	0x200004e0

080013f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001406:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001408:	f7ff fff6 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <LoopForever+0x6>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	; (8001444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <LoopForever+0xe>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	; (8001450 <LoopForever+0x16>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001432:	f002 ff07 	bl	8004244 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001436:	f7ff f903 	bl	8000640 <main>

0800143a <LoopForever>:

LoopForever:
  b LoopForever
 800143a:	e7fe      	b.n	800143a <LoopForever>
  ldr   r0, =_estack
 800143c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001448:	08005bf8 	.word	0x08005bf8
  ldr r2, =_sbss
 800144c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001450:	200004e0 	.word	0x200004e0

08001454 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC1_IRQHandler>
	...

08001458 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_Init+0x3c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_Init+0x3c>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0049      	lsls	r1, r1, #1
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f810 	bl	8001498 <HAL_InitTick>
 8001478:	1e03      	subs	r3, r0, #0
 800147a:	d003      	beq.n	8001484 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e001      	b.n	8001488 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fdac 	bl	8000fe0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	781b      	ldrb	r3, [r3, #0]
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40022000 	.word	0x40022000

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_InitTick+0x88>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02b      	beq.n	8001508 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_InitTick+0x8c>)
 80014b2:	681c      	ldr	r4, [r3, #0]
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_InitTick+0x88>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	0019      	movs	r1, r3
 80014ba:	23fa      	movs	r3, #250	; 0xfa
 80014bc:	0098      	lsls	r0, r3, #2
 80014be:	f7fe fe33 	bl	8000128 <__udivsi3>
 80014c2:	0003      	movs	r3, r0
 80014c4:	0019      	movs	r1, r3
 80014c6:	0020      	movs	r0, r4
 80014c8:	f7fe fe2e 	bl	8000128 <__udivsi3>
 80014cc:	0003      	movs	r3, r0
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 f919 	bl	8001706 <HAL_SYSTICK_Config>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d112      	bne.n	80014fe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d80a      	bhi.n	80014f4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2301      	movs	r3, #1
 80014e2:	425b      	negs	r3, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 f8e8 	bl	80016bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_InitTick+0x90>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e00d      	b.n	8001510 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e008      	b.n	8001510 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014fe:	230f      	movs	r3, #15
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e003      	b.n	8001510 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001508:	230f      	movs	r3, #15
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b005      	add	sp, #20
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000098 	.word	0x20000098
 8001524:	20000090 	.word	0x20000090
 8001528:	20000094 	.word	0x20000094

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	001a      	movs	r2, r3
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	18d2      	adds	r2, r2, r3
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <HAL_IncTick+0x20>)
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	20000098 	.word	0x20000098
 800154c:	200004cc 	.word	0x200004cc

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_GetTick+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	200004cc 	.word	0x200004cc

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	0002      	movs	r2, r0
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b7f      	cmp	r3, #127	; 0x7f
 8001576:	d809      	bhi.n	800158c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	001a      	movs	r2, r3
 800157e:	231f      	movs	r3, #31
 8001580:	401a      	ands	r2, r3
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_EnableIRQ+0x30>)
 8001584:	2101      	movs	r1, #1
 8001586:	4091      	lsls	r1, r2
 8001588:	000a      	movs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b002      	add	sp, #8
 8001592:	bd80      	pop	{r7, pc}
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	0002      	movs	r2, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b7f      	cmp	r3, #127	; 0x7f
 80015ac:	d828      	bhi.n	8001600 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ae:	4a2f      	ldr	r2, [pc, #188]	; (800166c <__NVIC_SetPriority+0xd4>)
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	33c0      	adds	r3, #192	; 0xc0
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	589b      	ldr	r3, [r3, r2]
 80015be:	1dfa      	adds	r2, r7, #7
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	0011      	movs	r1, r2
 80015c4:	2203      	movs	r2, #3
 80015c6:	400a      	ands	r2, r1
 80015c8:	00d2      	lsls	r2, r2, #3
 80015ca:	21ff      	movs	r1, #255	; 0xff
 80015cc:	4091      	lsls	r1, r2
 80015ce:	000a      	movs	r2, r1
 80015d0:	43d2      	mvns	r2, r2
 80015d2:	401a      	ands	r2, r3
 80015d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	22ff      	movs	r2, #255	; 0xff
 80015dc:	401a      	ands	r2, r3
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	0018      	movs	r0, r3
 80015e4:	2303      	movs	r3, #3
 80015e6:	4003      	ands	r3, r0
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ec:	481f      	ldr	r0, [pc, #124]	; (800166c <__NVIC_SetPriority+0xd4>)
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	430a      	orrs	r2, r1
 80015f8:	33c0      	adds	r3, #192	; 0xc0
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015fe:	e031      	b.n	8001664 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <__NVIC_SetPriority+0xd8>)
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0019      	movs	r1, r3
 8001608:	230f      	movs	r3, #15
 800160a:	400b      	ands	r3, r1
 800160c:	3b08      	subs	r3, #8
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3306      	adds	r3, #6
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	3304      	adds	r3, #4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	1dfa      	adds	r2, r7, #7
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	0011      	movs	r1, r2
 8001620:	2203      	movs	r2, #3
 8001622:	400a      	ands	r2, r1
 8001624:	00d2      	lsls	r2, r2, #3
 8001626:	21ff      	movs	r1, #255	; 0xff
 8001628:	4091      	lsls	r1, r2
 800162a:	000a      	movs	r2, r1
 800162c:	43d2      	mvns	r2, r2
 800162e:	401a      	ands	r2, r3
 8001630:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	019b      	lsls	r3, r3, #6
 8001636:	22ff      	movs	r2, #255	; 0xff
 8001638:	401a      	ands	r2, r3
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	0018      	movs	r0, r3
 8001640:	2303      	movs	r3, #3
 8001642:	4003      	ands	r3, r0
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001648:	4809      	ldr	r0, [pc, #36]	; (8001670 <__NVIC_SetPriority+0xd8>)
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	001c      	movs	r4, r3
 8001650:	230f      	movs	r3, #15
 8001652:	4023      	ands	r3, r4
 8001654:	3b08      	subs	r3, #8
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	430a      	orrs	r2, r1
 800165a:	3306      	adds	r3, #6
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	18c3      	adds	r3, r0, r3
 8001660:	3304      	adds	r3, #4
 8001662:	601a      	str	r2, [r3, #0]
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b003      	add	sp, #12
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	1e5a      	subs	r2, r3, #1
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	045b      	lsls	r3, r3, #17
 8001684:	429a      	cmp	r2, r3
 8001686:	d301      	bcc.n	800168c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001688:	2301      	movs	r3, #1
 800168a:	e010      	b.n	80016ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <SysTick_Config+0x44>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	3a01      	subs	r2, #1
 8001692:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001694:	2301      	movs	r3, #1
 8001696:	425b      	negs	r3, r3
 8001698:	2103      	movs	r1, #3
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff ff7c 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x44>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x44>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b002      	add	sp, #8
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	210f      	movs	r1, #15
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	1c02      	adds	r2, r0, #0
 80016cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	0011      	movs	r1, r2
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	0002      	movs	r2, r0
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ff33 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff ffaf 	bl	8001674 <SysTick_Config>
 8001716:	0003      	movs	r3, r0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e050      	b.n	80017d4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2225      	movs	r2, #37	; 0x25
 8001736:	5c9b      	ldrb	r3, [r3, r2]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d008      	beq.n	8001750 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2204      	movs	r2, #4
 8001742:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2224      	movs	r2, #36	; 0x24
 8001748:	2100      	movs	r1, #0
 800174a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e041      	b.n	80017d4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	210e      	movs	r1, #14
 800175c:	438a      	bics	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	491c      	ldr	r1, [pc, #112]	; (80017dc <HAL_DMA_Abort+0xbc>)
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2101      	movs	r1, #1
 800177c:	438a      	bics	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_DMA_Abort+0xc0>)
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	221c      	movs	r2, #28
 800178a:	4013      	ands	r3, r2
 800178c:	2201      	movs	r2, #1
 800178e:	409a      	lsls	r2, r3
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_DMA_Abort+0xc0>)
 8001792:	430a      	orrs	r2, r1
 8001794:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800179e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00c      	beq.n	80017c2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b2:	490a      	ldr	r1, [pc, #40]	; (80017dc <HAL_DMA_Abort+0xbc>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2225      	movs	r2, #37	; 0x25
 80017c6:	2101      	movs	r1, #1
 80017c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2224      	movs	r2, #36	; 0x24
 80017ce:	2100      	movs	r1, #0
 80017d0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	fffffeff 	.word	0xfffffeff
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e147      	b.n	8001a98 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4091      	lsls	r1, r2
 8001812:	000a      	movs	r2, r1
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <HAL_GPIO_Init+0x28>
 800181e:	e138      	b.n	8001a92 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	4013      	ands	r3, r2
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x40>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	2201      	movs	r2, #1
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d017      	beq.n	80018d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	4013      	ands	r3, r2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d123      	bne.n	800192a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2107      	movs	r1, #7
 800190e:	400b      	ands	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	6939      	ldr	r1, [r7, #16]
 8001928:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2203      	movs	r2, #3
 8001948:	401a      	ands	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	4013      	ands	r3, r2
 8001968:	d100      	bne.n	800196c <HAL_GPIO_Init+0x174>
 800196a:	e092      	b.n	8001a92 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800196c:	4a50      	ldr	r2, [pc, #320]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3318      	adds	r3, #24
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	589b      	ldr	r3, [r3, r2]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2203      	movs	r2, #3
 800197e:	4013      	ands	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	220f      	movs	r2, #15
 8001984:	409a      	lsls	r2, r3
 8001986:	0013      	movs	r3, r2
 8001988:	43da      	mvns	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	23a0      	movs	r3, #160	; 0xa0
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	429a      	cmp	r2, r3
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0x1ca>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a45      	ldr	r2, [pc, #276]	; (8001ab4 <HAL_GPIO_Init+0x2bc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00d      	beq.n	80019be <HAL_GPIO_Init+0x1c6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a44      	ldr	r2, [pc, #272]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <HAL_GPIO_Init+0x1c2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a43      	ldr	r2, [pc, #268]	; (8001abc <HAL_GPIO_Init+0x2c4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_GPIO_Init+0x1be>
 80019b2:	2303      	movs	r3, #3
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x1cc>
 80019b6:	2305      	movs	r3, #5
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x1cc>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x1cc>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x1cc>
 80019c2:	2300      	movs	r3, #0
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	2103      	movs	r1, #3
 80019c8:	400a      	ands	r2, r1
 80019ca:	00d2      	lsls	r2, r2, #3
 80019cc:	4093      	lsls	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80019d4:	4936      	ldr	r1, [pc, #216]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3318      	adds	r3, #24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	035b      	lsls	r3, r3, #13
 80019fa:	4013      	ands	r3, r2
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43da      	mvns	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	039b      	lsls	r3, r3, #14
 8001a24:	4013      	ands	r3, r2
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a38:	2384      	movs	r3, #132	; 0x84
 8001a3a:	58d3      	ldr	r3, [r2, r3]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	4013      	ands	r3, r2
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a5c:	4914      	ldr	r1, [pc, #80]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a5e:	2284      	movs	r2, #132	; 0x84
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	58d3      	ldr	r3, [r2, r3]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a8a:	4909      	ldr	r1, [pc, #36]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	40da      	lsrs	r2, r3
 8001aa0:	1e13      	subs	r3, r2, #0
 8001aa2:	d000      	beq.n	8001aa6 <HAL_GPIO_Init+0x2ae>
 8001aa4:	e6b0      	b.n	8001808 <HAL_GPIO_Init+0x10>
  }
}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b006      	add	sp, #24
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021800 	.word	0x40021800
 8001ab4:	50000400 	.word	0x50000400
 8001ab8:	50000800 	.word	0x50000800
 8001abc:	50000c00 	.word	0x50000c00

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	0008      	movs	r0, r1
 8001aca:	0011      	movs	r1, r2
 8001acc:	1cbb      	adds	r3, r7, #2
 8001ace:	1c02      	adds	r2, r0, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	1c7b      	adds	r3, r7, #1
 8001ad4:	1c0a      	adds	r2, r1, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad8:	1c7b      	adds	r3, r7, #1
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae0:	1cbb      	adds	r3, r7, #2
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ae8:	e003      	b.n	8001af2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aea:	1cbb      	adds	r3, r7, #2
 8001aec:	881a      	ldrh	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0049      	lsls	r1, r1, #1
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40007000 	.word	0x40007000

08001b18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d11f      	bne.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	0013      	movs	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	189b      	adds	r3, r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4912      	ldr	r1, [pc, #72]	; (8001b94 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f7fe faec 	bl	8000128 <__udivsi3>
 8001b50:	0003      	movs	r3, r0
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b56:	e008      	b.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e001      	b.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e009      	b.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	401a      	ands	r2, r3
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d0ed      	beq.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b004      	add	sp, #16
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	fffff9ff 	.word	0xfffff9ff
 8001b90:	20000090 	.word	0x20000090
 8001b94:	000f4240 	.word	0x000f4240

08001b98 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001ba8:	2104      	movs	r1, #4
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8001bba:	bf30      	wfi
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	23e0      	movs	r3, #224	; 0xe0
 8001bd6:	01db      	lsls	r3, r3, #7
 8001bd8:	4013      	ands	r3, r2
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e2fe      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x1e>
 8001c00:	e07c      	b.n	8001cfc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c02:	4bc3      	ldr	r3, [pc, #780]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2238      	movs	r2, #56	; 0x38
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c0c:	4bc0      	ldr	r3, [pc, #768]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2203      	movs	r2, #3
 8001c12:	4013      	ands	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b10      	cmp	r3, #16
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3e>
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d002      	beq.n	8001c28 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d10b      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	4bb9      	ldr	r3, [pc, #740]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	029b      	lsls	r3, r3, #10
 8001c30:	4013      	ands	r3, r2
 8001c32:	d062      	beq.n	8001cfa <HAL_RCC_OscConfig+0x116>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d15e      	bne.n	8001cfa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e2d9      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	025b      	lsls	r3, r3, #9
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x78>
 8001c4c:	4bb0      	ldr	r3, [pc, #704]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4baf      	ldr	r3, [pc, #700]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	0249      	lsls	r1, r1, #9
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e020      	b.n	8001c9e <HAL_RCC_OscConfig+0xba>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	23a0      	movs	r3, #160	; 0xa0
 8001c62:	02db      	lsls	r3, r3, #11
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d10e      	bne.n	8001c86 <HAL_RCC_OscConfig+0xa2>
 8001c68:	4ba9      	ldr	r3, [pc, #676]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4ba8      	ldr	r3, [pc, #672]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	02c9      	lsls	r1, r1, #11
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	4ba6      	ldr	r3, [pc, #664]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4ba5      	ldr	r3, [pc, #660]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	0249      	lsls	r1, r1, #9
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e00b      	b.n	8001c9e <HAL_RCC_OscConfig+0xba>
 8001c86:	4ba2      	ldr	r3, [pc, #648]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4ba1      	ldr	r3, [pc, #644]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	49a1      	ldr	r1, [pc, #644]	; (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	4b9f      	ldr	r3, [pc, #636]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b9e      	ldr	r3, [pc, #632]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	499f      	ldr	r1, [pc, #636]	; (8001f18 <HAL_RCC_OscConfig+0x334>)
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d014      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fc53 	bl	8001550 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc4e 	bl	8001550 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e298      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc2:	4b93      	ldr	r3, [pc, #588]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	029b      	lsls	r3, r3, #10
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xcc>
 8001cce:	e015      	b.n	8001cfc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fc3e 	bl	8001550 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cda:	f7ff fc39 	bl	8001550 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b64      	cmp	r3, #100	; 0x64
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e283      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cec:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	029b      	lsls	r3, r3, #10
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0xf6>
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d100      	bne.n	8001d08 <HAL_RCC_OscConfig+0x124>
 8001d06:	e099      	b.n	8001e3c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d08:	4b81      	ldr	r3, [pc, #516]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2238      	movs	r2, #56	; 0x38
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d12:	4b7f      	ldr	r3, [pc, #508]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2203      	movs	r2, #3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d102      	bne.n	8001d28 <HAL_RCC_OscConfig+0x144>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d002      	beq.n	8001d2e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d135      	bne.n	8001d9a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2e:	4b78      	ldr	r3, [pc, #480]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4013      	ands	r3, r2
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x162>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e256      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a74      	ldr	r2, [pc, #464]	; (8001f1c <HAL_RCC_OscConfig+0x338>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	021a      	lsls	r2, r3, #8
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d112      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d62:	4b6b      	ldr	r3, [pc, #428]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <HAL_RCC_OscConfig+0x33c>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d76:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0adb      	lsrs	r3, r3, #11
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4013      	ands	r3, r2
 8001d80:	4a68      	ldr	r2, [pc, #416]	; (8001f24 <HAL_RCC_OscConfig+0x340>)
 8001d82:	40da      	lsrs	r2, r3
 8001d84:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x344>)
 8001d86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d88:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x348>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fb83 	bl	8001498 <HAL_InitTick>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d051      	beq.n	8001e3a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e22c      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d030      	beq.n	8001e04 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a5e      	ldr	r2, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x33c>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001db6:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0049      	lsls	r1, r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fbc4 	bl	8001550 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fbbf 	bl	8001550 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e209      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4013      	ands	r3, r2
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a4a      	ldr	r2, [pc, #296]	; (8001f1c <HAL_RCC_OscConfig+0x338>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	021a      	lsls	r2, r3, #8
 8001dfc:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	e01b      	b.n	8001e3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	4949      	ldr	r1, [pc, #292]	; (8001f30 <HAL_RCC_OscConfig+0x34c>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fb9e 	bl	8001550 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fb99 	bl	8001550 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1e3      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x236>
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2208      	movs	r2, #8
 8001e42:	4013      	ands	r3, r2
 8001e44:	d047      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2238      	movs	r2, #56	; 0x38
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b18      	cmp	r3, #24
 8001e50:	d10a      	bne.n	8001e68 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e56:	2202      	movs	r2, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d03c      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d138      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e1c5      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d019      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fb68 	bl	8001550 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff fb63 	bl	8001550 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1ad      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d0f1      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2a2>
 8001ea2:	e018      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fb4e 	bl	8001550 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eba:	f7ff fb49 	bl	8001550 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e193      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d1f1      	bne.n	8001eba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2204      	movs	r2, #4
 8001edc:	4013      	ands	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x2fe>
 8001ee0:	e0c6      	b.n	8002070 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	231f      	movs	r3, #31
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2238      	movs	r2, #56	; 0x38
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d11e      	bne.n	8001f34 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d100      	bne.n	8001f02 <HAL_RCC_OscConfig+0x31e>
 8001f00:	e0b6      	b.n	8002070 <HAL_RCC_OscConfig+0x48c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d000      	beq.n	8001f0c <HAL_RCC_OscConfig+0x328>
 8001f0a:	e0b1      	b.n	8002070 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e171      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	fffeffff 	.word	0xfffeffff
 8001f18:	fffbffff 	.word	0xfffbffff
 8001f1c:	ffff80ff 	.word	0xffff80ff
 8001f20:	ffffc7ff 	.word	0xffffc7ff
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	20000090 	.word	0x20000090
 8001f2c:	20000094 	.word	0x20000094
 8001f30:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f34:	4bb1      	ldr	r3, [pc, #708]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	055b      	lsls	r3, r3, #21
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x360>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x362>
 8001f44:	2300      	movs	r3, #0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d011      	beq.n	8001f6e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4bac      	ldr	r3, [pc, #688]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f4e:	4bab      	ldr	r3, [pc, #684]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0549      	lsls	r1, r1, #21
 8001f54:	430a      	orrs	r2, r1
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f58:	4ba8      	ldr	r3, [pc, #672]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f66:	231f      	movs	r3, #31
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	4ba4      	ldr	r3, [pc, #656]	; (8002200 <HAL_RCC_OscConfig+0x61c>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4013      	ands	r3, r2
 8001f78:	d11a      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7a:	4ba1      	ldr	r3, [pc, #644]	; (8002200 <HAL_RCC_OscConfig+0x61c>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4ba0      	ldr	r3, [pc, #640]	; (8002200 <HAL_RCC_OscConfig+0x61c>)
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	0049      	lsls	r1, r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fae2 	bl	8001550 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f92:	f7ff fadd 	bl	8001550 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e127      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa4:	4b96      	ldr	r3, [pc, #600]	; (8002200 <HAL_RCC_OscConfig+0x61c>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4013      	ands	r3, r2
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3e2>
 8001fb8:	4b90      	ldr	r3, [pc, #576]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001fba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fbc:	4b8f      	ldr	r3, [pc, #572]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x404>
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001fd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fd2:	4b8a      	ldr	r3, [pc, #552]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fda:	4b88      	ldr	r3, [pc, #544]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001fdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fde:	4b87      	ldr	r3, [pc, #540]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
 8001fe8:	4b84      	ldr	r3, [pc, #528]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001fea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fec:	4b83      	ldr	r3, [pc, #524]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ff4:	4b81      	ldr	r3, [pc, #516]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff8:	4b80      	ldr	r3, [pc, #512]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff faa2 	bl	8001550 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002010:	e009      	b.n	8002026 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fa9d 	bl	8001550 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	4a79      	ldr	r2, [pc, #484]	; (8002204 <HAL_RCC_OscConfig+0x620>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0e6      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002026:	4b75      	ldr	r3, [pc, #468]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x42e>
 8002030:	e013      	b.n	800205a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff fa8d 	bl	8001550 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203a:	e009      	b.n	8002050 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff fa88 	bl	8001550 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4a6f      	ldr	r2, [pc, #444]	; (8002204 <HAL_RCC_OscConfig+0x620>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0d1      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002050:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800205a:	231f      	movs	r3, #31
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b65      	ldr	r3, [pc, #404]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002068:	4b64      	ldr	r3, [pc, #400]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 800206a:	4967      	ldr	r1, [pc, #412]	; (8002208 <HAL_RCC_OscConfig+0x624>)
 800206c:	400a      	ands	r2, r1
 800206e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0x496>
 8002078:	e0bb      	b.n	80021f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207a:	4b60      	ldr	r3, [pc, #384]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2238      	movs	r2, #56	; 0x38
 8002080:	4013      	ands	r3, r2
 8002082:	2b10      	cmp	r3, #16
 8002084:	d100      	bne.n	8002088 <HAL_RCC_OscConfig+0x4a4>
 8002086:	e07b      	b.n	8002180 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d156      	bne.n	800213e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002096:	495d      	ldr	r1, [pc, #372]	; (800220c <HAL_RCC_OscConfig+0x628>)
 8002098:	400a      	ands	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff fa58 	bl	8001550 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7ff fa53 	bl	8001550 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e09d      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	049b      	lsls	r3, r3, #18
 80020c0:	4013      	ands	r3, r2
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c4:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a51      	ldr	r2, [pc, #324]	; (8002210 <HAL_RCC_OscConfig+0x62c>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	431a      	orrs	r2, r3
 80020f2:	4b42      	ldr	r3, [pc, #264]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	0449      	lsls	r1, r1, #17
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	0549      	lsls	r1, r1, #21
 8002110:	430a      	orrs	r2, r1
 8002112:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff fa1c 	bl	8001550 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211e:	f7ff fa17 	bl	8001550 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e061      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	049b      	lsls	r3, r3, #18
 8002138:	4013      	ands	r3, r2
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x53a>
 800213c:	e059      	b.n	80021f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002144:	4931      	ldr	r1, [pc, #196]	; (800220c <HAL_RCC_OscConfig+0x628>)
 8002146:	400a      	ands	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff fa01 	bl	8001550 <HAL_GetTick>
 800214e:	0003      	movs	r3, r0
 8002150:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f9fc 	bl	8001550 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e046      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	049b      	lsls	r3, r3, #18
 800216e:	4013      	ands	r3, r2
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 8002178:	4926      	ldr	r1, [pc, #152]	; (8002214 <HAL_RCC_OscConfig+0x630>)
 800217a:	400a      	ands	r2, r1
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	e038      	b.n	80021f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e033      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x618>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2203      	movs	r2, #3
 8002196:	401a      	ands	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	429a      	cmp	r2, r3
 800219e:	d126      	bne.n	80021ee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2270      	movs	r2, #112	; 0x70
 80021a4:	401a      	ands	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11f      	bne.n	80021ee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	23fe      	movs	r3, #254	; 0xfe
 80021b2:	01db      	lsls	r3, r3, #7
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d116      	bne.n	80021ee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	23f8      	movs	r3, #248	; 0xf8
 80021c4:	039b      	lsls	r3, r3, #14
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d10e      	bne.n	80021ee <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	23e0      	movs	r3, #224	; 0xe0
 80021d4:	051b      	lsls	r3, r3, #20
 80021d6:	401a      	ands	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	0f5b      	lsrs	r3, r3, #29
 80021e4:	075a      	lsls	r2, r3, #29
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b008      	add	sp, #32
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
 8002204:	00001388 	.word	0x00001388
 8002208:	efffffff 	.word	0xefffffff
 800220c:	feffffff 	.word	0xfeffffff
 8002210:	11c1808c 	.word	0x11c1808c
 8002214:	eefefffc 	.word	0xeefefffc

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0e9      	b.n	8002400 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2207      	movs	r2, #7
 8002232:	4013      	ands	r3, r2
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d91e      	bls.n	8002278 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b73      	ldr	r3, [pc, #460]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2207      	movs	r2, #7
 8002240:	4393      	bics	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	4b70      	ldr	r3, [pc, #448]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800224c:	f7ff f980 	bl	8001550 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002254:	e009      	b.n	800226a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002256:	f7ff f97b 	bl	8001550 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	4a6a      	ldr	r2, [pc, #424]	; (800240c <HAL_RCC_ClockConfig+0x1f4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0ca      	b.n	8002400 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800226a:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2207      	movs	r2, #7
 8002270:	4013      	ands	r3, r2
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d1ee      	bne.n	8002256 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d015      	beq.n	80022ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2204      	movs	r2, #4
 8002288:	4013      	ands	r3, r2
 800228a:	d006      	beq.n	800229a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800228c:	4b60      	ldr	r3, [pc, #384]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 8002292:	21e0      	movs	r1, #224	; 0xe0
 8002294:	01c9      	lsls	r1, r1, #7
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <HAL_RCC_ClockConfig+0x1fc>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4013      	ands	r3, r2
 80022b6:	d057      	beq.n	8002368 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	029b      	lsls	r3, r3, #10
 80022c8:	4013      	ands	r3, r2
 80022ca:	d12b      	bne.n	8002324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e097      	b.n	8002400 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d8:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	049b      	lsls	r3, r3, #18
 80022e0:	4013      	ands	r3, r2
 80022e2:	d11f      	bne.n	8002324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e08b      	b.n	8002400 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f0:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4013      	ands	r3, r2
 80022fa:	d113      	bne.n	8002324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e07f      	b.n	8002400 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d106      	bne.n	8002316 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 800230a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230c:	2202      	movs	r2, #2
 800230e:	4013      	ands	r3, r2
 8002310:	d108      	bne.n	8002324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e074      	b.n	8002400 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002316:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e06d      	b.n	8002400 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002324:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2207      	movs	r2, #7
 800232a:	4393      	bics	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4b37      	ldr	r3, [pc, #220]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 8002334:	430a      	orrs	r2, r1
 8002336:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002338:	f7ff f90a 	bl	8001550 <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002340:	e009      	b.n	8002356 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002342:	f7ff f905 	bl	8001550 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a2f      	ldr	r2, [pc, #188]	; (800240c <HAL_RCC_ClockConfig+0x1f4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e054      	b.n	8002400 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2238      	movs	r2, #56	; 0x38
 800235c:	401a      	ands	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	429a      	cmp	r2, r3
 8002366:	d1ec      	bne.n	8002342 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2207      	movs	r2, #7
 800236e:	4013      	ands	r3, r2
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d21e      	bcs.n	80023b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2207      	movs	r2, #7
 800237c:	4393      	bics	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002388:	f7ff f8e2 	bl	8001550 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002390:	e009      	b.n	80023a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7ff f8dd 	bl	8001550 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <HAL_RCC_ClockConfig+0x1f4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e02c      	b.n	8002400 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2207      	movs	r2, #7
 80023ac:	4013      	ands	r3, r2
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4a15      	ldr	r2, [pc, #84]	; (8002418 <HAL_RCC_ClockConfig+0x200>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 80023ce:	430a      	orrs	r2, r1
 80023d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023d2:	f000 f829 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80023d6:	0001      	movs	r1, r0
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_RCC_ClockConfig+0x1f8>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	220f      	movs	r2, #15
 80023e0:	401a      	ands	r2, r3
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_RCC_ClockConfig+0x204>)
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	58d3      	ldr	r3, [r2, r3]
 80023e8:	221f      	movs	r2, #31
 80023ea:	4013      	ands	r3, r2
 80023ec:	000a      	movs	r2, r1
 80023ee:	40da      	lsrs	r2, r3
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_ClockConfig+0x208>)
 80023f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_ClockConfig+0x20c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7ff f84d 	bl	8001498 <HAL_InitTick>
 80023fe:	0003      	movs	r3, r0
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40022000 	.word	0x40022000
 800240c:	00001388 	.word	0x00001388
 8002410:	40021000 	.word	0x40021000
 8002414:	fffff0ff 	.word	0xfffff0ff
 8002418:	ffff8fff 	.word	0xffff8fff
 800241c:	08005a18 	.word	0x08005a18
 8002420:	20000090 	.word	0x20000090
 8002424:	20000094 	.word	0x20000094

08002428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800242e:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2238      	movs	r2, #56	; 0x38
 8002434:	4013      	ands	r3, r2
 8002436:	d10f      	bne.n	8002458 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0adb      	lsrs	r3, r3, #11
 800243e:	2207      	movs	r2, #7
 8002440:	4013      	ands	r3, r2
 8002442:	2201      	movs	r2, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	0013      	movs	r3, r2
 8002448:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	4835      	ldr	r0, [pc, #212]	; (8002524 <HAL_RCC_GetSysClockFreq+0xfc>)
 800244e:	f7fd fe6b 	bl	8000128 <__udivsi3>
 8002452:	0003      	movs	r3, r0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	e05d      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2238      	movs	r2, #56	; 0x38
 800245e:	4013      	ands	r3, r2
 8002460:	2b08      	cmp	r3, #8
 8002462:	d102      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_RCC_GetSysClockFreq+0x100>)
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	e054      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2238      	movs	r2, #56	; 0x38
 8002470:	4013      	ands	r3, r2
 8002472:	2b10      	cmp	r3, #16
 8002474:	d138      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002476:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2203      	movs	r2, #3
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	2207      	movs	r2, #7
 8002488:	4013      	ands	r3, r2
 800248a:	3301      	adds	r3, #1
 800248c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d10d      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	4824      	ldr	r0, [pc, #144]	; (8002528 <HAL_RCC_GetSysClockFreq+0x100>)
 8002498:	f7fd fe46 	bl	8000128 <__udivsi3>
 800249c:	0003      	movs	r3, r0
 800249e:	0019      	movs	r1, r3
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	227f      	movs	r2, #127	; 0x7f
 80024a8:	4013      	ands	r3, r2
 80024aa:	434b      	muls	r3, r1
 80024ac:	617b      	str	r3, [r7, #20]
        break;
 80024ae:	e00d      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	481c      	ldr	r0, [pc, #112]	; (8002524 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024b4:	f7fd fe38 	bl	8000128 <__udivsi3>
 80024b8:	0003      	movs	r3, r0
 80024ba:	0019      	movs	r1, r3
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	227f      	movs	r2, #127	; 0x7f
 80024c4:	4013      	ands	r3, r2
 80024c6:	434b      	muls	r3, r1
 80024c8:	617b      	str	r3, [r7, #20]
        break;
 80024ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0f5b      	lsrs	r3, r3, #29
 80024d2:	2207      	movs	r2, #7
 80024d4:	4013      	ands	r3, r2
 80024d6:	3301      	adds	r3, #1
 80024d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	6978      	ldr	r0, [r7, #20]
 80024de:	f7fd fe23 	bl	8000128 <__udivsi3>
 80024e2:	0003      	movs	r3, r0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e015      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2238      	movs	r2, #56	; 0x38
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d103      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2238      	movs	r2, #56	; 0x38
 8002502:	4013      	ands	r3, r2
 8002504:	2b18      	cmp	r3, #24
 8002506:	d103      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002508:	23fa      	movs	r3, #250	; 0xfa
 800250a:	01db      	lsls	r3, r3, #7
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	e001      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002514:	693b      	ldr	r3, [r7, #16]
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b006      	add	sp, #24
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40021000 	.word	0x40021000
 8002524:	00f42400 	.word	0x00f42400
 8002528:	007a1200 	.word	0x007a1200

0800252c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002530:	4b02      	ldr	r3, [pc, #8]	; (800253c <HAL_RCC_GetHCLKFreq+0x10>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	20000090 	.word	0x20000090

08002540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002544:	f7ff fff2 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8002548:	0004      	movs	r4, r0
 800254a:	f7ff fb3f 	bl	8001bcc <LL_RCC_GetAPB1Prescaler>
 800254e:	0003      	movs	r3, r0
 8002550:	0b1a      	lsrs	r2, r3, #12
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002554:	0092      	lsls	r2, r2, #2
 8002556:	58d3      	ldr	r3, [r2, r3]
 8002558:	221f      	movs	r2, #31
 800255a:	4013      	ands	r3, r2
 800255c:	40dc      	lsrs	r4, r3
 800255e:	0023      	movs	r3, r4
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	bdb0      	pop	{r4, r5, r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	08005a58 	.word	0x08005a58

0800256c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002574:	2313      	movs	r3, #19
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800257c:	2312      	movs	r3, #18
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	029b      	lsls	r3, r3, #10
 800258c:	4013      	ands	r3, r2
 800258e:	d100      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002590:	e0a3      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2011      	movs	r0, #17
 8002594:	183b      	adds	r3, r7, r0
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4ba5      	ldr	r3, [pc, #660]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800259c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	055b      	lsls	r3, r3, #21
 80025a2:	4013      	ands	r3, r2
 80025a4:	d110      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4ba2      	ldr	r3, [pc, #648]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025aa:	4ba1      	ldr	r3, [pc, #644]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	0549      	lsls	r1, r1, #21
 80025b0:	430a      	orrs	r2, r1
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80025b4:	4b9e      	ldr	r3, [pc, #632]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	055b      	lsls	r3, r3, #21
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	183b      	adds	r3, r7, r0
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c8:	4b9a      	ldr	r3, [pc, #616]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b99      	ldr	r3, [pc, #612]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	0049      	lsls	r1, r1, #1
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025d6:	f7fe ffbb 	bl	8001550 <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025de:	e00b      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7fe ffb6 	bl	8001550 <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d904      	bls.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80025ee:	2313      	movs	r3, #19
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2203      	movs	r2, #3
 80025f4:	701a      	strb	r2, [r3, #0]
        break;
 80025f6:	e005      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025f8:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d0ed      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002604:	2313      	movs	r3, #19
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d154      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800260e:	4b88      	ldr	r3, [pc, #544]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002612:	23c0      	movs	r3, #192	; 0xc0
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4013      	ands	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d019      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	429a      	cmp	r2, r3
 8002628:	d014      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800262a:	4b81      	ldr	r3, [pc, #516]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	4a82      	ldr	r2, [pc, #520]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002630:	4013      	ands	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002634:	4b7e      	ldr	r3, [pc, #504]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002636:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002638:	4b7d      	ldr	r3, [pc, #500]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	0249      	lsls	r1, r1, #9
 800263e:	430a      	orrs	r2, r1
 8002640:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002642:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002646:	4b7a      	ldr	r3, [pc, #488]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002648:	497c      	ldr	r1, [pc, #496]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800264a:	400a      	ands	r2, r1
 800264c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800264e:	4b78      	ldr	r3, [pc, #480]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d016      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe ff78 	bl	8001550 <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002664:	e00c      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7fe ff73 	bl	8001550 <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	4a73      	ldr	r2, [pc, #460]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d904      	bls.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002676:	2313      	movs	r3, #19
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	2203      	movs	r2, #3
 800267c:	701a      	strb	r2, [r3, #0]
            break;
 800267e:	e004      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002680:	4b6b      	ldr	r3, [pc, #428]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	2202      	movs	r2, #2
 8002686:	4013      	ands	r3, r2
 8002688:	d0ed      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800268a:	2313      	movs	r3, #19
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002694:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	4a67      	ldr	r2, [pc, #412]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80026a8:	e00c      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026aa:	2312      	movs	r3, #18
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	2213      	movs	r2, #19
 80026b0:	18ba      	adds	r2, r7, r2
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e005      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b8:	2312      	movs	r3, #18
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2213      	movs	r2, #19
 80026be:	18ba      	adds	r2, r7, r2
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026c4:	2311      	movs	r3, #17
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4b58      	ldr	r3, [pc, #352]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026d2:	4b57      	ldr	r3, [pc, #348]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026d4:	495b      	ldr	r1, [pc, #364]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e4:	4b52      	ldr	r3, [pc, #328]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	2203      	movs	r2, #3
 80026ea:	4393      	bics	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4b4f      	ldr	r3, [pc, #316]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2210      	movs	r2, #16
 80026fe:	4013      	ands	r3, r2
 8002700:	d009      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002702:	4b4b      	ldr	r3, [pc, #300]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	4a50      	ldr	r2, [pc, #320]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002708:	4013      	ands	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002712:	430a      	orrs	r2, r1
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002722:	4b43      	ldr	r3, [pc, #268]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	4a49      	ldr	r2, [pc, #292]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002728:	4013      	ands	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002732:	430a      	orrs	r2, r1
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4013      	ands	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002752:	430a      	orrs	r2, r1
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2220      	movs	r2, #32
 800275c:	4013      	ands	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002760:	4b33      	ldr	r3, [pc, #204]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002766:	4013      	ands	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002770:	430a      	orrs	r2, r1
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	01db      	lsls	r3, r3, #7
 800277c:	4013      	ands	r3, r2
 800277e:	d015      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	0899      	lsrs	r1, r3, #2
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800278e:	430a      	orrs	r2, r1
 8002790:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	05db      	lsls	r3, r3, #23
 800279a:	429a      	cmp	r2, r3
 800279c:	d106      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	0249      	lsls	r1, r1, #9
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	039b      	lsls	r3, r3, #14
 80027b4:	4013      	ands	r3, r2
 80027b6:	d016      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	4a26      	ldr	r2, [pc, #152]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	03db      	lsls	r3, r3, #15
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d106      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0449      	lsls	r1, r1, #17
 80027e2:	430a      	orrs	r2, r1
 80027e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4013      	ands	r3, r2
 80027f0:	d016      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	4a19      	ldr	r2, [pc, #100]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002802:	430a      	orrs	r2, r1
 8002804:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	01db      	lsls	r3, r3, #7
 800280e:	429a      	cmp	r2, r3
 8002810:	d106      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	0249      	lsls	r1, r1, #9
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002820:	2312      	movs	r3, #18
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	781b      	ldrb	r3, [r3, #0]
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b006      	add	sp, #24
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40021000 	.word	0x40021000
 8002834:	40007000 	.word	0x40007000
 8002838:	fffffcff 	.word	0xfffffcff
 800283c:	fffeffff 	.word	0xfffeffff
 8002840:	00001388 	.word	0x00001388
 8002844:	efffffff 	.word	0xefffffff
 8002848:	fffff3ff 	.word	0xfffff3ff
 800284c:	fff3ffff 	.word	0xfff3ffff
 8002850:	ffcfffff 	.word	0xffcfffff
 8002854:	ffffcfff 	.word	0xffffcfff
 8002858:	ffbfffff 	.word	0xffbfffff
 800285c:	ffff3fff 	.word	0xffff3fff

08002860 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002868:	230f      	movs	r3, #15
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d100      	bne.n	8002878 <HAL_RTC_Init+0x18>
 8002876:	e08c      	b.n	8002992 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2229      	movs	r2, #41	; 0x29
 800287c:	5c9b      	ldrb	r3, [r3, r2]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2228      	movs	r2, #40	; 0x28
 8002888:	2100      	movs	r1, #0
 800288a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2288      	movs	r2, #136	; 0x88
 8002890:	0212      	lsls	r2, r2, #8
 8002892:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f7fe fbc6 	bl	8001028 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2229      	movs	r2, #41	; 0x29
 80028a0:	2102      	movs	r1, #2
 80028a2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2210      	movs	r2, #16
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d062      	beq.n	8002978 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	22ca      	movs	r2, #202	; 0xca
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2253      	movs	r2, #83	; 0x53
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80028c2:	250f      	movs	r5, #15
 80028c4:	197c      	adds	r4, r7, r5
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 f892 	bl	80029f2 <RTC_EnterInitMode>
 80028ce:	0003      	movs	r3, r0
 80028d0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80028d2:	0028      	movs	r0, r5
 80028d4:	183b      	adds	r3, r7, r0
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d12c      	bne.n	8002936 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	492e      	ldr	r1, [pc, #184]	; (80029a0 <HAL_RTC_Init+0x140>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6999      	ldr	r1, [r3, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6912      	ldr	r2, [r2, #16]
 8002912:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6919      	ldr	r1, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	041a      	lsls	r2, r3, #16
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002928:	183c      	adds	r4, r7, r0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	0018      	movs	r0, r3
 800292e:	f000 f8a3 	bl	8002a78 <RTC_ExitInitMode>
 8002932:	0003      	movs	r3, r0
 8002934:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002936:	230f      	movs	r3, #15
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	00d2      	lsls	r2, r2, #3
 800294c:	08d2      	lsrs	r2, r2, #3
 800294e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6999      	ldr	r1, [r3, #24]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
 8002976:	e003      	b.n	8002980 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002978:	230f      	movs	r3, #15
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002980:	230f      	movs	r3, #15
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2229      	movs	r2, #41	; 0x29
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002992:	230f      	movs	r3, #15
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	781b      	ldrb	r3, [r3, #0]
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b004      	add	sp, #16
 800299e:	bdb0      	pop	{r4, r5, r7, pc}
 80029a0:	fb8fffbf 	.word	0xfb8fffbf

080029a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	21a0      	movs	r1, #160	; 0xa0
 80029b8:	438a      	bics	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80029bc:	f7fe fdc8 	bl	8001550 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80029c4:	e00a      	b.n	80029dc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80029c6:	f7fe fdc3 	bl	8001550 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad2      	subs	r2, r2, r3
 80029d0:	23fa      	movs	r3, #250	; 0xfa
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d901      	bls.n	80029dc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e006      	b.n	80029ea <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	4013      	ands	r3, r2
 80029e6:	d0ee      	beq.n	80029c6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80029fa:	230f      	movs	r3, #15
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2240      	movs	r2, #64	; 0x40
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d12c      	bne.n	8002a68 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a1e:	f7fe fd97 	bl	8001550 <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a26:	e014      	b.n	8002a52 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a28:	f7fe fd92 	bl	8001550 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	200f      	movs	r0, #15
 8002a34:	183b      	adds	r3, r7, r0
 8002a36:	1839      	adds	r1, r7, r0
 8002a38:	7809      	ldrb	r1, [r1, #0]
 8002a3a:	7019      	strb	r1, [r3, #0]
 8002a3c:	23fa      	movs	r3, #250	; 0xfa
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d906      	bls.n	8002a52 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002a44:	183b      	adds	r3, r7, r0
 8002a46:	2203      	movs	r2, #3
 8002a48:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2229      	movs	r2, #41	; 0x29
 8002a4e:	2103      	movs	r1, #3
 8002a50:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2240      	movs	r2, #64	; 0x40
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d104      	bne.n	8002a68 <RTC_EnterInitMode+0x76>
 8002a5e:	230f      	movs	r3, #15
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d1df      	bne.n	8002a28 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002a68:	230f      	movs	r3, #15
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	781b      	ldrb	r3, [r3, #0]
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b004      	add	sp, #16
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a80:	240f      	movs	r4, #15
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002a88:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <RTC_ExitInitMode+0x84>)
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <RTC_ExitInitMode+0x84>)
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	438a      	bics	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <RTC_ExitInitMode+0x84>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d10d      	bne.n	8002aba <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ff7f 	bl	80029a4 <HAL_RTC_WaitForSynchro>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d021      	beq.n	8002aee <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2229      	movs	r2, #41	; 0x29
 8002aae:	2103      	movs	r1, #3
 8002ab0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e019      	b.n	8002aee <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <RTC_ExitInitMode+0x84>)
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <RTC_ExitInitMode+0x84>)
 8002ac0:	2120      	movs	r1, #32
 8002ac2:	438a      	bics	r2, r1
 8002ac4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff ff6b 	bl	80029a4 <HAL_RTC_WaitForSynchro>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d007      	beq.n	8002ae2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2229      	movs	r2, #41	; 0x29
 8002ad6:	2103      	movs	r1, #3
 8002ad8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002ada:	230f      	movs	r3, #15
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2203      	movs	r2, #3
 8002ae0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <RTC_ExitInitMode+0x84>)
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <RTC_ExitInitMode+0x84>)
 8002ae8:	2120      	movs	r1, #32
 8002aea:	430a      	orrs	r2, r1
 8002aec:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002aee:	230f      	movs	r3, #15
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b005      	add	sp, #20
 8002afa:	bd90      	pop	{r4, r7, pc}
 8002afc:	40002800 	.word	0x40002800

08002b00 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2228      	movs	r2, #40	; 0x28
 8002b10:	5c9b      	ldrb	r3, [r3, r2]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e082      	b.n	8002c20 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2228      	movs	r2, #40	; 0x28
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2229      	movs	r2, #41	; 0x29
 8002b26:	2102      	movs	r1, #2
 8002b28:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	22ca      	movs	r2, #202	; 0xca
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2253      	movs	r2, #83	; 0x53
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4938      	ldr	r1, [pc, #224]	; (8002c28 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8002b46:	400a      	ands	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2104      	movs	r1, #4
 8002b56:	430a      	orrs	r2, r1
 8002b58:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	4013      	ands	r3, r2
 8002b62:	d121      	bne.n	8002ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8002b64:	f7fe fcf4 	bl	8001550 <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002b6c:	e016      	b.n	8002b9c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b6e:	f7fe fcef 	bl	8001550 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1ad2      	subs	r2, r2, r3
 8002b78:	23fa      	movs	r3, #250	; 0xfa
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d90d      	bls.n	8002b9c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2229      	movs	r2, #41	; 0x29
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2228      	movs	r2, #40	; 0x28
 8002b94:	2100      	movs	r1, #0
 8002b96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e041      	b.n	8002c20 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d0e2      	beq.n	8002b6e <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2107      	movs	r1, #7
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6999      	ldr	r1, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	58d3      	ldr	r3, [r2, r3]
 8002bd6:	4916      	ldr	r1, [pc, #88]	; (8002c30 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	0312      	lsls	r2, r2, #12
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	01c9      	lsls	r1, r1, #7
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2180      	movs	r1, #128	; 0x80
 8002c00:	00c9      	lsls	r1, r1, #3
 8002c02:	430a      	orrs	r2, r1
 8002c04:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	22ff      	movs	r2, #255	; 0xff
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2229      	movs	r2, #41	; 0x29
 8002c12:	2101      	movs	r1, #1
 8002c14:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2228      	movs	r2, #40	; 0x28
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b006      	add	sp, #24
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	fffffbff 	.word	0xfffffbff
 8002c2c:	40002800 	.word	0x40002800
 8002c30:	40021800 	.word	0x40021800

08002c34 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c42:	2204      	movs	r2, #4
 8002c44:	4013      	ands	r3, r2
 8002c46:	d00b      	beq.n	8002c60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2104      	movs	r1, #4
 8002c54:	430a      	orrs	r2, r1
 8002c56:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 f808 	bl	8002c70 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2229      	movs	r2, #41	; 0x29
 8002c64:	2101      	movs	r1, #1
 8002c66:	5499      	strb	r1, [r3, r2]
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e04a      	b.n	8002d28 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	223d      	movs	r2, #61	; 0x3d
 8002c96:	5c9b      	ldrb	r3, [r3, r2]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	223c      	movs	r2, #60	; 0x3c
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fe fa03 	bl	80010b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	223d      	movs	r2, #61	; 0x3d
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	f000 fa09 	bl	80030d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2248      	movs	r2, #72	; 0x48
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	223e      	movs	r2, #62	; 0x3e
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	223f      	movs	r2, #63	; 0x3f
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2240      	movs	r2, #64	; 0x40
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2241      	movs	r2, #65	; 0x41
 8002cea:	2101      	movs	r1, #1
 8002cec:	5499      	strb	r1, [r3, r2]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2242      	movs	r2, #66	; 0x42
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2243      	movs	r2, #67	; 0x43
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2244      	movs	r2, #68	; 0x44
 8002d02:	2101      	movs	r1, #1
 8002d04:	5499      	strb	r1, [r3, r2]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2245      	movs	r2, #69	; 0x45
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2246      	movs	r2, #70	; 0x46
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2247      	movs	r2, #71	; 0x47
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	223d      	movs	r2, #61	; 0x3d
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	223d      	movs	r2, #61	; 0x3d
 8002d3c:	5c9b      	ldrb	r3, [r3, r2]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d001      	beq.n	8002d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e03d      	b.n	8002dc4 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	223d      	movs	r2, #61	; 0x3d
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_TIM_Base_Start_IT+0x9c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00a      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x50>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	05db      	lsls	r3, r3, #23
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d004      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x50>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d116      	bne.n	8002dae <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d016      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x90>
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	025b      	lsls	r3, r3, #9
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d011      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2101      	movs	r1, #1
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dac:	e008      	b.n	8002dc0 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e000      	b.n	8002dc2 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	00010007 	.word	0x00010007

08002dd8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2101      	movs	r1, #1
 8002dec:	438a      	bics	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <HAL_TIM_Base_Stop_IT+0x54>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d10d      	bne.n	8002e18 <HAL_TIM_Base_Stop_IT+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	4a0b      	ldr	r2, [pc, #44]	; (8002e30 <HAL_TIM_Base_Stop_IT+0x58>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_Base_Stop_IT+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2101      	movs	r1, #1
 8002e14:	438a      	bics	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	223d      	movs	r2, #61	; 0x3d
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b002      	add	sp, #8
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	00001111 	.word	0x00001111
 8002e30:	00000444 	.word	0x00000444

08002e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d124      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11d      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	4252      	negs	r2, r2
 8002e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 f916 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e007      	b.n	8002e8e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 f909 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f915 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d125      	bne.n	8002eee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d11e      	bne.n	8002eee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2205      	movs	r2, #5
 8002eb6:	4252      	negs	r2, r2
 8002eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	23c0      	movs	r3, #192	; 0xc0
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 f8e9 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002ed6:	e007      	b.n	8002ee8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f8dc 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 f8e8 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d124      	bne.n	8002f46 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2208      	movs	r2, #8
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d11d      	bne.n	8002f46 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2209      	movs	r2, #9
 8002f10:	4252      	negs	r2, r2
 8002f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2204      	movs	r2, #4
 8002f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	2203      	movs	r2, #3
 8002f22:	4013      	ands	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 f8bd 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002f2e:	e007      	b.n	8002f40 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 f8b0 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 f8bc 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d125      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d11e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2211      	movs	r2, #17
 8002f68:	4252      	negs	r2, r2
 8002f6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2208      	movs	r2, #8
 8002f70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	23c0      	movs	r3, #192	; 0xc0
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 f890 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e007      	b.n	8002f9a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 f883 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 f88f 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d10f      	bne.n	8002fce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d108      	bne.n	8002fce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4252      	negs	r2, r2
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd ffd7 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d10f      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b80      	cmp	r3, #128	; 0x80
 8002fe8:	d108      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2281      	movs	r2, #129	; 0x81
 8002ff0:	4252      	negs	r2, r2
 8002ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 f8ec 	bl	80031d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	401a      	ands	r2, r3
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	429a      	cmp	r2, r3
 800300e:	d10e      	bne.n	800302e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	4013      	ands	r3, r2
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	d107      	bne.n	800302e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_TIM_IRQHandler+0x260>)
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 f8db 	bl	80031e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	4013      	ands	r3, r2
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d10f      	bne.n	800305c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	4013      	ands	r3, r2
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d108      	bne.n	800305c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2241      	movs	r2, #65	; 0x41
 8003050:	4252      	negs	r2, r2
 8003052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 f836 	bl	80030c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2220      	movs	r2, #32
 8003064:	4013      	ands	r3, r2
 8003066:	2b20      	cmp	r3, #32
 8003068:	d10f      	bne.n	800308a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	4013      	ands	r3, r2
 8003074:	2b20      	cmp	r3, #32
 8003076:	d108      	bne.n	800308a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2221      	movs	r2, #33	; 0x21
 800307e:	4252      	negs	r2, r2
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 f89d 	bl	80031c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	fffffeff 	.word	0xfffffeff

08003098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b002      	add	sp, #8
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a30      	ldr	r2, [pc, #192]	; (80031ac <TIM_Base_SetConfig+0xd4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d008      	beq.n	8003102 <TIM_Base_SetConfig+0x2a>
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	05db      	lsls	r3, r3, #23
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d003      	beq.n	8003102 <TIM_Base_SetConfig+0x2a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <TIM_Base_SetConfig+0xd8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d108      	bne.n	8003114 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2270      	movs	r2, #112	; 0x70
 8003106:	4393      	bics	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a25      	ldr	r2, [pc, #148]	; (80031ac <TIM_Base_SetConfig+0xd4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d014      	beq.n	8003146 <TIM_Base_SetConfig+0x6e>
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	05db      	lsls	r3, r3, #23
 8003122:	429a      	cmp	r2, r3
 8003124:	d00f      	beq.n	8003146 <TIM_Base_SetConfig+0x6e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <TIM_Base_SetConfig+0xd8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00b      	beq.n	8003146 <TIM_Base_SetConfig+0x6e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <TIM_Base_SetConfig+0xdc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <TIM_Base_SetConfig+0x6e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <TIM_Base_SetConfig+0xe0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <TIM_Base_SetConfig+0x6e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <TIM_Base_SetConfig+0xe4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d108      	bne.n	8003158 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <TIM_Base_SetConfig+0xe8>)
 800314a:	4013      	ands	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	4393      	bics	r3, r2
 800315e:	001a      	movs	r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <TIM_Base_SetConfig+0xd4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0xbe>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <TIM_Base_SetConfig+0xe0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0xbe>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <TIM_Base_SetConfig+0xe4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d103      	bne.n	800319e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	615a      	str	r2, [r3, #20]
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b004      	add	sp, #16
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40002000 	.word	0x40002000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800
 80031c0:	fffffcff 	.word	0xfffffcff

080031c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b002      	add	sp, #8
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e046      	b.n	8003294 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2288      	movs	r2, #136	; 0x88
 800320a:	589b      	ldr	r3, [r3, r2]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d107      	bne.n	8003220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2284      	movs	r2, #132	; 0x84
 8003214:	2100      	movs	r1, #0
 8003216:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	0018      	movs	r0, r3
 800321c:	f7fd ff90 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2288      	movs	r2, #136	; 0x88
 8003224:	2124      	movs	r1, #36	; 0x24
 8003226:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	438a      	bics	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0018      	movs	r0, r3
 800323c:	f000 f980 	bl	8003540 <UART_SetConfig>
 8003240:	0003      	movs	r3, r0
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e024      	b.n	8003294 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f000 fbeb 	bl	8003a30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	490d      	ldr	r1, [pc, #52]	; (800329c <HAL_UART_Init+0xa8>)
 8003266:	400a      	ands	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	212a      	movs	r1, #42	; 0x2a
 8003276:	438a      	bics	r2, r1
 8003278:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	0018      	movs	r0, r3
 800328e:	f000 fc83 	bl	8003b98 <UART_CheckIdleState>
 8003292:	0003      	movs	r3, r0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}
 800329c:	ffffb7ff 	.word	0xffffb7ff

080032a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	1dbb      	adds	r3, r7, #6
 80032ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2288      	movs	r2, #136	; 0x88
 80032b4:	589b      	ldr	r3, [r3, r2]
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d000      	beq.n	80032bc <HAL_UART_Transmit+0x1c>
 80032ba:	e088      	b.n	80033ce <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_UART_Transmit+0x2a>
 80032c2:	1dbb      	adds	r3, r7, #6
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e080      	b.n	80033d0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	015b      	lsls	r3, r3, #5
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d109      	bne.n	80032ee <HAL_UART_Transmit+0x4e>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d105      	bne.n	80032ee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2201      	movs	r2, #1
 80032e6:	4013      	ands	r3, r2
 80032e8:	d001      	beq.n	80032ee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e070      	b.n	80033d0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2290      	movs	r2, #144	; 0x90
 80032f2:	2100      	movs	r1, #0
 80032f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2288      	movs	r2, #136	; 0x88
 80032fa:	2121      	movs	r1, #33	; 0x21
 80032fc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fe:	f7fe f927 	bl	8001550 <HAL_GetTick>
 8003302:	0003      	movs	r3, r0
 8003304:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1dba      	adds	r2, r7, #6
 800330a:	2154      	movs	r1, #84	; 0x54
 800330c:	8812      	ldrh	r2, [r2, #0]
 800330e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1dba      	adds	r2, r7, #6
 8003314:	2156      	movs	r1, #86	; 0x56
 8003316:	8812      	ldrh	r2, [r2, #0]
 8003318:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	015b      	lsls	r3, r3, #5
 8003322:	429a      	cmp	r2, r3
 8003324:	d108      	bne.n	8003338 <HAL_UART_Transmit+0x98>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e003      	b.n	8003340 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003340:	e02c      	b.n	800339c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	0013      	movs	r3, r2
 800334c:	2200      	movs	r2, #0
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	f000 fc70 	bl	8003c34 <UART_WaitOnFlagUntilTimeout>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d001      	beq.n	800335c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e039      	b.n	80033d0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	001a      	movs	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	05d2      	lsls	r2, r2, #23
 800336e:	0dd2      	lsrs	r2, r2, #23
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	3302      	adds	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e007      	b.n	800338a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2256      	movs	r2, #86	; 0x56
 800338e:	5a9b      	ldrh	r3, [r3, r2]
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b299      	uxth	r1, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2256      	movs	r2, #86	; 0x56
 800339a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2256      	movs	r2, #86	; 0x56
 80033a0:	5a9b      	ldrh	r3, [r3, r2]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1cc      	bne.n	8003342 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	0013      	movs	r3, r2
 80033b2:	2200      	movs	r2, #0
 80033b4:	2140      	movs	r1, #64	; 0x40
 80033b6:	f000 fc3d 	bl	8003c34 <UART_WaitOnFlagUntilTimeout>
 80033ba:	1e03      	subs	r3, r0, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e006      	b.n	80033d0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2288      	movs	r2, #136	; 0x88
 80033c6:	2120      	movs	r1, #32
 80033c8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b008      	add	sp, #32
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b092      	sub	sp, #72	; 0x48
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e0:	f3ef 8310 	mrs	r3, PRIMASK
 80033e4:	623b      	str	r3, [r7, #32]
  return(result);
 80033e6:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ea:	2301      	movs	r3, #1
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	494d      	ldr	r1, [pc, #308]	; (8003538 <HAL_UART_AbortReceive+0x160>)
 8003402:	400a      	ands	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	f383 8810 	msr	PRIMASK, r3
}
 8003410:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003412:	f3ef 8310 	mrs	r3, PRIMASK
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800341a:	643b      	str	r3, [r7, #64]	; 0x40
 800341c:	2301      	movs	r3, #1
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	f383 8810 	msr	PRIMASK, r3
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4942      	ldr	r1, [pc, #264]	; (800353c <HAL_UART_AbortReceive+0x164>)
 8003434:	400a      	ands	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	f383 8810 	msr	PRIMASK, r3
}
 8003442:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d118      	bne.n	800347e <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344c:	f3ef 8310 	mrs	r3, PRIMASK
 8003450:	617b      	str	r3, [r7, #20]
  return(result);
 8003452:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003456:	2301      	movs	r3, #1
 8003458:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	f383 8810 	msr	PRIMASK, r3
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2110      	movs	r1, #16
 800346e:	438a      	bics	r2, r1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003474:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f383 8810 	msr	PRIMASK, r3
}
 800347c:	46c0      	nop			; (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2240      	movs	r2, #64	; 0x40
 8003486:	4013      	ands	r3, r2
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d139      	bne.n	8003500 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348c:	f3ef 8310 	mrs	r3, PRIMASK
 8003490:	60bb      	str	r3, [r7, #8]
  return(result);
 8003492:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
 8003496:	2301      	movs	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	438a      	bics	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f383 8810 	msr	PRIMASK, r3
}
 80034bc:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	589b      	ldr	r3, [r3, r2]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01b      	beq.n	8003500 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	589b      	ldr	r3, [r3, r2]
 80034ce:	2200      	movs	r2, #0
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	589b      	ldr	r3, [r3, r2]
 80034d8:	0018      	movs	r0, r3
 80034da:	f7fe f921 	bl	8001720 <HAL_DMA_Abort>
 80034de:	1e03      	subs	r3, r0, #0
 80034e0:	d00e      	beq.n	8003500 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	589b      	ldr	r3, [r3, r2]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fe f97b 	bl	80017e4 <HAL_DMA_GetError>
 80034ee:	0003      	movs	r3, r0
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d105      	bne.n	8003500 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2290      	movs	r2, #144	; 0x90
 80034f8:	2110      	movs	r1, #16
 80034fa:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e017      	b.n	8003530 <HAL_UART_AbortReceive+0x158>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	225e      	movs	r2, #94	; 0x5e
 8003504:	2100      	movs	r1, #0
 8003506:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	220f      	movs	r2, #15
 800350e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2108      	movs	r1, #8
 800351c:	430a      	orrs	r2, r1
 800351e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	228c      	movs	r2, #140	; 0x8c
 8003524:	2120      	movs	r1, #32
 8003526:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b012      	add	sp, #72	; 0x48
 8003536:	bd80      	pop	{r7, pc}
 8003538:	fffffedf 	.word	0xfffffedf
 800353c:	effffffe 	.word	0xeffffffe

08003540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003540:	b5b0      	push	{r4, r5, r7, lr}
 8003542:	b090      	sub	sp, #64	; 0x40
 8003544:	af00      	add	r7, sp, #0
 8003546:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003548:	231a      	movs	r3, #26
 800354a:	2220      	movs	r2, #32
 800354c:	189b      	adds	r3, r3, r2
 800354e:	19db      	adds	r3, r3, r7
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	431a      	orrs	r2, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	431a      	orrs	r2, r3
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4313      	orrs	r3, r2
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4ac4      	ldr	r2, [pc, #784]	; (8003884 <UART_SetConfig+0x344>)
 8003574:	4013      	ands	r3, r2
 8003576:	0019      	movs	r1, r3
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	430b      	orrs	r3, r1
 8003580:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4abf      	ldr	r2, [pc, #764]	; (8003888 <UART_SetConfig+0x348>)
 800358a:	4013      	ands	r3, r2
 800358c:	0018      	movs	r0, r3
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	68d9      	ldr	r1, [r3, #12]
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	0003      	movs	r3, r0
 8003598:	430b      	orrs	r3, r1
 800359a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4ab9      	ldr	r2, [pc, #740]	; (800388c <UART_SetConfig+0x34c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035b2:	4313      	orrs	r3, r2
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4ab4      	ldr	r2, [pc, #720]	; (8003890 <UART_SetConfig+0x350>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	220f      	movs	r2, #15
 80035d4:	4393      	bics	r3, r2
 80035d6:	0018      	movs	r0, r3
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	0003      	movs	r3, r0
 80035e2:	430b      	orrs	r3, r1
 80035e4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4aaa      	ldr	r2, [pc, #680]	; (8003894 <UART_SetConfig+0x354>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d131      	bne.n	8003654 <UART_SetConfig+0x114>
 80035f0:	4ba9      	ldr	r3, [pc, #676]	; (8003898 <UART_SetConfig+0x358>)
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	2203      	movs	r2, #3
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d01d      	beq.n	8003638 <UART_SetConfig+0xf8>
 80035fc:	d823      	bhi.n	8003646 <UART_SetConfig+0x106>
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d00c      	beq.n	800361c <UART_SetConfig+0xdc>
 8003602:	d820      	bhi.n	8003646 <UART_SetConfig+0x106>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <UART_SetConfig+0xce>
 8003608:	2b01      	cmp	r3, #1
 800360a:	d00e      	beq.n	800362a <UART_SetConfig+0xea>
 800360c:	e01b      	b.n	8003646 <UART_SetConfig+0x106>
 800360e:	231b      	movs	r3, #27
 8003610:	2220      	movs	r2, #32
 8003612:	189b      	adds	r3, r3, r2
 8003614:	19db      	adds	r3, r3, r7
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e071      	b.n	8003700 <UART_SetConfig+0x1c0>
 800361c:	231b      	movs	r3, #27
 800361e:	2220      	movs	r2, #32
 8003620:	189b      	adds	r3, r3, r2
 8003622:	19db      	adds	r3, r3, r7
 8003624:	2202      	movs	r2, #2
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e06a      	b.n	8003700 <UART_SetConfig+0x1c0>
 800362a:	231b      	movs	r3, #27
 800362c:	2220      	movs	r2, #32
 800362e:	189b      	adds	r3, r3, r2
 8003630:	19db      	adds	r3, r3, r7
 8003632:	2204      	movs	r2, #4
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	e063      	b.n	8003700 <UART_SetConfig+0x1c0>
 8003638:	231b      	movs	r3, #27
 800363a:	2220      	movs	r2, #32
 800363c:	189b      	adds	r3, r3, r2
 800363e:	19db      	adds	r3, r3, r7
 8003640:	2208      	movs	r2, #8
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	e05c      	b.n	8003700 <UART_SetConfig+0x1c0>
 8003646:	231b      	movs	r3, #27
 8003648:	2220      	movs	r2, #32
 800364a:	189b      	adds	r3, r3, r2
 800364c:	19db      	adds	r3, r3, r7
 800364e:	2210      	movs	r2, #16
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e055      	b.n	8003700 <UART_SetConfig+0x1c0>
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a90      	ldr	r2, [pc, #576]	; (800389c <UART_SetConfig+0x35c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d106      	bne.n	800366c <UART_SetConfig+0x12c>
 800365e:	231b      	movs	r3, #27
 8003660:	2220      	movs	r2, #32
 8003662:	189b      	adds	r3, r3, r2
 8003664:	19db      	adds	r3, r3, r7
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e049      	b.n	8003700 <UART_SetConfig+0x1c0>
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a86      	ldr	r2, [pc, #536]	; (800388c <UART_SetConfig+0x34c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d13e      	bne.n	80036f4 <UART_SetConfig+0x1b4>
 8003676:	4b88      	ldr	r3, [pc, #544]	; (8003898 <UART_SetConfig+0x358>)
 8003678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800367a:	23c0      	movs	r3, #192	; 0xc0
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	4013      	ands	r3, r2
 8003680:	22c0      	movs	r2, #192	; 0xc0
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	4293      	cmp	r3, r2
 8003686:	d027      	beq.n	80036d8 <UART_SetConfig+0x198>
 8003688:	22c0      	movs	r2, #192	; 0xc0
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	4293      	cmp	r3, r2
 800368e:	d82a      	bhi.n	80036e6 <UART_SetConfig+0x1a6>
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	0112      	lsls	r2, r2, #4
 8003694:	4293      	cmp	r3, r2
 8003696:	d011      	beq.n	80036bc <UART_SetConfig+0x17c>
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	0112      	lsls	r2, r2, #4
 800369c:	4293      	cmp	r3, r2
 800369e:	d822      	bhi.n	80036e6 <UART_SetConfig+0x1a6>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <UART_SetConfig+0x16e>
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	00d2      	lsls	r2, r2, #3
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00e      	beq.n	80036ca <UART_SetConfig+0x18a>
 80036ac:	e01b      	b.n	80036e6 <UART_SetConfig+0x1a6>
 80036ae:	231b      	movs	r3, #27
 80036b0:	2220      	movs	r2, #32
 80036b2:	189b      	adds	r3, r3, r2
 80036b4:	19db      	adds	r3, r3, r7
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e021      	b.n	8003700 <UART_SetConfig+0x1c0>
 80036bc:	231b      	movs	r3, #27
 80036be:	2220      	movs	r2, #32
 80036c0:	189b      	adds	r3, r3, r2
 80036c2:	19db      	adds	r3, r3, r7
 80036c4:	2202      	movs	r2, #2
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	e01a      	b.n	8003700 <UART_SetConfig+0x1c0>
 80036ca:	231b      	movs	r3, #27
 80036cc:	2220      	movs	r2, #32
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	19db      	adds	r3, r3, r7
 80036d2:	2204      	movs	r2, #4
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e013      	b.n	8003700 <UART_SetConfig+0x1c0>
 80036d8:	231b      	movs	r3, #27
 80036da:	2220      	movs	r2, #32
 80036dc:	189b      	adds	r3, r3, r2
 80036de:	19db      	adds	r3, r3, r7
 80036e0:	2208      	movs	r2, #8
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e00c      	b.n	8003700 <UART_SetConfig+0x1c0>
 80036e6:	231b      	movs	r3, #27
 80036e8:	2220      	movs	r2, #32
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	19db      	adds	r3, r3, r7
 80036ee:	2210      	movs	r2, #16
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	e005      	b.n	8003700 <UART_SetConfig+0x1c0>
 80036f4:	231b      	movs	r3, #27
 80036f6:	2220      	movs	r2, #32
 80036f8:	189b      	adds	r3, r3, r2
 80036fa:	19db      	adds	r3, r3, r7
 80036fc:	2210      	movs	r2, #16
 80036fe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a61      	ldr	r2, [pc, #388]	; (800388c <UART_SetConfig+0x34c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d000      	beq.n	800370c <UART_SetConfig+0x1cc>
 800370a:	e092      	b.n	8003832 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800370c:	231b      	movs	r3, #27
 800370e:	2220      	movs	r2, #32
 8003710:	189b      	adds	r3, r3, r2
 8003712:	19db      	adds	r3, r3, r7
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b08      	cmp	r3, #8
 8003718:	d015      	beq.n	8003746 <UART_SetConfig+0x206>
 800371a:	dc18      	bgt.n	800374e <UART_SetConfig+0x20e>
 800371c:	2b04      	cmp	r3, #4
 800371e:	d00d      	beq.n	800373c <UART_SetConfig+0x1fc>
 8003720:	dc15      	bgt.n	800374e <UART_SetConfig+0x20e>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <UART_SetConfig+0x1ec>
 8003726:	2b02      	cmp	r3, #2
 8003728:	d005      	beq.n	8003736 <UART_SetConfig+0x1f6>
 800372a:	e010      	b.n	800374e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7fe ff08 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8003730:	0003      	movs	r3, r0
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003734:	e014      	b.n	8003760 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003736:	4b5a      	ldr	r3, [pc, #360]	; (80038a0 <UART_SetConfig+0x360>)
 8003738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800373a:	e011      	b.n	8003760 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373c:	f7fe fe74 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 8003740:	0003      	movs	r3, r0
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003744:	e00c      	b.n	8003760 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800374c:	e008      	b.n	8003760 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003752:	231a      	movs	r3, #26
 8003754:	2220      	movs	r2, #32
 8003756:	189b      	adds	r3, r3, r2
 8003758:	19db      	adds	r3, r3, r7
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
        break;
 800375e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003762:	2b00      	cmp	r3, #0
 8003764:	d100      	bne.n	8003768 <UART_SetConfig+0x228>
 8003766:	e147      	b.n	80039f8 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800376c:	4b4d      	ldr	r3, [pc, #308]	; (80038a4 <UART_SetConfig+0x364>)
 800376e:	0052      	lsls	r2, r2, #1
 8003770:	5ad3      	ldrh	r3, [r2, r3]
 8003772:	0019      	movs	r1, r3
 8003774:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003776:	f7fc fcd7 	bl	8000128 <__udivsi3>
 800377a:	0003      	movs	r3, r0
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	0013      	movs	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	189b      	adds	r3, r3, r2
 8003788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378a:	429a      	cmp	r2, r3
 800378c:	d305      	bcc.n	800379a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003796:	429a      	cmp	r2, r3
 8003798:	d906      	bls.n	80037a8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800379a:	231a      	movs	r3, #26
 800379c:	2220      	movs	r2, #32
 800379e:	189b      	adds	r3, r3, r2
 80037a0:	19db      	adds	r3, r3, r7
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e127      	b.n	80039f8 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b4:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <UART_SetConfig+0x364>)
 80037b6:	0052      	lsls	r2, r2, #1
 80037b8:	5ad3      	ldrh	r3, [r2, r3]
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	69b8      	ldr	r0, [r7, #24]
 80037c6:	69f9      	ldr	r1, [r7, #28]
 80037c8:	f7fc fe24 	bl	8000414 <__aeabi_uldivmod>
 80037cc:	0002      	movs	r2, r0
 80037ce:	000b      	movs	r3, r1
 80037d0:	0e11      	lsrs	r1, r2, #24
 80037d2:	021d      	lsls	r5, r3, #8
 80037d4:	430d      	orrs	r5, r1
 80037d6:	0214      	lsls	r4, r2, #8
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68b8      	ldr	r0, [r7, #8]
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	1900      	adds	r0, r0, r4
 80037ea:	4169      	adcs	r1, r5
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	2300      	movs	r3, #0
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f7fc fe0b 	bl	8000414 <__aeabi_uldivmod>
 80037fe:	0002      	movs	r2, r0
 8003800:	000b      	movs	r3, r1
 8003802:	0013      	movs	r3, r2
 8003804:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003808:	23c0      	movs	r3, #192	; 0xc0
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d309      	bcc.n	8003824 <UART_SetConfig+0x2e4>
 8003810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	035b      	lsls	r3, r3, #13
 8003816:	429a      	cmp	r2, r3
 8003818:	d204      	bcs.n	8003824 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	e0e9      	b.n	80039f8 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003824:	231a      	movs	r3, #26
 8003826:	2220      	movs	r2, #32
 8003828:	189b      	adds	r3, r3, r2
 800382a:	19db      	adds	r3, r3, r7
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e0e2      	b.n	80039f8 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	429a      	cmp	r2, r3
 800383c:	d000      	beq.n	8003840 <UART_SetConfig+0x300>
 800383e:	e083      	b.n	8003948 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003840:	231b      	movs	r3, #27
 8003842:	2220      	movs	r2, #32
 8003844:	189b      	adds	r3, r3, r2
 8003846:	19db      	adds	r3, r3, r7
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b08      	cmp	r3, #8
 800384c:	d015      	beq.n	800387a <UART_SetConfig+0x33a>
 800384e:	dc2b      	bgt.n	80038a8 <UART_SetConfig+0x368>
 8003850:	2b04      	cmp	r3, #4
 8003852:	d00d      	beq.n	8003870 <UART_SetConfig+0x330>
 8003854:	dc28      	bgt.n	80038a8 <UART_SetConfig+0x368>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <UART_SetConfig+0x320>
 800385a:	2b02      	cmp	r3, #2
 800385c:	d005      	beq.n	800386a <UART_SetConfig+0x32a>
 800385e:	e023      	b.n	80038a8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7fe fe6e 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8003864:	0003      	movs	r3, r0
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003868:	e027      	b.n	80038ba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <UART_SetConfig+0x360>)
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800386e:	e024      	b.n	80038ba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003870:	f7fe fdda 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 8003874:	0003      	movs	r3, r0
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003878:	e01f      	b.n	80038ba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003880:	e01b      	b.n	80038ba <UART_SetConfig+0x37a>
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	cfff69f3 	.word	0xcfff69f3
 8003888:	ffffcfff 	.word	0xffffcfff
 800388c:	40008000 	.word	0x40008000
 8003890:	11fff4ff 	.word	0x11fff4ff
 8003894:	40013800 	.word	0x40013800
 8003898:	40021000 	.word	0x40021000
 800389c:	40004400 	.word	0x40004400
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	08005a78 	.word	0x08005a78
      default:
        pclk = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038ac:	231a      	movs	r3, #26
 80038ae:	2220      	movs	r2, #32
 80038b0:	189b      	adds	r3, r3, r2
 80038b2:	19db      	adds	r3, r3, r7
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
        break;
 80038b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d100      	bne.n	80038c2 <UART_SetConfig+0x382>
 80038c0:	e09a      	b.n	80039f8 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c6:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <UART_SetConfig+0x4e8>)
 80038c8:	0052      	lsls	r2, r2, #1
 80038ca:	5ad3      	ldrh	r3, [r2, r3]
 80038cc:	0019      	movs	r1, r3
 80038ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038d0:	f7fc fc2a 	bl	8000128 <__udivsi3>
 80038d4:	0003      	movs	r3, r0
 80038d6:	005a      	lsls	r2, r3, #1
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	18d2      	adds	r2, r2, r3
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	0019      	movs	r1, r3
 80038e6:	0010      	movs	r0, r2
 80038e8:	f7fc fc1e 	bl	8000128 <__udivsi3>
 80038ec:	0003      	movs	r3, r0
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	d921      	bls.n	800393a <UART_SetConfig+0x3fa>
 80038f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	025b      	lsls	r3, r3, #9
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d21c      	bcs.n	800393a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	b29a      	uxth	r2, r3
 8003904:	200e      	movs	r0, #14
 8003906:	2420      	movs	r4, #32
 8003908:	1903      	adds	r3, r0, r4
 800390a:	19db      	adds	r3, r3, r7
 800390c:	210f      	movs	r1, #15
 800390e:	438a      	bics	r2, r1
 8003910:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	b29b      	uxth	r3, r3
 8003918:	2207      	movs	r2, #7
 800391a:	4013      	ands	r3, r2
 800391c:	b299      	uxth	r1, r3
 800391e:	1903      	adds	r3, r0, r4
 8003920:	19db      	adds	r3, r3, r7
 8003922:	1902      	adds	r2, r0, r4
 8003924:	19d2      	adds	r2, r2, r7
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1902      	adds	r2, r0, r4
 8003932:	19d2      	adds	r2, r2, r7
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	e05e      	b.n	80039f8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800393a:	231a      	movs	r3, #26
 800393c:	2220      	movs	r2, #32
 800393e:	189b      	adds	r3, r3, r2
 8003940:	19db      	adds	r3, r3, r7
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e057      	b.n	80039f8 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003948:	231b      	movs	r3, #27
 800394a:	2220      	movs	r2, #32
 800394c:	189b      	adds	r3, r3, r2
 800394e:	19db      	adds	r3, r3, r7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b08      	cmp	r3, #8
 8003954:	d015      	beq.n	8003982 <UART_SetConfig+0x442>
 8003956:	dc18      	bgt.n	800398a <UART_SetConfig+0x44a>
 8003958:	2b04      	cmp	r3, #4
 800395a:	d00d      	beq.n	8003978 <UART_SetConfig+0x438>
 800395c:	dc15      	bgt.n	800398a <UART_SetConfig+0x44a>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <UART_SetConfig+0x428>
 8003962:	2b02      	cmp	r3, #2
 8003964:	d005      	beq.n	8003972 <UART_SetConfig+0x432>
 8003966:	e010      	b.n	800398a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7fe fdea 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 800396c:	0003      	movs	r3, r0
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003970:	e014      	b.n	800399c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003972:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <UART_SetConfig+0x4ec>)
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003976:	e011      	b.n	800399c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003978:	f7fe fd56 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 800397c:	0003      	movs	r3, r0
 800397e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003980:	e00c      	b.n	800399c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003988:	e008      	b.n	800399c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800398e:	231a      	movs	r3, #26
 8003990:	2220      	movs	r2, #32
 8003992:	189b      	adds	r3, r3, r2
 8003994:	19db      	adds	r3, r3, r7
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
        break;
 800399a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02a      	beq.n	80039f8 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <UART_SetConfig+0x4e8>)
 80039a8:	0052      	lsls	r2, r2, #1
 80039aa:	5ad3      	ldrh	r3, [r2, r3]
 80039ac:	0019      	movs	r1, r3
 80039ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039b0:	f7fc fbba 	bl	8000128 <__udivsi3>
 80039b4:	0003      	movs	r3, r0
 80039b6:	001a      	movs	r2, r3
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	18d2      	adds	r2, r2, r3
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0019      	movs	r1, r3
 80039c6:	0010      	movs	r0, r2
 80039c8:	f7fc fbae 	bl	8000128 <__udivsi3>
 80039cc:	0003      	movs	r3, r0
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	d90a      	bls.n	80039ec <UART_SetConfig+0x4ac>
 80039d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	025b      	lsls	r3, r3, #9
 80039dc:	429a      	cmp	r2, r3
 80039de:	d205      	bcs.n	80039ec <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	e005      	b.n	80039f8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80039ec:	231a      	movs	r3, #26
 80039ee:	2220      	movs	r2, #32
 80039f0:	189b      	adds	r3, r3, r2
 80039f2:	19db      	adds	r3, r3, r7
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	226a      	movs	r2, #106	; 0x6a
 80039fc:	2101      	movs	r1, #1
 80039fe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	2268      	movs	r2, #104	; 0x68
 8003a04:	2101      	movs	r1, #1
 8003a06:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	2200      	movs	r2, #0
 8003a12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003a14:	231a      	movs	r3, #26
 8003a16:	2220      	movs	r2, #32
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	19db      	adds	r3, r3, r7
 8003a1c:	781b      	ldrb	r3, [r3, #0]
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b010      	add	sp, #64	; 0x40
 8003a24:	bdb0      	pop	{r4, r5, r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	08005a78 	.word	0x08005a78
 8003a2c:	00f42400 	.word	0x00f42400

08003a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a4a      	ldr	r2, [pc, #296]	; (8003b74 <UART_AdvFeatureConfig+0x144>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	2202      	movs	r2, #2
 8003a60:	4013      	ands	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4a43      	ldr	r2, [pc, #268]	; (8003b78 <UART_AdvFeatureConfig+0x148>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	2204      	movs	r2, #4
 8003a82:	4013      	ands	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a3b      	ldr	r2, [pc, #236]	; (8003b7c <UART_AdvFeatureConfig+0x14c>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a34      	ldr	r2, [pc, #208]	; (8003b80 <UART_AdvFeatureConfig+0x150>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a2c      	ldr	r2, [pc, #176]	; (8003b84 <UART_AdvFeatureConfig+0x154>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <UART_AdvFeatureConfig+0x158>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	2240      	movs	r2, #64	; 0x40
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <UART_AdvFeatureConfig+0x15c>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	035b      	lsls	r3, r3, #13
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d10b      	bne.n	8003b4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <UART_AdvFeatureConfig+0x160>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	4013      	ands	r3, r2
 8003b52:	d00b      	beq.n	8003b6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <UART_AdvFeatureConfig+0x164>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	fffdffff 	.word	0xfffdffff
 8003b78:	fffeffff 	.word	0xfffeffff
 8003b7c:	fffbffff 	.word	0xfffbffff
 8003b80:	ffff7fff 	.word	0xffff7fff
 8003b84:	ffffefff 	.word	0xffffefff
 8003b88:	ffffdfff 	.word	0xffffdfff
 8003b8c:	ffefffff 	.word	0xffefffff
 8003b90:	ff9fffff 	.word	0xff9fffff
 8003b94:	fff7ffff 	.word	0xfff7ffff

08003b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2290      	movs	r2, #144	; 0x90
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ba8:	f7fd fcd2 	bl	8001550 <HAL_GetTick>
 8003bac:	0003      	movs	r3, r0
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d10c      	bne.n	8003bd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	0391      	lsls	r1, r2, #14
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <UART_CheckIdleState+0x98>)
 8003bc8:	9200      	str	r2, [sp, #0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f000 f832 	bl	8003c34 <UART_WaitOnFlagUntilTimeout>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d001      	beq.n	8003bd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e026      	b.n	8003c26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2204      	movs	r2, #4
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d10c      	bne.n	8003c00 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2280      	movs	r2, #128	; 0x80
 8003bea:	03d1      	lsls	r1, r2, #15
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <UART_CheckIdleState+0x98>)
 8003bf0:	9200      	str	r2, [sp, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f000 f81e 	bl	8003c34 <UART_WaitOnFlagUntilTimeout>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d001      	beq.n	8003c00 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e012      	b.n	8003c26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2288      	movs	r2, #136	; 0x88
 8003c04:	2120      	movs	r1, #32
 8003c06:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	228c      	movs	r2, #140	; 0x8c
 8003c0c:	2120      	movs	r1, #32
 8003c0e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2284      	movs	r2, #132	; 0x84
 8003c20:	2100      	movs	r1, #0
 8003c22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b004      	add	sp, #16
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	01ffffff 	.word	0x01ffffff

08003c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b094      	sub	sp, #80	; 0x50
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	1dfb      	adds	r3, r7, #7
 8003c42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c44:	e0a7      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c48:	3301      	adds	r3, #1
 8003c4a:	d100      	bne.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c4c:	e0a3      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fd fc7f 	bl	8001550 <HAL_GetTick>
 8003c52:	0002      	movs	r2, r0
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d13f      	bne.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c64:	f3ef 8310 	mrs	r3, PRIMASK
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6e:	2301      	movs	r3, #1
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	f383 8810 	msr	PRIMASK, r3
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	494e      	ldr	r1, [pc, #312]	; (8003dc0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003c86:	400a      	ands	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c8c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	f383 8810 	msr	PRIMASK, r3
}
 8003c94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c96:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	438a      	bics	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc2:	f383 8810 	msr	PRIMASK, r3
}
 8003cc6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2288      	movs	r2, #136	; 0x88
 8003ccc:	2120      	movs	r1, #32
 8003cce:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	228c      	movs	r2, #140	; 0x8c
 8003cd4:	2120      	movs	r1, #32
 8003cd6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2284      	movs	r2, #132	; 0x84
 8003cdc:	2100      	movs	r1, #0
 8003cde:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e069      	b.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2204      	movs	r2, #4
 8003cec:	4013      	ands	r3, r2
 8003cee:	d052      	beq.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d148      	bne.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2280      	movs	r2, #128	; 0x80
 8003d0a:	0112      	lsls	r2, r2, #4
 8003d0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d12:	613b      	str	r3, [r7, #16]
  return(result);
 8003d14:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d18:	2301      	movs	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f383 8810 	msr	PRIMASK, r3
}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4924      	ldr	r1, [pc, #144]	; (8003dc0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003d30:	400a      	ands	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f383 8810 	msr	PRIMASK, r3
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d40:	f3ef 8310 	mrs	r3, PRIMASK
 8003d44:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d46:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f383 8810 	msr	PRIMASK, r3
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2101      	movs	r1, #1
 8003d62:	438a      	bics	r2, r1
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	f383 8810 	msr	PRIMASK, r3
}
 8003d70:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2288      	movs	r2, #136	; 0x88
 8003d76:	2120      	movs	r1, #32
 8003d78:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	228c      	movs	r2, #140	; 0x8c
 8003d7e:	2120      	movs	r1, #32
 8003d80:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2290      	movs	r2, #144	; 0x90
 8003d86:	2120      	movs	r1, #32
 8003d88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2284      	movs	r2, #132	; 0x84
 8003d8e:	2100      	movs	r1, #0
 8003d90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e010      	b.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	425a      	negs	r2, r3
 8003da6:	4153      	adcs	r3, r2
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	001a      	movs	r2, r3
 8003dac:	1dfb      	adds	r3, r7, #7
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d100      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x182>
 8003db4:	e747      	b.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	0018      	movs	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b014      	add	sp, #80	; 0x50
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	fffffe5f 	.word	0xfffffe5f

08003dc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2284      	movs	r2, #132	; 0x84
 8003dd0:	5c9b      	ldrb	r3, [r3, r2]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_UARTEx_DisableFifoMode+0x16>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e027      	b.n	8003e2a <HAL_UARTEx_DisableFifoMode+0x66>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2284      	movs	r2, #132	; 0x84
 8003dde:	2101      	movs	r1, #1
 8003de0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2288      	movs	r2, #136	; 0x88
 8003de6:	2124      	movs	r1, #36	; 0x24
 8003de8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	438a      	bics	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2288      	movs	r2, #136	; 0x88
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2284      	movs	r2, #132	; 0x84
 8003e24:	2100      	movs	r1, #0
 8003e26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b004      	add	sp, #16
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	dfffffff 	.word	0xdfffffff

08003e38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2284      	movs	r2, #132	; 0x84
 8003e46:	5c9b      	ldrb	r3, [r3, r2]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e02e      	b.n	8003eae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2284      	movs	r2, #132	; 0x84
 8003e54:	2101      	movs	r1, #1
 8003e56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2288      	movs	r2, #136	; 0x88
 8003e5c:	2124      	movs	r1, #36	; 0x24
 8003e5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2101      	movs	r1, #1
 8003e74:	438a      	bics	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	08d9      	lsrs	r1, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f000 f974 	bl	800417c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2288      	movs	r2, #136	; 0x88
 8003ea0:	2120      	movs	r1, #32
 8003ea2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2284      	movs	r2, #132	; 0x84
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2284      	movs	r2, #132	; 0x84
 8003ec6:	5c9b      	ldrb	r3, [r3, r2]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e02f      	b.n	8003f30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2284      	movs	r2, #132	; 0x84
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2288      	movs	r2, #136	; 0x88
 8003edc:	2124      	movs	r1, #36	; 0x24
 8003ede:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	438a      	bics	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	4a0e      	ldr	r2, [pc, #56]	; (8003f38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	0019      	movs	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 f933 	bl	800417c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2288      	movs	r2, #136	; 0x88
 8003f22:	2120      	movs	r1, #32
 8003f24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2284      	movs	r2, #132	; 0x84
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	0018      	movs	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b004      	add	sp, #16
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	f1ffffff 	.word	0xf1ffffff

08003f3c <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	1dbb      	adds	r3, r7, #6
 8003f4a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	228c      	movs	r2, #140	; 0x8c
 8003f50:	589b      	ldr	r3, [r3, r2]
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d000      	beq.n	8003f58 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8003f56:	e109      	b.n	800416c <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e101      	b.n	800416e <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	015b      	lsls	r3, r3, #5
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d109      	bne.n	8003f8a <HAL_UARTEx_ReceiveToIdle+0x4e>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2201      	movs	r2, #1
 8003f82:	4013      	ands	r3, r2
 8003f84:	d001      	beq.n	8003f8a <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e0f1      	b.n	800416e <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2290      	movs	r2, #144	; 0x90
 8003f8e:	2100      	movs	r1, #0
 8003f90:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	228c      	movs	r2, #140	; 0x8c
 8003f96:	2122      	movs	r1, #34	; 0x22
 8003f98:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	671a      	str	r2, [r3, #112]	; 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa6:	f7fd fad3 	bl	8001550 <HAL_GetTick>
 8003faa:	0003      	movs	r3, r0
 8003fac:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1dba      	adds	r2, r7, #6
 8003fb2:	215c      	movs	r1, #92	; 0x5c
 8003fb4:	8812      	ldrh	r2, [r2, #0]
 8003fb6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1dba      	adds	r2, r7, #6
 8003fbc:	215e      	movs	r1, #94	; 0x5e
 8003fbe:	8812      	ldrh	r2, [r2, #0]
 8003fc0:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	015b      	lsls	r3, r3, #5
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d10d      	bne.n	8003fea <HAL_UARTEx_ReceiveToIdle+0xae>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <HAL_UARTEx_ReceiveToIdle+0xa4>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2260      	movs	r2, #96	; 0x60
 8003fda:	4967      	ldr	r1, [pc, #412]	; (8004178 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8003fdc:	5299      	strh	r1, [r3, r2]
 8003fde:	e02e      	b.n	800403e <HAL_UARTEx_ReceiveToIdle+0x102>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2260      	movs	r2, #96	; 0x60
 8003fe4:	21ff      	movs	r1, #255	; 0xff
 8003fe6:	5299      	strh	r1, [r3, r2]
 8003fe8:	e029      	b.n	800403e <HAL_UARTEx_ReceiveToIdle+0x102>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <HAL_UARTEx_ReceiveToIdle+0xd2>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <HAL_UARTEx_ReceiveToIdle+0xc8>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2260      	movs	r2, #96	; 0x60
 8003ffe:	21ff      	movs	r1, #255	; 0xff
 8004000:	5299      	strh	r1, [r3, r2]
 8004002:	e01c      	b.n	800403e <HAL_UARTEx_ReceiveToIdle+0x102>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2260      	movs	r2, #96	; 0x60
 8004008:	217f      	movs	r1, #127	; 0x7f
 800400a:	5299      	strh	r1, [r3, r2]
 800400c:	e017      	b.n	800403e <HAL_UARTEx_ReceiveToIdle+0x102>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	055b      	lsls	r3, r3, #21
 8004016:	429a      	cmp	r2, r3
 8004018:	d10d      	bne.n	8004036 <HAL_UARTEx_ReceiveToIdle+0xfa>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UARTEx_ReceiveToIdle+0xf0>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2260      	movs	r2, #96	; 0x60
 8004026:	217f      	movs	r1, #127	; 0x7f
 8004028:	5299      	strh	r1, [r3, r2]
 800402a:	e008      	b.n	800403e <HAL_UARTEx_ReceiveToIdle+0x102>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2260      	movs	r2, #96	; 0x60
 8004030:	213f      	movs	r1, #63	; 0x3f
 8004032:	5299      	strh	r1, [r3, r2]
 8004034:	e003      	b.n	800403e <HAL_UARTEx_ReceiveToIdle+0x102>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2260      	movs	r2, #96	; 0x60
 800403a:	2100      	movs	r1, #0
 800403c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800403e:	2312      	movs	r3, #18
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	2160      	movs	r1, #96	; 0x60
 8004046:	5a52      	ldrh	r2, [r2, r1]
 8004048:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	015b      	lsls	r3, r3, #5
 8004052:	429a      	cmp	r2, r3
 8004054:	d108      	bne.n	8004068 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e003      	b.n	8004070 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004076:	e062      	b.n	800413e <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	2210      	movs	r2, #16
 8004080:	4013      	ands	r3, r2
 8004082:	2b10      	cmp	r3, #16
 8004084:	d110      	bne.n	80040a8 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2210      	movs	r2, #16
 800408c:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2202      	movs	r2, #2
 800409a:	671a      	str	r2, [r3, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	228c      	movs	r2, #140	; 0x8c
 80040a0:	2120      	movs	r1, #32
 80040a2:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e062      	b.n	800416e <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2220      	movs	r2, #32
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d12f      	bne.n	8004116 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10e      	bne.n	80040da <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2212      	movs	r2, #18
 80040c6:	18ba      	adds	r2, r7, r2
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	4013      	ands	r3, r2
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3302      	adds	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e00e      	b.n	80040f8 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2212      	movs	r2, #18
 80040e4:	18ba      	adds	r2, r7, r2
 80040e6:	8812      	ldrh	r2, [r2, #0]
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	4013      	ands	r3, r2
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3301      	adds	r3, #1
 80040f6:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	3301      	adds	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	225e      	movs	r2, #94	; 0x5e
 8004108:	5a9b      	ldrh	r3, [r3, r2]
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b299      	uxth	r1, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	225e      	movs	r2, #94	; 0x5e
 8004114:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	3301      	adds	r3, #1
 800411a:	d010      	beq.n	800413e <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800411c:	f7fd fa18 	bl	8001550 <HAL_GetTick>
 8004120:	0002      	movs	r2, r0
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	d105      	bne.n	800413e <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	228c      	movs	r2, #140	; 0x8c
 8004136:	2120      	movs	r1, #32
 8004138:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e017      	b.n	800416e <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	225e      	movs	r2, #94	; 0x5e
 8004142:	5a9b      	ldrh	r3, [r3, r2]
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d196      	bne.n	8004078 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	225c      	movs	r2, #92	; 0x5c
 800414e:	5a9a      	ldrh	r2, [r3, r2]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	215e      	movs	r1, #94	; 0x5e
 8004154:	5a5b      	ldrh	r3, [r3, r1]
 8004156:	b29b      	uxth	r3, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	b29a      	uxth	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	228c      	movs	r2, #140	; 0x8c
 8004164:	2120      	movs	r1, #32
 8004166:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b008      	add	sp, #32
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	000001ff 	.word	0x000001ff

0800417c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800417c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004188:	2b00      	cmp	r3, #0
 800418a:	d108      	bne.n	800419e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	226a      	movs	r2, #106	; 0x6a
 8004190:	2101      	movs	r1, #1
 8004192:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2268      	movs	r2, #104	; 0x68
 8004198:	2101      	movs	r1, #1
 800419a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800419c:	e043      	b.n	8004226 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800419e:	260f      	movs	r6, #15
 80041a0:	19bb      	adds	r3, r7, r6
 80041a2:	2208      	movs	r2, #8
 80041a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041a6:	200e      	movs	r0, #14
 80041a8:	183b      	adds	r3, r7, r0
 80041aa:	2208      	movs	r2, #8
 80041ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	0e5b      	lsrs	r3, r3, #25
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	240d      	movs	r4, #13
 80041ba:	193b      	adds	r3, r7, r4
 80041bc:	2107      	movs	r1, #7
 80041be:	400a      	ands	r2, r1
 80041c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	0f5b      	lsrs	r3, r3, #29
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	250c      	movs	r5, #12
 80041ce:	197b      	adds	r3, r7, r5
 80041d0:	2107      	movs	r1, #7
 80041d2:	400a      	ands	r2, r1
 80041d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041d6:	183b      	adds	r3, r7, r0
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	197a      	adds	r2, r7, r5
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	4914      	ldr	r1, [pc, #80]	; (8004230 <UARTEx_SetNbDataToProcess+0xb4>)
 80041e0:	5c8a      	ldrb	r2, [r1, r2]
 80041e2:	435a      	muls	r2, r3
 80041e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80041e6:	197b      	adds	r3, r7, r5
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	4a12      	ldr	r2, [pc, #72]	; (8004234 <UARTEx_SetNbDataToProcess+0xb8>)
 80041ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041ee:	0019      	movs	r1, r3
 80041f0:	f7fc f824 	bl	800023c <__divsi3>
 80041f4:	0003      	movs	r3, r0
 80041f6:	b299      	uxth	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	226a      	movs	r2, #106	; 0x6a
 80041fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041fe:	19bb      	adds	r3, r7, r6
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	193a      	adds	r2, r7, r4
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	490a      	ldr	r1, [pc, #40]	; (8004230 <UARTEx_SetNbDataToProcess+0xb4>)
 8004208:	5c8a      	ldrb	r2, [r1, r2]
 800420a:	435a      	muls	r2, r3
 800420c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800420e:	193b      	adds	r3, r7, r4
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	4a08      	ldr	r2, [pc, #32]	; (8004234 <UARTEx_SetNbDataToProcess+0xb8>)
 8004214:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004216:	0019      	movs	r1, r3
 8004218:	f7fc f810 	bl	800023c <__divsi3>
 800421c:	0003      	movs	r3, r0
 800421e:	b299      	uxth	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2268      	movs	r2, #104	; 0x68
 8004224:	5299      	strh	r1, [r3, r2]
}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	46bd      	mov	sp, r7
 800422a:	b005      	add	sp, #20
 800422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	08005a90 	.word	0x08005a90
 8004234:	08005a98 	.word	0x08005a98

08004238 <__errno>:
 8004238:	4b01      	ldr	r3, [pc, #4]	; (8004240 <__errno+0x8>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	4770      	bx	lr
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	2000009c 	.word	0x2000009c

08004244 <__libc_init_array>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	2600      	movs	r6, #0
 8004248:	4d0c      	ldr	r5, [pc, #48]	; (800427c <__libc_init_array+0x38>)
 800424a:	4c0d      	ldr	r4, [pc, #52]	; (8004280 <__libc_init_array+0x3c>)
 800424c:	1b64      	subs	r4, r4, r5
 800424e:	10a4      	asrs	r4, r4, #2
 8004250:	42a6      	cmp	r6, r4
 8004252:	d109      	bne.n	8004268 <__libc_init_array+0x24>
 8004254:	2600      	movs	r6, #0
 8004256:	f001 fae9 	bl	800582c <_init>
 800425a:	4d0a      	ldr	r5, [pc, #40]	; (8004284 <__libc_init_array+0x40>)
 800425c:	4c0a      	ldr	r4, [pc, #40]	; (8004288 <__libc_init_array+0x44>)
 800425e:	1b64      	subs	r4, r4, r5
 8004260:	10a4      	asrs	r4, r4, #2
 8004262:	42a6      	cmp	r6, r4
 8004264:	d105      	bne.n	8004272 <__libc_init_array+0x2e>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	00b3      	lsls	r3, r6, #2
 800426a:	58eb      	ldr	r3, [r5, r3]
 800426c:	4798      	blx	r3
 800426e:	3601      	adds	r6, #1
 8004270:	e7ee      	b.n	8004250 <__libc_init_array+0xc>
 8004272:	00b3      	lsls	r3, r6, #2
 8004274:	58eb      	ldr	r3, [r5, r3]
 8004276:	4798      	blx	r3
 8004278:	3601      	adds	r6, #1
 800427a:	e7f2      	b.n	8004262 <__libc_init_array+0x1e>
 800427c:	08005bf0 	.word	0x08005bf0
 8004280:	08005bf0 	.word	0x08005bf0
 8004284:	08005bf0 	.word	0x08005bf0
 8004288:	08005bf4 	.word	0x08005bf4

0800428c <memset>:
 800428c:	0003      	movs	r3, r0
 800428e:	1882      	adds	r2, r0, r2
 8004290:	4293      	cmp	r3, r2
 8004292:	d100      	bne.n	8004296 <memset+0xa>
 8004294:	4770      	bx	lr
 8004296:	7019      	strb	r1, [r3, #0]
 8004298:	3301      	adds	r3, #1
 800429a:	e7f9      	b.n	8004290 <memset+0x4>

0800429c <sniprintf>:
 800429c:	b40c      	push	{r2, r3}
 800429e:	b530      	push	{r4, r5, lr}
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <sniprintf+0x64>)
 80042a2:	000c      	movs	r4, r1
 80042a4:	681d      	ldr	r5, [r3, #0]
 80042a6:	b09d      	sub	sp, #116	; 0x74
 80042a8:	2900      	cmp	r1, #0
 80042aa:	da08      	bge.n	80042be <sniprintf+0x22>
 80042ac:	238b      	movs	r3, #139	; 0x8b
 80042ae:	2001      	movs	r0, #1
 80042b0:	602b      	str	r3, [r5, #0]
 80042b2:	4240      	negs	r0, r0
 80042b4:	b01d      	add	sp, #116	; 0x74
 80042b6:	bc30      	pop	{r4, r5}
 80042b8:	bc08      	pop	{r3}
 80042ba:	b002      	add	sp, #8
 80042bc:	4718      	bx	r3
 80042be:	2382      	movs	r3, #130	; 0x82
 80042c0:	466a      	mov	r2, sp
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	8293      	strh	r3, [r2, #20]
 80042c6:	2300      	movs	r3, #0
 80042c8:	9002      	str	r0, [sp, #8]
 80042ca:	9006      	str	r0, [sp, #24]
 80042cc:	4299      	cmp	r1, r3
 80042ce:	d000      	beq.n	80042d2 <sniprintf+0x36>
 80042d0:	1e4b      	subs	r3, r1, #1
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	9307      	str	r3, [sp, #28]
 80042d6:	2301      	movs	r3, #1
 80042d8:	466a      	mov	r2, sp
 80042da:	425b      	negs	r3, r3
 80042dc:	82d3      	strh	r3, [r2, #22]
 80042de:	0028      	movs	r0, r5
 80042e0:	ab21      	add	r3, sp, #132	; 0x84
 80042e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042e4:	a902      	add	r1, sp, #8
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	f000 fa1e 	bl	8004728 <_svfiprintf_r>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	da01      	bge.n	80042f4 <sniprintf+0x58>
 80042f0:	238b      	movs	r3, #139	; 0x8b
 80042f2:	602b      	str	r3, [r5, #0]
 80042f4:	2c00      	cmp	r4, #0
 80042f6:	d0dd      	beq.n	80042b4 <sniprintf+0x18>
 80042f8:	2300      	movs	r3, #0
 80042fa:	9a02      	ldr	r2, [sp, #8]
 80042fc:	7013      	strb	r3, [r2, #0]
 80042fe:	e7d9      	b.n	80042b4 <sniprintf+0x18>
 8004300:	2000009c 	.word	0x2000009c

08004304 <siprintf>:
 8004304:	b40e      	push	{r1, r2, r3}
 8004306:	b500      	push	{lr}
 8004308:	490b      	ldr	r1, [pc, #44]	; (8004338 <siprintf+0x34>)
 800430a:	b09c      	sub	sp, #112	; 0x70
 800430c:	ab1d      	add	r3, sp, #116	; 0x74
 800430e:	9002      	str	r0, [sp, #8]
 8004310:	9006      	str	r0, [sp, #24]
 8004312:	9107      	str	r1, [sp, #28]
 8004314:	9104      	str	r1, [sp, #16]
 8004316:	4809      	ldr	r0, [pc, #36]	; (800433c <siprintf+0x38>)
 8004318:	4909      	ldr	r1, [pc, #36]	; (8004340 <siprintf+0x3c>)
 800431a:	cb04      	ldmia	r3!, {r2}
 800431c:	9105      	str	r1, [sp, #20]
 800431e:	6800      	ldr	r0, [r0, #0]
 8004320:	a902      	add	r1, sp, #8
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	f000 fa00 	bl	8004728 <_svfiprintf_r>
 8004328:	2300      	movs	r3, #0
 800432a:	9a02      	ldr	r2, [sp, #8]
 800432c:	7013      	strb	r3, [r2, #0]
 800432e:	b01c      	add	sp, #112	; 0x70
 8004330:	bc08      	pop	{r3}
 8004332:	b003      	add	sp, #12
 8004334:	4718      	bx	r3
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	7fffffff 	.word	0x7fffffff
 800433c:	2000009c 	.word	0x2000009c
 8004340:	ffff0208 	.word	0xffff0208

08004344 <strncmp>:
 8004344:	b530      	push	{r4, r5, lr}
 8004346:	0005      	movs	r5, r0
 8004348:	1e10      	subs	r0, r2, #0
 800434a:	d008      	beq.n	800435e <strncmp+0x1a>
 800434c:	2400      	movs	r4, #0
 800434e:	3a01      	subs	r2, #1
 8004350:	5d2b      	ldrb	r3, [r5, r4]
 8004352:	5d08      	ldrb	r0, [r1, r4]
 8004354:	4283      	cmp	r3, r0
 8004356:	d101      	bne.n	800435c <strncmp+0x18>
 8004358:	4294      	cmp	r4, r2
 800435a:	d101      	bne.n	8004360 <strncmp+0x1c>
 800435c:	1a18      	subs	r0, r3, r0
 800435e:	bd30      	pop	{r4, r5, pc}
 8004360:	3401      	adds	r4, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f4      	bne.n	8004350 <strncmp+0xc>
 8004366:	e7f9      	b.n	800435c <strncmp+0x18>

08004368 <strtok>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <strtok+0x5c>)
 800436c:	0005      	movs	r5, r0
 800436e:	681f      	ldr	r7, [r3, #0]
 8004370:	000e      	movs	r6, r1
 8004372:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004374:	2c00      	cmp	r4, #0
 8004376:	d11d      	bne.n	80043b4 <strtok+0x4c>
 8004378:	2050      	movs	r0, #80	; 0x50
 800437a:	f000 f887 	bl	800448c <malloc>
 800437e:	1e02      	subs	r2, r0, #0
 8004380:	65b8      	str	r0, [r7, #88]	; 0x58
 8004382:	d104      	bne.n	800438e <strtok+0x26>
 8004384:	2157      	movs	r1, #87	; 0x57
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <strtok+0x60>)
 8004388:	4810      	ldr	r0, [pc, #64]	; (80043cc <strtok+0x64>)
 800438a:	f000 f851 	bl	8004430 <__assert_func>
 800438e:	6004      	str	r4, [r0, #0]
 8004390:	6044      	str	r4, [r0, #4]
 8004392:	6084      	str	r4, [r0, #8]
 8004394:	60c4      	str	r4, [r0, #12]
 8004396:	6104      	str	r4, [r0, #16]
 8004398:	6144      	str	r4, [r0, #20]
 800439a:	6184      	str	r4, [r0, #24]
 800439c:	6284      	str	r4, [r0, #40]	; 0x28
 800439e:	62c4      	str	r4, [r0, #44]	; 0x2c
 80043a0:	6304      	str	r4, [r0, #48]	; 0x30
 80043a2:	6344      	str	r4, [r0, #52]	; 0x34
 80043a4:	6384      	str	r4, [r0, #56]	; 0x38
 80043a6:	63c4      	str	r4, [r0, #60]	; 0x3c
 80043a8:	6404      	str	r4, [r0, #64]	; 0x40
 80043aa:	6444      	str	r4, [r0, #68]	; 0x44
 80043ac:	6484      	str	r4, [r0, #72]	; 0x48
 80043ae:	64c4      	str	r4, [r0, #76]	; 0x4c
 80043b0:	7704      	strb	r4, [r0, #28]
 80043b2:	6244      	str	r4, [r0, #36]	; 0x24
 80043b4:	0031      	movs	r1, r6
 80043b6:	0028      	movs	r0, r5
 80043b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ba:	2301      	movs	r3, #1
 80043bc:	f000 f808 	bl	80043d0 <__strtok_r>
 80043c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	2000009c 	.word	0x2000009c
 80043c8:	08005aa4 	.word	0x08005aa4
 80043cc:	08005abb 	.word	0x08005abb

080043d0 <__strtok_r>:
 80043d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d102      	bne.n	80043dc <__strtok_r+0xc>
 80043d6:	6810      	ldr	r0, [r2, #0]
 80043d8:	2800      	cmp	r0, #0
 80043da:	d013      	beq.n	8004404 <__strtok_r+0x34>
 80043dc:	0004      	movs	r4, r0
 80043de:	0020      	movs	r0, r4
 80043e0:	000e      	movs	r6, r1
 80043e2:	7805      	ldrb	r5, [r0, #0]
 80043e4:	3401      	adds	r4, #1
 80043e6:	7837      	ldrb	r7, [r6, #0]
 80043e8:	2f00      	cmp	r7, #0
 80043ea:	d104      	bne.n	80043f6 <__strtok_r+0x26>
 80043ec:	2d00      	cmp	r5, #0
 80043ee:	d10f      	bne.n	8004410 <__strtok_r+0x40>
 80043f0:	0028      	movs	r0, r5
 80043f2:	6015      	str	r5, [r2, #0]
 80043f4:	e006      	b.n	8004404 <__strtok_r+0x34>
 80043f6:	3601      	adds	r6, #1
 80043f8:	42bd      	cmp	r5, r7
 80043fa:	d1f4      	bne.n	80043e6 <__strtok_r+0x16>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ee      	bne.n	80043de <__strtok_r+0xe>
 8004400:	6014      	str	r4, [r2, #0]
 8004402:	7003      	strb	r3, [r0, #0]
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004406:	002f      	movs	r7, r5
 8004408:	e00f      	b.n	800442a <__strtok_r+0x5a>
 800440a:	3301      	adds	r3, #1
 800440c:	2e00      	cmp	r6, #0
 800440e:	d104      	bne.n	800441a <__strtok_r+0x4a>
 8004410:	0023      	movs	r3, r4
 8004412:	3401      	adds	r4, #1
 8004414:	781d      	ldrb	r5, [r3, #0]
 8004416:	0027      	movs	r7, r4
 8004418:	000b      	movs	r3, r1
 800441a:	781e      	ldrb	r6, [r3, #0]
 800441c:	42b5      	cmp	r5, r6
 800441e:	d1f4      	bne.n	800440a <__strtok_r+0x3a>
 8004420:	2d00      	cmp	r5, #0
 8004422:	d0f0      	beq.n	8004406 <__strtok_r+0x36>
 8004424:	2300      	movs	r3, #0
 8004426:	3c01      	subs	r4, #1
 8004428:	7023      	strb	r3, [r4, #0]
 800442a:	6017      	str	r7, [r2, #0]
 800442c:	e7ea      	b.n	8004404 <__strtok_r+0x34>
	...

08004430 <__assert_func>:
 8004430:	b530      	push	{r4, r5, lr}
 8004432:	0014      	movs	r4, r2
 8004434:	001a      	movs	r2, r3
 8004436:	4b09      	ldr	r3, [pc, #36]	; (800445c <__assert_func+0x2c>)
 8004438:	0005      	movs	r5, r0
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b085      	sub	sp, #20
 800443e:	68d8      	ldr	r0, [r3, #12]
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <__assert_func+0x30>)
 8004442:	2c00      	cmp	r4, #0
 8004444:	d101      	bne.n	800444a <__assert_func+0x1a>
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <__assert_func+0x34>)
 8004448:	001c      	movs	r4, r3
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	9100      	str	r1, [sp, #0]
 800444e:	002b      	movs	r3, r5
 8004450:	4905      	ldr	r1, [pc, #20]	; (8004468 <__assert_func+0x38>)
 8004452:	9402      	str	r4, [sp, #8]
 8004454:	f000 f80a 	bl	800446c <fiprintf>
 8004458:	f000 fe2a 	bl	80050b0 <abort>
 800445c:	2000009c 	.word	0x2000009c
 8004460:	08005b18 	.word	0x08005b18
 8004464:	08005b53 	.word	0x08005b53
 8004468:	08005b25 	.word	0x08005b25

0800446c <fiprintf>:
 800446c:	b40e      	push	{r1, r2, r3}
 800446e:	b503      	push	{r0, r1, lr}
 8004470:	0001      	movs	r1, r0
 8004472:	ab03      	add	r3, sp, #12
 8004474:	4804      	ldr	r0, [pc, #16]	; (8004488 <fiprintf+0x1c>)
 8004476:	cb04      	ldmia	r3!, {r2}
 8004478:	6800      	ldr	r0, [r0, #0]
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	f000 fa7c 	bl	8004978 <_vfiprintf_r>
 8004480:	b002      	add	sp, #8
 8004482:	bc08      	pop	{r3}
 8004484:	b003      	add	sp, #12
 8004486:	4718      	bx	r3
 8004488:	2000009c 	.word	0x2000009c

0800448c <malloc>:
 800448c:	b510      	push	{r4, lr}
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <malloc+0x10>)
 8004490:	0001      	movs	r1, r0
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	f000 f870 	bl	8004578 <_malloc_r>
 8004498:	bd10      	pop	{r4, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	2000009c 	.word	0x2000009c

080044a0 <_free_r>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	0005      	movs	r5, r0
 80044a4:	2900      	cmp	r1, #0
 80044a6:	d010      	beq.n	80044ca <_free_r+0x2a>
 80044a8:	1f0c      	subs	r4, r1, #4
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	da00      	bge.n	80044b2 <_free_r+0x12>
 80044b0:	18e4      	adds	r4, r4, r3
 80044b2:	0028      	movs	r0, r5
 80044b4:	f001 f86a 	bl	800558c <__malloc_lock>
 80044b8:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <_free_r+0x90>)
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <_free_r+0x2c>
 80044c0:	6063      	str	r3, [r4, #4]
 80044c2:	6014      	str	r4, [r2, #0]
 80044c4:	0028      	movs	r0, r5
 80044c6:	f001 f869 	bl	800559c <__malloc_unlock>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	42a3      	cmp	r3, r4
 80044ce:	d908      	bls.n	80044e2 <_free_r+0x42>
 80044d0:	6821      	ldr	r1, [r4, #0]
 80044d2:	1860      	adds	r0, r4, r1
 80044d4:	4283      	cmp	r3, r0
 80044d6:	d1f3      	bne.n	80044c0 <_free_r+0x20>
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	1841      	adds	r1, r0, r1
 80044de:	6021      	str	r1, [r4, #0]
 80044e0:	e7ee      	b.n	80044c0 <_free_r+0x20>
 80044e2:	001a      	movs	r2, r3
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <_free_r+0x4e>
 80044ea:	42a3      	cmp	r3, r4
 80044ec:	d9f9      	bls.n	80044e2 <_free_r+0x42>
 80044ee:	6811      	ldr	r1, [r2, #0]
 80044f0:	1850      	adds	r0, r2, r1
 80044f2:	42a0      	cmp	r0, r4
 80044f4:	d10b      	bne.n	800450e <_free_r+0x6e>
 80044f6:	6820      	ldr	r0, [r4, #0]
 80044f8:	1809      	adds	r1, r1, r0
 80044fa:	1850      	adds	r0, r2, r1
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	4283      	cmp	r3, r0
 8004500:	d1e0      	bne.n	80044c4 <_free_r+0x24>
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	1841      	adds	r1, r0, r1
 8004508:	6011      	str	r1, [r2, #0]
 800450a:	6053      	str	r3, [r2, #4]
 800450c:	e7da      	b.n	80044c4 <_free_r+0x24>
 800450e:	42a0      	cmp	r0, r4
 8004510:	d902      	bls.n	8004518 <_free_r+0x78>
 8004512:	230c      	movs	r3, #12
 8004514:	602b      	str	r3, [r5, #0]
 8004516:	e7d5      	b.n	80044c4 <_free_r+0x24>
 8004518:	6821      	ldr	r1, [r4, #0]
 800451a:	1860      	adds	r0, r4, r1
 800451c:	4283      	cmp	r3, r0
 800451e:	d103      	bne.n	8004528 <_free_r+0x88>
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	1841      	adds	r1, r0, r1
 8004526:	6021      	str	r1, [r4, #0]
 8004528:	6063      	str	r3, [r4, #4]
 800452a:	6054      	str	r4, [r2, #4]
 800452c:	e7ca      	b.n	80044c4 <_free_r+0x24>
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	200004d0 	.word	0x200004d0

08004534 <sbrk_aligned>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	4e0f      	ldr	r6, [pc, #60]	; (8004574 <sbrk_aligned+0x40>)
 8004538:	000d      	movs	r5, r1
 800453a:	6831      	ldr	r1, [r6, #0]
 800453c:	0004      	movs	r4, r0
 800453e:	2900      	cmp	r1, #0
 8004540:	d102      	bne.n	8004548 <sbrk_aligned+0x14>
 8004542:	f000 fcd5 	bl	8004ef0 <_sbrk_r>
 8004546:	6030      	str	r0, [r6, #0]
 8004548:	0029      	movs	r1, r5
 800454a:	0020      	movs	r0, r4
 800454c:	f000 fcd0 	bl	8004ef0 <_sbrk_r>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d00a      	beq.n	800456a <sbrk_aligned+0x36>
 8004554:	2303      	movs	r3, #3
 8004556:	1cc5      	adds	r5, r0, #3
 8004558:	439d      	bics	r5, r3
 800455a:	42a8      	cmp	r0, r5
 800455c:	d007      	beq.n	800456e <sbrk_aligned+0x3a>
 800455e:	1a29      	subs	r1, r5, r0
 8004560:	0020      	movs	r0, r4
 8004562:	f000 fcc5 	bl	8004ef0 <_sbrk_r>
 8004566:	1c43      	adds	r3, r0, #1
 8004568:	d101      	bne.n	800456e <sbrk_aligned+0x3a>
 800456a:	2501      	movs	r5, #1
 800456c:	426d      	negs	r5, r5
 800456e:	0028      	movs	r0, r5
 8004570:	bd70      	pop	{r4, r5, r6, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	200004d4 	.word	0x200004d4

08004578 <_malloc_r>:
 8004578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800457a:	2203      	movs	r2, #3
 800457c:	1ccb      	adds	r3, r1, #3
 800457e:	4393      	bics	r3, r2
 8004580:	3308      	adds	r3, #8
 8004582:	0006      	movs	r6, r0
 8004584:	001f      	movs	r7, r3
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d232      	bcs.n	80045f0 <_malloc_r+0x78>
 800458a:	270c      	movs	r7, #12
 800458c:	42b9      	cmp	r1, r7
 800458e:	d831      	bhi.n	80045f4 <_malloc_r+0x7c>
 8004590:	0030      	movs	r0, r6
 8004592:	f000 fffb 	bl	800558c <__malloc_lock>
 8004596:	4d32      	ldr	r5, [pc, #200]	; (8004660 <_malloc_r+0xe8>)
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	001c      	movs	r4, r3
 800459c:	2c00      	cmp	r4, #0
 800459e:	d12e      	bne.n	80045fe <_malloc_r+0x86>
 80045a0:	0039      	movs	r1, r7
 80045a2:	0030      	movs	r0, r6
 80045a4:	f7ff ffc6 	bl	8004534 <sbrk_aligned>
 80045a8:	0004      	movs	r4, r0
 80045aa:	1c43      	adds	r3, r0, #1
 80045ac:	d11e      	bne.n	80045ec <_malloc_r+0x74>
 80045ae:	682c      	ldr	r4, [r5, #0]
 80045b0:	0025      	movs	r5, r4
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	d14a      	bne.n	800464c <_malloc_r+0xd4>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	0029      	movs	r1, r5
 80045ba:	18e3      	adds	r3, r4, r3
 80045bc:	0030      	movs	r0, r6
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	f000 fc96 	bl	8004ef0 <_sbrk_r>
 80045c4:	9b01      	ldr	r3, [sp, #4]
 80045c6:	4283      	cmp	r3, r0
 80045c8:	d143      	bne.n	8004652 <_malloc_r+0xda>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	3703      	adds	r7, #3
 80045ce:	1aff      	subs	r7, r7, r3
 80045d0:	2303      	movs	r3, #3
 80045d2:	439f      	bics	r7, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	2f0c      	cmp	r7, #12
 80045d8:	d200      	bcs.n	80045dc <_malloc_r+0x64>
 80045da:	270c      	movs	r7, #12
 80045dc:	0039      	movs	r1, r7
 80045de:	0030      	movs	r0, r6
 80045e0:	f7ff ffa8 	bl	8004534 <sbrk_aligned>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d034      	beq.n	8004652 <_malloc_r+0xda>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	19df      	adds	r7, r3, r7
 80045ec:	6027      	str	r7, [r4, #0]
 80045ee:	e013      	b.n	8004618 <_malloc_r+0xa0>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	dacb      	bge.n	800458c <_malloc_r+0x14>
 80045f4:	230c      	movs	r3, #12
 80045f6:	2500      	movs	r5, #0
 80045f8:	6033      	str	r3, [r6, #0]
 80045fa:	0028      	movs	r0, r5
 80045fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045fe:	6822      	ldr	r2, [r4, #0]
 8004600:	1bd1      	subs	r1, r2, r7
 8004602:	d420      	bmi.n	8004646 <_malloc_r+0xce>
 8004604:	290b      	cmp	r1, #11
 8004606:	d917      	bls.n	8004638 <_malloc_r+0xc0>
 8004608:	19e2      	adds	r2, r4, r7
 800460a:	6027      	str	r7, [r4, #0]
 800460c:	42a3      	cmp	r3, r4
 800460e:	d111      	bne.n	8004634 <_malloc_r+0xbc>
 8004610:	602a      	str	r2, [r5, #0]
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	6053      	str	r3, [r2, #4]
 8004618:	0030      	movs	r0, r6
 800461a:	0025      	movs	r5, r4
 800461c:	f000 ffbe 	bl	800559c <__malloc_unlock>
 8004620:	2207      	movs	r2, #7
 8004622:	350b      	adds	r5, #11
 8004624:	1d23      	adds	r3, r4, #4
 8004626:	4395      	bics	r5, r2
 8004628:	1aea      	subs	r2, r5, r3
 800462a:	429d      	cmp	r5, r3
 800462c:	d0e5      	beq.n	80045fa <_malloc_r+0x82>
 800462e:	1b5b      	subs	r3, r3, r5
 8004630:	50a3      	str	r3, [r4, r2]
 8004632:	e7e2      	b.n	80045fa <_malloc_r+0x82>
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	e7ec      	b.n	8004612 <_malloc_r+0x9a>
 8004638:	6862      	ldr	r2, [r4, #4]
 800463a:	42a3      	cmp	r3, r4
 800463c:	d101      	bne.n	8004642 <_malloc_r+0xca>
 800463e:	602a      	str	r2, [r5, #0]
 8004640:	e7ea      	b.n	8004618 <_malloc_r+0xa0>
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	e7e8      	b.n	8004618 <_malloc_r+0xa0>
 8004646:	0023      	movs	r3, r4
 8004648:	6864      	ldr	r4, [r4, #4]
 800464a:	e7a7      	b.n	800459c <_malloc_r+0x24>
 800464c:	002c      	movs	r4, r5
 800464e:	686d      	ldr	r5, [r5, #4]
 8004650:	e7af      	b.n	80045b2 <_malloc_r+0x3a>
 8004652:	230c      	movs	r3, #12
 8004654:	0030      	movs	r0, r6
 8004656:	6033      	str	r3, [r6, #0]
 8004658:	f000 ffa0 	bl	800559c <__malloc_unlock>
 800465c:	e7cd      	b.n	80045fa <_malloc_r+0x82>
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	200004d0 	.word	0x200004d0

08004664 <__ssputs_r>:
 8004664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004666:	688e      	ldr	r6, [r1, #8]
 8004668:	b085      	sub	sp, #20
 800466a:	0007      	movs	r7, r0
 800466c:	000c      	movs	r4, r1
 800466e:	9203      	str	r2, [sp, #12]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	429e      	cmp	r6, r3
 8004674:	d83c      	bhi.n	80046f0 <__ssputs_r+0x8c>
 8004676:	2390      	movs	r3, #144	; 0x90
 8004678:	898a      	ldrh	r2, [r1, #12]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	421a      	tst	r2, r3
 800467e:	d034      	beq.n	80046ea <__ssputs_r+0x86>
 8004680:	6909      	ldr	r1, [r1, #16]
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	6960      	ldr	r0, [r4, #20]
 8004686:	1a5b      	subs	r3, r3, r1
 8004688:	9302      	str	r3, [sp, #8]
 800468a:	2303      	movs	r3, #3
 800468c:	4343      	muls	r3, r0
 800468e:	0fdd      	lsrs	r5, r3, #31
 8004690:	18ed      	adds	r5, r5, r3
 8004692:	9b01      	ldr	r3, [sp, #4]
 8004694:	9802      	ldr	r0, [sp, #8]
 8004696:	3301      	adds	r3, #1
 8004698:	181b      	adds	r3, r3, r0
 800469a:	106d      	asrs	r5, r5, #1
 800469c:	42ab      	cmp	r3, r5
 800469e:	d900      	bls.n	80046a2 <__ssputs_r+0x3e>
 80046a0:	001d      	movs	r5, r3
 80046a2:	0553      	lsls	r3, r2, #21
 80046a4:	d532      	bpl.n	800470c <__ssputs_r+0xa8>
 80046a6:	0029      	movs	r1, r5
 80046a8:	0038      	movs	r0, r7
 80046aa:	f7ff ff65 	bl	8004578 <_malloc_r>
 80046ae:	1e06      	subs	r6, r0, #0
 80046b0:	d109      	bne.n	80046c6 <__ssputs_r+0x62>
 80046b2:	230c      	movs	r3, #12
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	2340      	movs	r3, #64	; 0x40
 80046b8:	2001      	movs	r0, #1
 80046ba:	89a2      	ldrh	r2, [r4, #12]
 80046bc:	4240      	negs	r0, r0
 80046be:	4313      	orrs	r3, r2
 80046c0:	81a3      	strh	r3, [r4, #12]
 80046c2:	b005      	add	sp, #20
 80046c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c6:	9a02      	ldr	r2, [sp, #8]
 80046c8:	6921      	ldr	r1, [r4, #16]
 80046ca:	f000 ff42 	bl	8005552 <memcpy>
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <__ssputs_r+0xc0>)
 80046d2:	401a      	ands	r2, r3
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	4313      	orrs	r3, r2
 80046d8:	81a3      	strh	r3, [r4, #12]
 80046da:	9b02      	ldr	r3, [sp, #8]
 80046dc:	6126      	str	r6, [r4, #16]
 80046de:	18f6      	adds	r6, r6, r3
 80046e0:	6026      	str	r6, [r4, #0]
 80046e2:	6165      	str	r5, [r4, #20]
 80046e4:	9e01      	ldr	r6, [sp, #4]
 80046e6:	1aed      	subs	r5, r5, r3
 80046e8:	60a5      	str	r5, [r4, #8]
 80046ea:	9b01      	ldr	r3, [sp, #4]
 80046ec:	429e      	cmp	r6, r3
 80046ee:	d900      	bls.n	80046f2 <__ssputs_r+0x8e>
 80046f0:	9e01      	ldr	r6, [sp, #4]
 80046f2:	0032      	movs	r2, r6
 80046f4:	9903      	ldr	r1, [sp, #12]
 80046f6:	6820      	ldr	r0, [r4, #0]
 80046f8:	f000 ff34 	bl	8005564 <memmove>
 80046fc:	68a3      	ldr	r3, [r4, #8]
 80046fe:	2000      	movs	r0, #0
 8004700:	1b9b      	subs	r3, r3, r6
 8004702:	60a3      	str	r3, [r4, #8]
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	199e      	adds	r6, r3, r6
 8004708:	6026      	str	r6, [r4, #0]
 800470a:	e7da      	b.n	80046c2 <__ssputs_r+0x5e>
 800470c:	002a      	movs	r2, r5
 800470e:	0038      	movs	r0, r7
 8004710:	f000 ff4c 	bl	80055ac <_realloc_r>
 8004714:	1e06      	subs	r6, r0, #0
 8004716:	d1e0      	bne.n	80046da <__ssputs_r+0x76>
 8004718:	0038      	movs	r0, r7
 800471a:	6921      	ldr	r1, [r4, #16]
 800471c:	f7ff fec0 	bl	80044a0 <_free_r>
 8004720:	e7c7      	b.n	80046b2 <__ssputs_r+0x4e>
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	fffffb7f 	.word	0xfffffb7f

08004728 <_svfiprintf_r>:
 8004728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472a:	b0a1      	sub	sp, #132	; 0x84
 800472c:	9003      	str	r0, [sp, #12]
 800472e:	001d      	movs	r5, r3
 8004730:	898b      	ldrh	r3, [r1, #12]
 8004732:	000f      	movs	r7, r1
 8004734:	0016      	movs	r6, r2
 8004736:	061b      	lsls	r3, r3, #24
 8004738:	d511      	bpl.n	800475e <_svfiprintf_r+0x36>
 800473a:	690b      	ldr	r3, [r1, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10e      	bne.n	800475e <_svfiprintf_r+0x36>
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	f7ff ff19 	bl	8004578 <_malloc_r>
 8004746:	6038      	str	r0, [r7, #0]
 8004748:	6138      	str	r0, [r7, #16]
 800474a:	2800      	cmp	r0, #0
 800474c:	d105      	bne.n	800475a <_svfiprintf_r+0x32>
 800474e:	230c      	movs	r3, #12
 8004750:	9a03      	ldr	r2, [sp, #12]
 8004752:	3801      	subs	r0, #1
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	b021      	add	sp, #132	; 0x84
 8004758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800475a:	2340      	movs	r3, #64	; 0x40
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	2300      	movs	r3, #0
 8004760:	ac08      	add	r4, sp, #32
 8004762:	6163      	str	r3, [r4, #20]
 8004764:	3320      	adds	r3, #32
 8004766:	7663      	strb	r3, [r4, #25]
 8004768:	3310      	adds	r3, #16
 800476a:	76a3      	strb	r3, [r4, #26]
 800476c:	9507      	str	r5, [sp, #28]
 800476e:	0035      	movs	r5, r6
 8004770:	782b      	ldrb	r3, [r5, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <_svfiprintf_r+0x52>
 8004776:	2b25      	cmp	r3, #37	; 0x25
 8004778:	d147      	bne.n	800480a <_svfiprintf_r+0xe2>
 800477a:	1bab      	subs	r3, r5, r6
 800477c:	9305      	str	r3, [sp, #20]
 800477e:	42b5      	cmp	r5, r6
 8004780:	d00c      	beq.n	800479c <_svfiprintf_r+0x74>
 8004782:	0032      	movs	r2, r6
 8004784:	0039      	movs	r1, r7
 8004786:	9803      	ldr	r0, [sp, #12]
 8004788:	f7ff ff6c 	bl	8004664 <__ssputs_r>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d100      	bne.n	8004792 <_svfiprintf_r+0x6a>
 8004790:	e0ae      	b.n	80048f0 <_svfiprintf_r+0x1c8>
 8004792:	6962      	ldr	r2, [r4, #20]
 8004794:	9b05      	ldr	r3, [sp, #20]
 8004796:	4694      	mov	ip, r2
 8004798:	4463      	add	r3, ip
 800479a:	6163      	str	r3, [r4, #20]
 800479c:	782b      	ldrb	r3, [r5, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d100      	bne.n	80047a4 <_svfiprintf_r+0x7c>
 80047a2:	e0a5      	b.n	80048f0 <_svfiprintf_r+0x1c8>
 80047a4:	2201      	movs	r2, #1
 80047a6:	2300      	movs	r3, #0
 80047a8:	4252      	negs	r2, r2
 80047aa:	6062      	str	r2, [r4, #4]
 80047ac:	a904      	add	r1, sp, #16
 80047ae:	3254      	adds	r2, #84	; 0x54
 80047b0:	1852      	adds	r2, r2, r1
 80047b2:	1c6e      	adds	r6, r5, #1
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	60e3      	str	r3, [r4, #12]
 80047b8:	60a3      	str	r3, [r4, #8]
 80047ba:	7013      	strb	r3, [r2, #0]
 80047bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80047be:	2205      	movs	r2, #5
 80047c0:	7831      	ldrb	r1, [r6, #0]
 80047c2:	4854      	ldr	r0, [pc, #336]	; (8004914 <_svfiprintf_r+0x1ec>)
 80047c4:	f000 feba 	bl	800553c <memchr>
 80047c8:	1c75      	adds	r5, r6, #1
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d11f      	bne.n	800480e <_svfiprintf_r+0xe6>
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	06d3      	lsls	r3, r2, #27
 80047d2:	d504      	bpl.n	80047de <_svfiprintf_r+0xb6>
 80047d4:	2353      	movs	r3, #83	; 0x53
 80047d6:	a904      	add	r1, sp, #16
 80047d8:	185b      	adds	r3, r3, r1
 80047da:	2120      	movs	r1, #32
 80047dc:	7019      	strb	r1, [r3, #0]
 80047de:	0713      	lsls	r3, r2, #28
 80047e0:	d504      	bpl.n	80047ec <_svfiprintf_r+0xc4>
 80047e2:	2353      	movs	r3, #83	; 0x53
 80047e4:	a904      	add	r1, sp, #16
 80047e6:	185b      	adds	r3, r3, r1
 80047e8:	212b      	movs	r1, #43	; 0x2b
 80047ea:	7019      	strb	r1, [r3, #0]
 80047ec:	7833      	ldrb	r3, [r6, #0]
 80047ee:	2b2a      	cmp	r3, #42	; 0x2a
 80047f0:	d016      	beq.n	8004820 <_svfiprintf_r+0xf8>
 80047f2:	0035      	movs	r5, r6
 80047f4:	2100      	movs	r1, #0
 80047f6:	200a      	movs	r0, #10
 80047f8:	68e3      	ldr	r3, [r4, #12]
 80047fa:	782a      	ldrb	r2, [r5, #0]
 80047fc:	1c6e      	adds	r6, r5, #1
 80047fe:	3a30      	subs	r2, #48	; 0x30
 8004800:	2a09      	cmp	r2, #9
 8004802:	d94e      	bls.n	80048a2 <_svfiprintf_r+0x17a>
 8004804:	2900      	cmp	r1, #0
 8004806:	d111      	bne.n	800482c <_svfiprintf_r+0x104>
 8004808:	e017      	b.n	800483a <_svfiprintf_r+0x112>
 800480a:	3501      	adds	r5, #1
 800480c:	e7b0      	b.n	8004770 <_svfiprintf_r+0x48>
 800480e:	4b41      	ldr	r3, [pc, #260]	; (8004914 <_svfiprintf_r+0x1ec>)
 8004810:	6822      	ldr	r2, [r4, #0]
 8004812:	1ac0      	subs	r0, r0, r3
 8004814:	2301      	movs	r3, #1
 8004816:	4083      	lsls	r3, r0
 8004818:	4313      	orrs	r3, r2
 800481a:	002e      	movs	r6, r5
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	e7ce      	b.n	80047be <_svfiprintf_r+0x96>
 8004820:	9b07      	ldr	r3, [sp, #28]
 8004822:	1d19      	adds	r1, r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	9107      	str	r1, [sp, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	db01      	blt.n	8004830 <_svfiprintf_r+0x108>
 800482c:	930b      	str	r3, [sp, #44]	; 0x2c
 800482e:	e004      	b.n	800483a <_svfiprintf_r+0x112>
 8004830:	425b      	negs	r3, r3
 8004832:	60e3      	str	r3, [r4, #12]
 8004834:	2302      	movs	r3, #2
 8004836:	4313      	orrs	r3, r2
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	782b      	ldrb	r3, [r5, #0]
 800483c:	2b2e      	cmp	r3, #46	; 0x2e
 800483e:	d10a      	bne.n	8004856 <_svfiprintf_r+0x12e>
 8004840:	786b      	ldrb	r3, [r5, #1]
 8004842:	2b2a      	cmp	r3, #42	; 0x2a
 8004844:	d135      	bne.n	80048b2 <_svfiprintf_r+0x18a>
 8004846:	9b07      	ldr	r3, [sp, #28]
 8004848:	3502      	adds	r5, #2
 800484a:	1d1a      	adds	r2, r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	9207      	str	r2, [sp, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	db2b      	blt.n	80048ac <_svfiprintf_r+0x184>
 8004854:	9309      	str	r3, [sp, #36]	; 0x24
 8004856:	4e30      	ldr	r6, [pc, #192]	; (8004918 <_svfiprintf_r+0x1f0>)
 8004858:	2203      	movs	r2, #3
 800485a:	0030      	movs	r0, r6
 800485c:	7829      	ldrb	r1, [r5, #0]
 800485e:	f000 fe6d 	bl	800553c <memchr>
 8004862:	2800      	cmp	r0, #0
 8004864:	d006      	beq.n	8004874 <_svfiprintf_r+0x14c>
 8004866:	2340      	movs	r3, #64	; 0x40
 8004868:	1b80      	subs	r0, r0, r6
 800486a:	4083      	lsls	r3, r0
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	3501      	adds	r5, #1
 8004870:	4313      	orrs	r3, r2
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	7829      	ldrb	r1, [r5, #0]
 8004876:	2206      	movs	r2, #6
 8004878:	4828      	ldr	r0, [pc, #160]	; (800491c <_svfiprintf_r+0x1f4>)
 800487a:	1c6e      	adds	r6, r5, #1
 800487c:	7621      	strb	r1, [r4, #24]
 800487e:	f000 fe5d 	bl	800553c <memchr>
 8004882:	2800      	cmp	r0, #0
 8004884:	d03c      	beq.n	8004900 <_svfiprintf_r+0x1d8>
 8004886:	4b26      	ldr	r3, [pc, #152]	; (8004920 <_svfiprintf_r+0x1f8>)
 8004888:	2b00      	cmp	r3, #0
 800488a:	d125      	bne.n	80048d8 <_svfiprintf_r+0x1b0>
 800488c:	2207      	movs	r2, #7
 800488e:	9b07      	ldr	r3, [sp, #28]
 8004890:	3307      	adds	r3, #7
 8004892:	4393      	bics	r3, r2
 8004894:	3308      	adds	r3, #8
 8004896:	9307      	str	r3, [sp, #28]
 8004898:	6963      	ldr	r3, [r4, #20]
 800489a:	9a04      	ldr	r2, [sp, #16]
 800489c:	189b      	adds	r3, r3, r2
 800489e:	6163      	str	r3, [r4, #20]
 80048a0:	e765      	b.n	800476e <_svfiprintf_r+0x46>
 80048a2:	4343      	muls	r3, r0
 80048a4:	0035      	movs	r5, r6
 80048a6:	2101      	movs	r1, #1
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	e7a6      	b.n	80047fa <_svfiprintf_r+0xd2>
 80048ac:	2301      	movs	r3, #1
 80048ae:	425b      	negs	r3, r3
 80048b0:	e7d0      	b.n	8004854 <_svfiprintf_r+0x12c>
 80048b2:	2300      	movs	r3, #0
 80048b4:	200a      	movs	r0, #10
 80048b6:	001a      	movs	r2, r3
 80048b8:	3501      	adds	r5, #1
 80048ba:	6063      	str	r3, [r4, #4]
 80048bc:	7829      	ldrb	r1, [r5, #0]
 80048be:	1c6e      	adds	r6, r5, #1
 80048c0:	3930      	subs	r1, #48	; 0x30
 80048c2:	2909      	cmp	r1, #9
 80048c4:	d903      	bls.n	80048ce <_svfiprintf_r+0x1a6>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0c5      	beq.n	8004856 <_svfiprintf_r+0x12e>
 80048ca:	9209      	str	r2, [sp, #36]	; 0x24
 80048cc:	e7c3      	b.n	8004856 <_svfiprintf_r+0x12e>
 80048ce:	4342      	muls	r2, r0
 80048d0:	0035      	movs	r5, r6
 80048d2:	2301      	movs	r3, #1
 80048d4:	1852      	adds	r2, r2, r1
 80048d6:	e7f1      	b.n	80048bc <_svfiprintf_r+0x194>
 80048d8:	ab07      	add	r3, sp, #28
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	003a      	movs	r2, r7
 80048de:	0021      	movs	r1, r4
 80048e0:	4b10      	ldr	r3, [pc, #64]	; (8004924 <_svfiprintf_r+0x1fc>)
 80048e2:	9803      	ldr	r0, [sp, #12]
 80048e4:	e000      	b.n	80048e8 <_svfiprintf_r+0x1c0>
 80048e6:	bf00      	nop
 80048e8:	9004      	str	r0, [sp, #16]
 80048ea:	9b04      	ldr	r3, [sp, #16]
 80048ec:	3301      	adds	r3, #1
 80048ee:	d1d3      	bne.n	8004898 <_svfiprintf_r+0x170>
 80048f0:	89bb      	ldrh	r3, [r7, #12]
 80048f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80048f4:	065b      	lsls	r3, r3, #25
 80048f6:	d400      	bmi.n	80048fa <_svfiprintf_r+0x1d2>
 80048f8:	e72d      	b.n	8004756 <_svfiprintf_r+0x2e>
 80048fa:	2001      	movs	r0, #1
 80048fc:	4240      	negs	r0, r0
 80048fe:	e72a      	b.n	8004756 <_svfiprintf_r+0x2e>
 8004900:	ab07      	add	r3, sp, #28
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	003a      	movs	r2, r7
 8004906:	0021      	movs	r1, r4
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <_svfiprintf_r+0x1fc>)
 800490a:	9803      	ldr	r0, [sp, #12]
 800490c:	f000 f9de 	bl	8004ccc <_printf_i>
 8004910:	e7ea      	b.n	80048e8 <_svfiprintf_r+0x1c0>
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	08005b54 	.word	0x08005b54
 8004918:	08005b5a 	.word	0x08005b5a
 800491c:	08005b5e 	.word	0x08005b5e
 8004920:	00000000 	.word	0x00000000
 8004924:	08004665 	.word	0x08004665

08004928 <__sfputc_r>:
 8004928:	6893      	ldr	r3, [r2, #8]
 800492a:	b510      	push	{r4, lr}
 800492c:	3b01      	subs	r3, #1
 800492e:	6093      	str	r3, [r2, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	da04      	bge.n	800493e <__sfputc_r+0x16>
 8004934:	6994      	ldr	r4, [r2, #24]
 8004936:	42a3      	cmp	r3, r4
 8004938:	db07      	blt.n	800494a <__sfputc_r+0x22>
 800493a:	290a      	cmp	r1, #10
 800493c:	d005      	beq.n	800494a <__sfputc_r+0x22>
 800493e:	6813      	ldr	r3, [r2, #0]
 8004940:	1c58      	adds	r0, r3, #1
 8004942:	6010      	str	r0, [r2, #0]
 8004944:	7019      	strb	r1, [r3, #0]
 8004946:	0008      	movs	r0, r1
 8004948:	bd10      	pop	{r4, pc}
 800494a:	f000 fae3 	bl	8004f14 <__swbuf_r>
 800494e:	0001      	movs	r1, r0
 8004950:	e7f9      	b.n	8004946 <__sfputc_r+0x1e>

08004952 <__sfputs_r>:
 8004952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004954:	0006      	movs	r6, r0
 8004956:	000f      	movs	r7, r1
 8004958:	0014      	movs	r4, r2
 800495a:	18d5      	adds	r5, r2, r3
 800495c:	42ac      	cmp	r4, r5
 800495e:	d101      	bne.n	8004964 <__sfputs_r+0x12>
 8004960:	2000      	movs	r0, #0
 8004962:	e007      	b.n	8004974 <__sfputs_r+0x22>
 8004964:	7821      	ldrb	r1, [r4, #0]
 8004966:	003a      	movs	r2, r7
 8004968:	0030      	movs	r0, r6
 800496a:	f7ff ffdd 	bl	8004928 <__sfputc_r>
 800496e:	3401      	adds	r4, #1
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d1f3      	bne.n	800495c <__sfputs_r+0xa>
 8004974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004978 <_vfiprintf_r>:
 8004978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497a:	b0a1      	sub	sp, #132	; 0x84
 800497c:	0006      	movs	r6, r0
 800497e:	000c      	movs	r4, r1
 8004980:	001f      	movs	r7, r3
 8004982:	9203      	str	r2, [sp, #12]
 8004984:	2800      	cmp	r0, #0
 8004986:	d004      	beq.n	8004992 <_vfiprintf_r+0x1a>
 8004988:	6983      	ldr	r3, [r0, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <_vfiprintf_r+0x1a>
 800498e:	f000 fcc5 	bl	800531c <__sinit>
 8004992:	4b8e      	ldr	r3, [pc, #568]	; (8004bcc <_vfiprintf_r+0x254>)
 8004994:	429c      	cmp	r4, r3
 8004996:	d11c      	bne.n	80049d2 <_vfiprintf_r+0x5a>
 8004998:	6874      	ldr	r4, [r6, #4]
 800499a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800499c:	07db      	lsls	r3, r3, #31
 800499e:	d405      	bmi.n	80049ac <_vfiprintf_r+0x34>
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	059b      	lsls	r3, r3, #22
 80049a4:	d402      	bmi.n	80049ac <_vfiprintf_r+0x34>
 80049a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049a8:	f000 fd59 	bl	800545e <__retarget_lock_acquire_recursive>
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	071b      	lsls	r3, r3, #28
 80049b0:	d502      	bpl.n	80049b8 <_vfiprintf_r+0x40>
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11d      	bne.n	80049f4 <_vfiprintf_r+0x7c>
 80049b8:	0021      	movs	r1, r4
 80049ba:	0030      	movs	r0, r6
 80049bc:	f000 fb00 	bl	8004fc0 <__swsetup_r>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d017      	beq.n	80049f4 <_vfiprintf_r+0x7c>
 80049c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c6:	07db      	lsls	r3, r3, #31
 80049c8:	d50d      	bpl.n	80049e6 <_vfiprintf_r+0x6e>
 80049ca:	2001      	movs	r0, #1
 80049cc:	4240      	negs	r0, r0
 80049ce:	b021      	add	sp, #132	; 0x84
 80049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d2:	4b7f      	ldr	r3, [pc, #508]	; (8004bd0 <_vfiprintf_r+0x258>)
 80049d4:	429c      	cmp	r4, r3
 80049d6:	d101      	bne.n	80049dc <_vfiprintf_r+0x64>
 80049d8:	68b4      	ldr	r4, [r6, #8]
 80049da:	e7de      	b.n	800499a <_vfiprintf_r+0x22>
 80049dc:	4b7d      	ldr	r3, [pc, #500]	; (8004bd4 <_vfiprintf_r+0x25c>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d1db      	bne.n	800499a <_vfiprintf_r+0x22>
 80049e2:	68f4      	ldr	r4, [r6, #12]
 80049e4:	e7d9      	b.n	800499a <_vfiprintf_r+0x22>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	059b      	lsls	r3, r3, #22
 80049ea:	d4ee      	bmi.n	80049ca <_vfiprintf_r+0x52>
 80049ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ee:	f000 fd37 	bl	8005460 <__retarget_lock_release_recursive>
 80049f2:	e7ea      	b.n	80049ca <_vfiprintf_r+0x52>
 80049f4:	2300      	movs	r3, #0
 80049f6:	ad08      	add	r5, sp, #32
 80049f8:	616b      	str	r3, [r5, #20]
 80049fa:	3320      	adds	r3, #32
 80049fc:	766b      	strb	r3, [r5, #25]
 80049fe:	3310      	adds	r3, #16
 8004a00:	76ab      	strb	r3, [r5, #26]
 8004a02:	9707      	str	r7, [sp, #28]
 8004a04:	9f03      	ldr	r7, [sp, #12]
 8004a06:	783b      	ldrb	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <_vfiprintf_r+0x98>
 8004a0c:	2b25      	cmp	r3, #37	; 0x25
 8004a0e:	d14e      	bne.n	8004aae <_vfiprintf_r+0x136>
 8004a10:	9b03      	ldr	r3, [sp, #12]
 8004a12:	1afb      	subs	r3, r7, r3
 8004a14:	9305      	str	r3, [sp, #20]
 8004a16:	9b03      	ldr	r3, [sp, #12]
 8004a18:	429f      	cmp	r7, r3
 8004a1a:	d00d      	beq.n	8004a38 <_vfiprintf_r+0xc0>
 8004a1c:	9b05      	ldr	r3, [sp, #20]
 8004a1e:	0021      	movs	r1, r4
 8004a20:	0030      	movs	r0, r6
 8004a22:	9a03      	ldr	r2, [sp, #12]
 8004a24:	f7ff ff95 	bl	8004952 <__sfputs_r>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d100      	bne.n	8004a2e <_vfiprintf_r+0xb6>
 8004a2c:	e0b5      	b.n	8004b9a <_vfiprintf_r+0x222>
 8004a2e:	696a      	ldr	r2, [r5, #20]
 8004a30:	9b05      	ldr	r3, [sp, #20]
 8004a32:	4694      	mov	ip, r2
 8004a34:	4463      	add	r3, ip
 8004a36:	616b      	str	r3, [r5, #20]
 8004a38:	783b      	ldrb	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d100      	bne.n	8004a40 <_vfiprintf_r+0xc8>
 8004a3e:	e0ac      	b.n	8004b9a <_vfiprintf_r+0x222>
 8004a40:	2201      	movs	r2, #1
 8004a42:	1c7b      	adds	r3, r7, #1
 8004a44:	9303      	str	r3, [sp, #12]
 8004a46:	2300      	movs	r3, #0
 8004a48:	4252      	negs	r2, r2
 8004a4a:	606a      	str	r2, [r5, #4]
 8004a4c:	a904      	add	r1, sp, #16
 8004a4e:	3254      	adds	r2, #84	; 0x54
 8004a50:	1852      	adds	r2, r2, r1
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	60eb      	str	r3, [r5, #12]
 8004a56:	60ab      	str	r3, [r5, #8]
 8004a58:	7013      	strb	r3, [r2, #0]
 8004a5a:	65ab      	str	r3, [r5, #88]	; 0x58
 8004a5c:	9b03      	ldr	r3, [sp, #12]
 8004a5e:	2205      	movs	r2, #5
 8004a60:	7819      	ldrb	r1, [r3, #0]
 8004a62:	485d      	ldr	r0, [pc, #372]	; (8004bd8 <_vfiprintf_r+0x260>)
 8004a64:	f000 fd6a 	bl	800553c <memchr>
 8004a68:	9b03      	ldr	r3, [sp, #12]
 8004a6a:	1c5f      	adds	r7, r3, #1
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d120      	bne.n	8004ab2 <_vfiprintf_r+0x13a>
 8004a70:	682a      	ldr	r2, [r5, #0]
 8004a72:	06d3      	lsls	r3, r2, #27
 8004a74:	d504      	bpl.n	8004a80 <_vfiprintf_r+0x108>
 8004a76:	2353      	movs	r3, #83	; 0x53
 8004a78:	a904      	add	r1, sp, #16
 8004a7a:	185b      	adds	r3, r3, r1
 8004a7c:	2120      	movs	r1, #32
 8004a7e:	7019      	strb	r1, [r3, #0]
 8004a80:	0713      	lsls	r3, r2, #28
 8004a82:	d504      	bpl.n	8004a8e <_vfiprintf_r+0x116>
 8004a84:	2353      	movs	r3, #83	; 0x53
 8004a86:	a904      	add	r1, sp, #16
 8004a88:	185b      	adds	r3, r3, r1
 8004a8a:	212b      	movs	r1, #43	; 0x2b
 8004a8c:	7019      	strb	r1, [r3, #0]
 8004a8e:	9b03      	ldr	r3, [sp, #12]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b2a      	cmp	r3, #42	; 0x2a
 8004a94:	d016      	beq.n	8004ac4 <_vfiprintf_r+0x14c>
 8004a96:	2100      	movs	r1, #0
 8004a98:	68eb      	ldr	r3, [r5, #12]
 8004a9a:	9f03      	ldr	r7, [sp, #12]
 8004a9c:	783a      	ldrb	r2, [r7, #0]
 8004a9e:	1c78      	adds	r0, r7, #1
 8004aa0:	3a30      	subs	r2, #48	; 0x30
 8004aa2:	4684      	mov	ip, r0
 8004aa4:	2a09      	cmp	r2, #9
 8004aa6:	d94f      	bls.n	8004b48 <_vfiprintf_r+0x1d0>
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	d111      	bne.n	8004ad0 <_vfiprintf_r+0x158>
 8004aac:	e017      	b.n	8004ade <_vfiprintf_r+0x166>
 8004aae:	3701      	adds	r7, #1
 8004ab0:	e7a9      	b.n	8004a06 <_vfiprintf_r+0x8e>
 8004ab2:	4b49      	ldr	r3, [pc, #292]	; (8004bd8 <_vfiprintf_r+0x260>)
 8004ab4:	682a      	ldr	r2, [r5, #0]
 8004ab6:	1ac0      	subs	r0, r0, r3
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4083      	lsls	r3, r0
 8004abc:	4313      	orrs	r3, r2
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	9703      	str	r7, [sp, #12]
 8004ac2:	e7cb      	b.n	8004a5c <_vfiprintf_r+0xe4>
 8004ac4:	9b07      	ldr	r3, [sp, #28]
 8004ac6:	1d19      	adds	r1, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	9107      	str	r1, [sp, #28]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db01      	blt.n	8004ad4 <_vfiprintf_r+0x15c>
 8004ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad2:	e004      	b.n	8004ade <_vfiprintf_r+0x166>
 8004ad4:	425b      	negs	r3, r3
 8004ad6:	60eb      	str	r3, [r5, #12]
 8004ad8:	2302      	movs	r3, #2
 8004ada:	4313      	orrs	r3, r2
 8004adc:	602b      	str	r3, [r5, #0]
 8004ade:	783b      	ldrb	r3, [r7, #0]
 8004ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ae2:	d10a      	bne.n	8004afa <_vfiprintf_r+0x182>
 8004ae4:	787b      	ldrb	r3, [r7, #1]
 8004ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae8:	d137      	bne.n	8004b5a <_vfiprintf_r+0x1e2>
 8004aea:	9b07      	ldr	r3, [sp, #28]
 8004aec:	3702      	adds	r7, #2
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	9207      	str	r2, [sp, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	db2d      	blt.n	8004b54 <_vfiprintf_r+0x1dc>
 8004af8:	9309      	str	r3, [sp, #36]	; 0x24
 8004afa:	2203      	movs	r2, #3
 8004afc:	7839      	ldrb	r1, [r7, #0]
 8004afe:	4837      	ldr	r0, [pc, #220]	; (8004bdc <_vfiprintf_r+0x264>)
 8004b00:	f000 fd1c 	bl	800553c <memchr>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d007      	beq.n	8004b18 <_vfiprintf_r+0x1a0>
 8004b08:	4b34      	ldr	r3, [pc, #208]	; (8004bdc <_vfiprintf_r+0x264>)
 8004b0a:	682a      	ldr	r2, [r5, #0]
 8004b0c:	1ac0      	subs	r0, r0, r3
 8004b0e:	2340      	movs	r3, #64	; 0x40
 8004b10:	4083      	lsls	r3, r0
 8004b12:	4313      	orrs	r3, r2
 8004b14:	3701      	adds	r7, #1
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	7839      	ldrb	r1, [r7, #0]
 8004b1a:	1c7b      	adds	r3, r7, #1
 8004b1c:	2206      	movs	r2, #6
 8004b1e:	4830      	ldr	r0, [pc, #192]	; (8004be0 <_vfiprintf_r+0x268>)
 8004b20:	9303      	str	r3, [sp, #12]
 8004b22:	7629      	strb	r1, [r5, #24]
 8004b24:	f000 fd0a 	bl	800553c <memchr>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d045      	beq.n	8004bb8 <_vfiprintf_r+0x240>
 8004b2c:	4b2d      	ldr	r3, [pc, #180]	; (8004be4 <_vfiprintf_r+0x26c>)
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d127      	bne.n	8004b82 <_vfiprintf_r+0x20a>
 8004b32:	2207      	movs	r2, #7
 8004b34:	9b07      	ldr	r3, [sp, #28]
 8004b36:	3307      	adds	r3, #7
 8004b38:	4393      	bics	r3, r2
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	9307      	str	r3, [sp, #28]
 8004b3e:	696b      	ldr	r3, [r5, #20]
 8004b40:	9a04      	ldr	r2, [sp, #16]
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	616b      	str	r3, [r5, #20]
 8004b46:	e75d      	b.n	8004a04 <_vfiprintf_r+0x8c>
 8004b48:	210a      	movs	r1, #10
 8004b4a:	434b      	muls	r3, r1
 8004b4c:	4667      	mov	r7, ip
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	3909      	subs	r1, #9
 8004b52:	e7a3      	b.n	8004a9c <_vfiprintf_r+0x124>
 8004b54:	2301      	movs	r3, #1
 8004b56:	425b      	negs	r3, r3
 8004b58:	e7ce      	b.n	8004af8 <_vfiprintf_r+0x180>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	001a      	movs	r2, r3
 8004b5e:	3701      	adds	r7, #1
 8004b60:	606b      	str	r3, [r5, #4]
 8004b62:	7839      	ldrb	r1, [r7, #0]
 8004b64:	1c78      	adds	r0, r7, #1
 8004b66:	3930      	subs	r1, #48	; 0x30
 8004b68:	4684      	mov	ip, r0
 8004b6a:	2909      	cmp	r1, #9
 8004b6c:	d903      	bls.n	8004b76 <_vfiprintf_r+0x1fe>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0c3      	beq.n	8004afa <_vfiprintf_r+0x182>
 8004b72:	9209      	str	r2, [sp, #36]	; 0x24
 8004b74:	e7c1      	b.n	8004afa <_vfiprintf_r+0x182>
 8004b76:	230a      	movs	r3, #10
 8004b78:	435a      	muls	r2, r3
 8004b7a:	4667      	mov	r7, ip
 8004b7c:	1852      	adds	r2, r2, r1
 8004b7e:	3b09      	subs	r3, #9
 8004b80:	e7ef      	b.n	8004b62 <_vfiprintf_r+0x1ea>
 8004b82:	ab07      	add	r3, sp, #28
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	0022      	movs	r2, r4
 8004b88:	0029      	movs	r1, r5
 8004b8a:	0030      	movs	r0, r6
 8004b8c:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <_vfiprintf_r+0x270>)
 8004b8e:	e000      	b.n	8004b92 <_vfiprintf_r+0x21a>
 8004b90:	bf00      	nop
 8004b92:	9004      	str	r0, [sp, #16]
 8004b94:	9b04      	ldr	r3, [sp, #16]
 8004b96:	3301      	adds	r3, #1
 8004b98:	d1d1      	bne.n	8004b3e <_vfiprintf_r+0x1c6>
 8004b9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b9c:	07db      	lsls	r3, r3, #31
 8004b9e:	d405      	bmi.n	8004bac <_vfiprintf_r+0x234>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	059b      	lsls	r3, r3, #22
 8004ba4:	d402      	bmi.n	8004bac <_vfiprintf_r+0x234>
 8004ba6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ba8:	f000 fc5a 	bl	8005460 <__retarget_lock_release_recursive>
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	065b      	lsls	r3, r3, #25
 8004bb0:	d500      	bpl.n	8004bb4 <_vfiprintf_r+0x23c>
 8004bb2:	e70a      	b.n	80049ca <_vfiprintf_r+0x52>
 8004bb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004bb6:	e70a      	b.n	80049ce <_vfiprintf_r+0x56>
 8004bb8:	ab07      	add	r3, sp, #28
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	0022      	movs	r2, r4
 8004bbe:	0029      	movs	r1, r5
 8004bc0:	0030      	movs	r0, r6
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <_vfiprintf_r+0x270>)
 8004bc4:	f000 f882 	bl	8004ccc <_printf_i>
 8004bc8:	e7e3      	b.n	8004b92 <_vfiprintf_r+0x21a>
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	08005ba8 	.word	0x08005ba8
 8004bd0:	08005bc8 	.word	0x08005bc8
 8004bd4:	08005b88 	.word	0x08005b88
 8004bd8:	08005b54 	.word	0x08005b54
 8004bdc:	08005b5a 	.word	0x08005b5a
 8004be0:	08005b5e 	.word	0x08005b5e
 8004be4:	00000000 	.word	0x00000000
 8004be8:	08004953 	.word	0x08004953

08004bec <_printf_common>:
 8004bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bee:	0015      	movs	r5, r2
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	688a      	ldr	r2, [r1, #8]
 8004bf4:	690b      	ldr	r3, [r1, #16]
 8004bf6:	000c      	movs	r4, r1
 8004bf8:	9000      	str	r0, [sp, #0]
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	da00      	bge.n	8004c00 <_printf_common+0x14>
 8004bfe:	0013      	movs	r3, r2
 8004c00:	0022      	movs	r2, r4
 8004c02:	602b      	str	r3, [r5, #0]
 8004c04:	3243      	adds	r2, #67	; 0x43
 8004c06:	7812      	ldrb	r2, [r2, #0]
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	d001      	beq.n	8004c10 <_printf_common+0x24>
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	602b      	str	r3, [r5, #0]
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	069b      	lsls	r3, r3, #26
 8004c14:	d502      	bpl.n	8004c1c <_printf_common+0x30>
 8004c16:	682b      	ldr	r3, [r5, #0]
 8004c18:	3302      	adds	r3, #2
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	6822      	ldr	r2, [r4, #0]
 8004c1e:	2306      	movs	r3, #6
 8004c20:	0017      	movs	r7, r2
 8004c22:	401f      	ands	r7, r3
 8004c24:	421a      	tst	r2, r3
 8004c26:	d027      	beq.n	8004c78 <_printf_common+0x8c>
 8004c28:	0023      	movs	r3, r4
 8004c2a:	3343      	adds	r3, #67	; 0x43
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	1e5a      	subs	r2, r3, #1
 8004c30:	4193      	sbcs	r3, r2
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	0692      	lsls	r2, r2, #26
 8004c36:	d430      	bmi.n	8004c9a <_printf_common+0xae>
 8004c38:	0022      	movs	r2, r4
 8004c3a:	9901      	ldr	r1, [sp, #4]
 8004c3c:	9800      	ldr	r0, [sp, #0]
 8004c3e:	9e08      	ldr	r6, [sp, #32]
 8004c40:	3243      	adds	r2, #67	; 0x43
 8004c42:	47b0      	blx	r6
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d025      	beq.n	8004c94 <_printf_common+0xa8>
 8004c48:	2306      	movs	r3, #6
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	682a      	ldr	r2, [r5, #0]
 8004c4e:	68e1      	ldr	r1, [r4, #12]
 8004c50:	2500      	movs	r5, #0
 8004c52:	4003      	ands	r3, r0
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d103      	bne.n	8004c60 <_printf_common+0x74>
 8004c58:	1a8d      	subs	r5, r1, r2
 8004c5a:	43eb      	mvns	r3, r5
 8004c5c:	17db      	asrs	r3, r3, #31
 8004c5e:	401d      	ands	r5, r3
 8004c60:	68a3      	ldr	r3, [r4, #8]
 8004c62:	6922      	ldr	r2, [r4, #16]
 8004c64:	4293      	cmp	r3, r2
 8004c66:	dd01      	ble.n	8004c6c <_printf_common+0x80>
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	18ed      	adds	r5, r5, r3
 8004c6c:	2700      	movs	r7, #0
 8004c6e:	42bd      	cmp	r5, r7
 8004c70:	d120      	bne.n	8004cb4 <_printf_common+0xc8>
 8004c72:	2000      	movs	r0, #0
 8004c74:	e010      	b.n	8004c98 <_printf_common+0xac>
 8004c76:	3701      	adds	r7, #1
 8004c78:	68e3      	ldr	r3, [r4, #12]
 8004c7a:	682a      	ldr	r2, [r5, #0]
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	42bb      	cmp	r3, r7
 8004c80:	ddd2      	ble.n	8004c28 <_printf_common+0x3c>
 8004c82:	0022      	movs	r2, r4
 8004c84:	2301      	movs	r3, #1
 8004c86:	9901      	ldr	r1, [sp, #4]
 8004c88:	9800      	ldr	r0, [sp, #0]
 8004c8a:	9e08      	ldr	r6, [sp, #32]
 8004c8c:	3219      	adds	r2, #25
 8004c8e:	47b0      	blx	r6
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d1f0      	bne.n	8004c76 <_printf_common+0x8a>
 8004c94:	2001      	movs	r0, #1
 8004c96:	4240      	negs	r0, r0
 8004c98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c9a:	2030      	movs	r0, #48	; 0x30
 8004c9c:	18e1      	adds	r1, r4, r3
 8004c9e:	3143      	adds	r1, #67	; 0x43
 8004ca0:	7008      	strb	r0, [r1, #0]
 8004ca2:	0021      	movs	r1, r4
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	3145      	adds	r1, #69	; 0x45
 8004ca8:	7809      	ldrb	r1, [r1, #0]
 8004caa:	18a2      	adds	r2, r4, r2
 8004cac:	3243      	adds	r2, #67	; 0x43
 8004cae:	3302      	adds	r3, #2
 8004cb0:	7011      	strb	r1, [r2, #0]
 8004cb2:	e7c1      	b.n	8004c38 <_printf_common+0x4c>
 8004cb4:	0022      	movs	r2, r4
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	9901      	ldr	r1, [sp, #4]
 8004cba:	9800      	ldr	r0, [sp, #0]
 8004cbc:	9e08      	ldr	r6, [sp, #32]
 8004cbe:	321a      	adds	r2, #26
 8004cc0:	47b0      	blx	r6
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	d0e6      	beq.n	8004c94 <_printf_common+0xa8>
 8004cc6:	3701      	adds	r7, #1
 8004cc8:	e7d1      	b.n	8004c6e <_printf_common+0x82>
	...

08004ccc <_printf_i>:
 8004ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cce:	b08b      	sub	sp, #44	; 0x2c
 8004cd0:	9206      	str	r2, [sp, #24]
 8004cd2:	000a      	movs	r2, r1
 8004cd4:	3243      	adds	r2, #67	; 0x43
 8004cd6:	9307      	str	r3, [sp, #28]
 8004cd8:	9005      	str	r0, [sp, #20]
 8004cda:	9204      	str	r2, [sp, #16]
 8004cdc:	7e0a      	ldrb	r2, [r1, #24]
 8004cde:	000c      	movs	r4, r1
 8004ce0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ce2:	2a78      	cmp	r2, #120	; 0x78
 8004ce4:	d807      	bhi.n	8004cf6 <_printf_i+0x2a>
 8004ce6:	2a62      	cmp	r2, #98	; 0x62
 8004ce8:	d809      	bhi.n	8004cfe <_printf_i+0x32>
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d100      	bne.n	8004cf0 <_printf_i+0x24>
 8004cee:	e0c1      	b.n	8004e74 <_printf_i+0x1a8>
 8004cf0:	2a58      	cmp	r2, #88	; 0x58
 8004cf2:	d100      	bne.n	8004cf6 <_printf_i+0x2a>
 8004cf4:	e08c      	b.n	8004e10 <_printf_i+0x144>
 8004cf6:	0026      	movs	r6, r4
 8004cf8:	3642      	adds	r6, #66	; 0x42
 8004cfa:	7032      	strb	r2, [r6, #0]
 8004cfc:	e022      	b.n	8004d44 <_printf_i+0x78>
 8004cfe:	0010      	movs	r0, r2
 8004d00:	3863      	subs	r0, #99	; 0x63
 8004d02:	2815      	cmp	r0, #21
 8004d04:	d8f7      	bhi.n	8004cf6 <_printf_i+0x2a>
 8004d06:	f7fb fa05 	bl	8000114 <__gnu_thumb1_case_shi>
 8004d0a:	0016      	.short	0x0016
 8004d0c:	fff6001f 	.word	0xfff6001f
 8004d10:	fff6fff6 	.word	0xfff6fff6
 8004d14:	001ffff6 	.word	0x001ffff6
 8004d18:	fff6fff6 	.word	0xfff6fff6
 8004d1c:	fff6fff6 	.word	0xfff6fff6
 8004d20:	003600a8 	.word	0x003600a8
 8004d24:	fff6009a 	.word	0xfff6009a
 8004d28:	00b9fff6 	.word	0x00b9fff6
 8004d2c:	0036fff6 	.word	0x0036fff6
 8004d30:	fff6fff6 	.word	0xfff6fff6
 8004d34:	009e      	.short	0x009e
 8004d36:	0026      	movs	r6, r4
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	3642      	adds	r6, #66	; 0x42
 8004d3c:	1d11      	adds	r1, r2, #4
 8004d3e:	6019      	str	r1, [r3, #0]
 8004d40:	6813      	ldr	r3, [r2, #0]
 8004d42:	7033      	strb	r3, [r6, #0]
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0a7      	b.n	8004e98 <_printf_i+0x1cc>
 8004d48:	6808      	ldr	r0, [r1, #0]
 8004d4a:	6819      	ldr	r1, [r3, #0]
 8004d4c:	1d0a      	adds	r2, r1, #4
 8004d4e:	0605      	lsls	r5, r0, #24
 8004d50:	d50b      	bpl.n	8004d6a <_printf_i+0x9e>
 8004d52:	680d      	ldr	r5, [r1, #0]
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	da03      	bge.n	8004d62 <_printf_i+0x96>
 8004d5a:	232d      	movs	r3, #45	; 0x2d
 8004d5c:	9a04      	ldr	r2, [sp, #16]
 8004d5e:	426d      	negs	r5, r5
 8004d60:	7013      	strb	r3, [r2, #0]
 8004d62:	4b61      	ldr	r3, [pc, #388]	; (8004ee8 <_printf_i+0x21c>)
 8004d64:	270a      	movs	r7, #10
 8004d66:	9303      	str	r3, [sp, #12]
 8004d68:	e01b      	b.n	8004da2 <_printf_i+0xd6>
 8004d6a:	680d      	ldr	r5, [r1, #0]
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	0641      	lsls	r1, r0, #25
 8004d70:	d5f1      	bpl.n	8004d56 <_printf_i+0x8a>
 8004d72:	b22d      	sxth	r5, r5
 8004d74:	e7ef      	b.n	8004d56 <_printf_i+0x8a>
 8004d76:	680d      	ldr	r5, [r1, #0]
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	1d08      	adds	r0, r1, #4
 8004d7c:	6018      	str	r0, [r3, #0]
 8004d7e:	062e      	lsls	r6, r5, #24
 8004d80:	d501      	bpl.n	8004d86 <_printf_i+0xba>
 8004d82:	680d      	ldr	r5, [r1, #0]
 8004d84:	e003      	b.n	8004d8e <_printf_i+0xc2>
 8004d86:	066d      	lsls	r5, r5, #25
 8004d88:	d5fb      	bpl.n	8004d82 <_printf_i+0xb6>
 8004d8a:	680d      	ldr	r5, [r1, #0]
 8004d8c:	b2ad      	uxth	r5, r5
 8004d8e:	4b56      	ldr	r3, [pc, #344]	; (8004ee8 <_printf_i+0x21c>)
 8004d90:	2708      	movs	r7, #8
 8004d92:	9303      	str	r3, [sp, #12]
 8004d94:	2a6f      	cmp	r2, #111	; 0x6f
 8004d96:	d000      	beq.n	8004d9a <_printf_i+0xce>
 8004d98:	3702      	adds	r7, #2
 8004d9a:	0023      	movs	r3, r4
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	3343      	adds	r3, #67	; 0x43
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	6863      	ldr	r3, [r4, #4]
 8004da4:	60a3      	str	r3, [r4, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	db03      	blt.n	8004db2 <_printf_i+0xe6>
 8004daa:	2204      	movs	r2, #4
 8004dac:	6821      	ldr	r1, [r4, #0]
 8004dae:	4391      	bics	r1, r2
 8004db0:	6021      	str	r1, [r4, #0]
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	d102      	bne.n	8004dbc <_printf_i+0xf0>
 8004db6:	9e04      	ldr	r6, [sp, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00c      	beq.n	8004dd6 <_printf_i+0x10a>
 8004dbc:	9e04      	ldr	r6, [sp, #16]
 8004dbe:	0028      	movs	r0, r5
 8004dc0:	0039      	movs	r1, r7
 8004dc2:	f7fb fa37 	bl	8000234 <__aeabi_uidivmod>
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	3e01      	subs	r6, #1
 8004dca:	5c5b      	ldrb	r3, [r3, r1]
 8004dcc:	7033      	strb	r3, [r6, #0]
 8004dce:	002b      	movs	r3, r5
 8004dd0:	0005      	movs	r5, r0
 8004dd2:	429f      	cmp	r7, r3
 8004dd4:	d9f3      	bls.n	8004dbe <_printf_i+0xf2>
 8004dd6:	2f08      	cmp	r7, #8
 8004dd8:	d109      	bne.n	8004dee <_printf_i+0x122>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	07db      	lsls	r3, r3, #31
 8004dde:	d506      	bpl.n	8004dee <_printf_i+0x122>
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	6922      	ldr	r2, [r4, #16]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	dc02      	bgt.n	8004dee <_printf_i+0x122>
 8004de8:	2330      	movs	r3, #48	; 0x30
 8004dea:	3e01      	subs	r6, #1
 8004dec:	7033      	strb	r3, [r6, #0]
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	1b9b      	subs	r3, r3, r6
 8004df2:	6123      	str	r3, [r4, #16]
 8004df4:	9b07      	ldr	r3, [sp, #28]
 8004df6:	0021      	movs	r1, r4
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	9805      	ldr	r0, [sp, #20]
 8004dfc:	9b06      	ldr	r3, [sp, #24]
 8004dfe:	aa09      	add	r2, sp, #36	; 0x24
 8004e00:	f7ff fef4 	bl	8004bec <_printf_common>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d14c      	bne.n	8004ea2 <_printf_i+0x1d6>
 8004e08:	2001      	movs	r0, #1
 8004e0a:	4240      	negs	r0, r0
 8004e0c:	b00b      	add	sp, #44	; 0x2c
 8004e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e10:	3145      	adds	r1, #69	; 0x45
 8004e12:	700a      	strb	r2, [r1, #0]
 8004e14:	4a34      	ldr	r2, [pc, #208]	; (8004ee8 <_printf_i+0x21c>)
 8004e16:	9203      	str	r2, [sp, #12]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	ca20      	ldmia	r2!, {r5}
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	0608      	lsls	r0, r1, #24
 8004e22:	d516      	bpl.n	8004e52 <_printf_i+0x186>
 8004e24:	07cb      	lsls	r3, r1, #31
 8004e26:	d502      	bpl.n	8004e2e <_printf_i+0x162>
 8004e28:	2320      	movs	r3, #32
 8004e2a:	4319      	orrs	r1, r3
 8004e2c:	6021      	str	r1, [r4, #0]
 8004e2e:	2710      	movs	r7, #16
 8004e30:	2d00      	cmp	r5, #0
 8004e32:	d1b2      	bne.n	8004d9a <_printf_i+0xce>
 8004e34:	2320      	movs	r3, #32
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	439a      	bics	r2, r3
 8004e3a:	6022      	str	r2, [r4, #0]
 8004e3c:	e7ad      	b.n	8004d9a <_printf_i+0xce>
 8004e3e:	2220      	movs	r2, #32
 8004e40:	6809      	ldr	r1, [r1, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	6022      	str	r2, [r4, #0]
 8004e46:	0022      	movs	r2, r4
 8004e48:	2178      	movs	r1, #120	; 0x78
 8004e4a:	3245      	adds	r2, #69	; 0x45
 8004e4c:	7011      	strb	r1, [r2, #0]
 8004e4e:	4a27      	ldr	r2, [pc, #156]	; (8004eec <_printf_i+0x220>)
 8004e50:	e7e1      	b.n	8004e16 <_printf_i+0x14a>
 8004e52:	0648      	lsls	r0, r1, #25
 8004e54:	d5e6      	bpl.n	8004e24 <_printf_i+0x158>
 8004e56:	b2ad      	uxth	r5, r5
 8004e58:	e7e4      	b.n	8004e24 <_printf_i+0x158>
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	680d      	ldr	r5, [r1, #0]
 8004e5e:	1d10      	adds	r0, r2, #4
 8004e60:	6949      	ldr	r1, [r1, #20]
 8004e62:	6018      	str	r0, [r3, #0]
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	062e      	lsls	r6, r5, #24
 8004e68:	d501      	bpl.n	8004e6e <_printf_i+0x1a2>
 8004e6a:	6019      	str	r1, [r3, #0]
 8004e6c:	e002      	b.n	8004e74 <_printf_i+0x1a8>
 8004e6e:	066d      	lsls	r5, r5, #25
 8004e70:	d5fb      	bpl.n	8004e6a <_printf_i+0x19e>
 8004e72:	8019      	strh	r1, [r3, #0]
 8004e74:	2300      	movs	r3, #0
 8004e76:	9e04      	ldr	r6, [sp, #16]
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	e7bb      	b.n	8004df4 <_printf_i+0x128>
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	1d11      	adds	r1, r2, #4
 8004e80:	6019      	str	r1, [r3, #0]
 8004e82:	6816      	ldr	r6, [r2, #0]
 8004e84:	2100      	movs	r1, #0
 8004e86:	0030      	movs	r0, r6
 8004e88:	6862      	ldr	r2, [r4, #4]
 8004e8a:	f000 fb57 	bl	800553c <memchr>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d001      	beq.n	8004e96 <_printf_i+0x1ca>
 8004e92:	1b80      	subs	r0, r0, r6
 8004e94:	6060      	str	r0, [r4, #4]
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	6123      	str	r3, [r4, #16]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9a04      	ldr	r2, [sp, #16]
 8004e9e:	7013      	strb	r3, [r2, #0]
 8004ea0:	e7a8      	b.n	8004df4 <_printf_i+0x128>
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	0032      	movs	r2, r6
 8004ea6:	9906      	ldr	r1, [sp, #24]
 8004ea8:	9805      	ldr	r0, [sp, #20]
 8004eaa:	9d07      	ldr	r5, [sp, #28]
 8004eac:	47a8      	blx	r5
 8004eae:	1c43      	adds	r3, r0, #1
 8004eb0:	d0aa      	beq.n	8004e08 <_printf_i+0x13c>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	079b      	lsls	r3, r3, #30
 8004eb6:	d415      	bmi.n	8004ee4 <_printf_i+0x218>
 8004eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eba:	68e0      	ldr	r0, [r4, #12]
 8004ebc:	4298      	cmp	r0, r3
 8004ebe:	daa5      	bge.n	8004e0c <_printf_i+0x140>
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	e7a3      	b.n	8004e0c <_printf_i+0x140>
 8004ec4:	0022      	movs	r2, r4
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	9906      	ldr	r1, [sp, #24]
 8004eca:	9805      	ldr	r0, [sp, #20]
 8004ecc:	9e07      	ldr	r6, [sp, #28]
 8004ece:	3219      	adds	r2, #25
 8004ed0:	47b0      	blx	r6
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	d098      	beq.n	8004e08 <_printf_i+0x13c>
 8004ed6:	3501      	adds	r5, #1
 8004ed8:	68e3      	ldr	r3, [r4, #12]
 8004eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	42ab      	cmp	r3, r5
 8004ee0:	dcf0      	bgt.n	8004ec4 <_printf_i+0x1f8>
 8004ee2:	e7e9      	b.n	8004eb8 <_printf_i+0x1ec>
 8004ee4:	2500      	movs	r5, #0
 8004ee6:	e7f7      	b.n	8004ed8 <_printf_i+0x20c>
 8004ee8:	08005b65 	.word	0x08005b65
 8004eec:	08005b76 	.word	0x08005b76

08004ef0 <_sbrk_r>:
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	b570      	push	{r4, r5, r6, lr}
 8004ef4:	4d06      	ldr	r5, [pc, #24]	; (8004f10 <_sbrk_r+0x20>)
 8004ef6:	0004      	movs	r4, r0
 8004ef8:	0008      	movs	r0, r1
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	f7fc fa46 	bl	800138c <_sbrk>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d103      	bne.n	8004f0c <_sbrk_r+0x1c>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d000      	beq.n	8004f0c <_sbrk_r+0x1c>
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	200004dc 	.word	0x200004dc

08004f14 <__swbuf_r>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	0005      	movs	r5, r0
 8004f18:	000e      	movs	r6, r1
 8004f1a:	0014      	movs	r4, r2
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d004      	beq.n	8004f2a <__swbuf_r+0x16>
 8004f20:	6983      	ldr	r3, [r0, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <__swbuf_r+0x16>
 8004f26:	f000 f9f9 	bl	800531c <__sinit>
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <__swbuf_r+0xa0>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	d12e      	bne.n	8004f8e <__swbuf_r+0x7a>
 8004f30:	686c      	ldr	r4, [r5, #4]
 8004f32:	69a3      	ldr	r3, [r4, #24]
 8004f34:	60a3      	str	r3, [r4, #8]
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	071b      	lsls	r3, r3, #28
 8004f3a:	d532      	bpl.n	8004fa2 <__swbuf_r+0x8e>
 8004f3c:	6923      	ldr	r3, [r4, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d02f      	beq.n	8004fa2 <__swbuf_r+0x8e>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	6922      	ldr	r2, [r4, #16]
 8004f46:	b2f7      	uxtb	r7, r6
 8004f48:	1a98      	subs	r0, r3, r2
 8004f4a:	6963      	ldr	r3, [r4, #20]
 8004f4c:	b2f6      	uxtb	r6, r6
 8004f4e:	4283      	cmp	r3, r0
 8004f50:	dc05      	bgt.n	8004f5e <__swbuf_r+0x4a>
 8004f52:	0021      	movs	r1, r4
 8004f54:	0028      	movs	r0, r5
 8004f56:	f000 f93f 	bl	80051d8 <_fflush_r>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d127      	bne.n	8004fae <__swbuf_r+0x9a>
 8004f5e:	68a3      	ldr	r3, [r4, #8]
 8004f60:	3001      	adds	r0, #1
 8004f62:	3b01      	subs	r3, #1
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	6022      	str	r2, [r4, #0]
 8004f6c:	701f      	strb	r7, [r3, #0]
 8004f6e:	6963      	ldr	r3, [r4, #20]
 8004f70:	4283      	cmp	r3, r0
 8004f72:	d004      	beq.n	8004f7e <__swbuf_r+0x6a>
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	07db      	lsls	r3, r3, #31
 8004f78:	d507      	bpl.n	8004f8a <__swbuf_r+0x76>
 8004f7a:	2e0a      	cmp	r6, #10
 8004f7c:	d105      	bne.n	8004f8a <__swbuf_r+0x76>
 8004f7e:	0021      	movs	r1, r4
 8004f80:	0028      	movs	r0, r5
 8004f82:	f000 f929 	bl	80051d8 <_fflush_r>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d111      	bne.n	8004fae <__swbuf_r+0x9a>
 8004f8a:	0030      	movs	r0, r6
 8004f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <__swbuf_r+0xa4>)
 8004f90:	429c      	cmp	r4, r3
 8004f92:	d101      	bne.n	8004f98 <__swbuf_r+0x84>
 8004f94:	68ac      	ldr	r4, [r5, #8]
 8004f96:	e7cc      	b.n	8004f32 <__swbuf_r+0x1e>
 8004f98:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <__swbuf_r+0xa8>)
 8004f9a:	429c      	cmp	r4, r3
 8004f9c:	d1c9      	bne.n	8004f32 <__swbuf_r+0x1e>
 8004f9e:	68ec      	ldr	r4, [r5, #12]
 8004fa0:	e7c7      	b.n	8004f32 <__swbuf_r+0x1e>
 8004fa2:	0021      	movs	r1, r4
 8004fa4:	0028      	movs	r0, r5
 8004fa6:	f000 f80b 	bl	8004fc0 <__swsetup_r>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d0c9      	beq.n	8004f42 <__swbuf_r+0x2e>
 8004fae:	2601      	movs	r6, #1
 8004fb0:	4276      	negs	r6, r6
 8004fb2:	e7ea      	b.n	8004f8a <__swbuf_r+0x76>
 8004fb4:	08005ba8 	.word	0x08005ba8
 8004fb8:	08005bc8 	.word	0x08005bc8
 8004fbc:	08005b88 	.word	0x08005b88

08004fc0 <__swsetup_r>:
 8004fc0:	4b37      	ldr	r3, [pc, #220]	; (80050a0 <__swsetup_r+0xe0>)
 8004fc2:	b570      	push	{r4, r5, r6, lr}
 8004fc4:	681d      	ldr	r5, [r3, #0]
 8004fc6:	0006      	movs	r6, r0
 8004fc8:	000c      	movs	r4, r1
 8004fca:	2d00      	cmp	r5, #0
 8004fcc:	d005      	beq.n	8004fda <__swsetup_r+0x1a>
 8004fce:	69ab      	ldr	r3, [r5, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <__swsetup_r+0x1a>
 8004fd4:	0028      	movs	r0, r5
 8004fd6:	f000 f9a1 	bl	800531c <__sinit>
 8004fda:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <__swsetup_r+0xe4>)
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	d10f      	bne.n	8005000 <__swsetup_r+0x40>
 8004fe0:	686c      	ldr	r4, [r5, #4]
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	5ee2      	ldrsh	r2, [r4, r3]
 8004fe6:	b293      	uxth	r3, r2
 8004fe8:	0711      	lsls	r1, r2, #28
 8004fea:	d42d      	bmi.n	8005048 <__swsetup_r+0x88>
 8004fec:	06d9      	lsls	r1, r3, #27
 8004fee:	d411      	bmi.n	8005014 <__swsetup_r+0x54>
 8004ff0:	2309      	movs	r3, #9
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	6033      	str	r3, [r6, #0]
 8004ff6:	3337      	adds	r3, #55	; 0x37
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	4240      	negs	r0, r0
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <__swsetup_r+0xe8>)
 8005002:	429c      	cmp	r4, r3
 8005004:	d101      	bne.n	800500a <__swsetup_r+0x4a>
 8005006:	68ac      	ldr	r4, [r5, #8]
 8005008:	e7eb      	b.n	8004fe2 <__swsetup_r+0x22>
 800500a:	4b28      	ldr	r3, [pc, #160]	; (80050ac <__swsetup_r+0xec>)
 800500c:	429c      	cmp	r4, r3
 800500e:	d1e8      	bne.n	8004fe2 <__swsetup_r+0x22>
 8005010:	68ec      	ldr	r4, [r5, #12]
 8005012:	e7e6      	b.n	8004fe2 <__swsetup_r+0x22>
 8005014:	075b      	lsls	r3, r3, #29
 8005016:	d513      	bpl.n	8005040 <__swsetup_r+0x80>
 8005018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800501a:	2900      	cmp	r1, #0
 800501c:	d008      	beq.n	8005030 <__swsetup_r+0x70>
 800501e:	0023      	movs	r3, r4
 8005020:	3344      	adds	r3, #68	; 0x44
 8005022:	4299      	cmp	r1, r3
 8005024:	d002      	beq.n	800502c <__swsetup_r+0x6c>
 8005026:	0030      	movs	r0, r6
 8005028:	f7ff fa3a 	bl	80044a0 <_free_r>
 800502c:	2300      	movs	r3, #0
 800502e:	6363      	str	r3, [r4, #52]	; 0x34
 8005030:	2224      	movs	r2, #36	; 0x24
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	4393      	bics	r3, r2
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	2300      	movs	r3, #0
 800503a:	6063      	str	r3, [r4, #4]
 800503c:	6923      	ldr	r3, [r4, #16]
 800503e:	6023      	str	r3, [r4, #0]
 8005040:	2308      	movs	r3, #8
 8005042:	89a2      	ldrh	r2, [r4, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	81a3      	strh	r3, [r4, #12]
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10b      	bne.n	8005066 <__swsetup_r+0xa6>
 800504e:	21a0      	movs	r1, #160	; 0xa0
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	0089      	lsls	r1, r1, #2
 8005056:	0092      	lsls	r2, r2, #2
 8005058:	400b      	ands	r3, r1
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <__swsetup_r+0xa6>
 800505e:	0021      	movs	r1, r4
 8005060:	0030      	movs	r0, r6
 8005062:	f000 fa27 	bl	80054b4 <__smakebuf_r>
 8005066:	220c      	movs	r2, #12
 8005068:	5ea3      	ldrsh	r3, [r4, r2]
 800506a:	2001      	movs	r0, #1
 800506c:	001a      	movs	r2, r3
 800506e:	b299      	uxth	r1, r3
 8005070:	4002      	ands	r2, r0
 8005072:	4203      	tst	r3, r0
 8005074:	d00f      	beq.n	8005096 <__swsetup_r+0xd6>
 8005076:	2200      	movs	r2, #0
 8005078:	60a2      	str	r2, [r4, #8]
 800507a:	6962      	ldr	r2, [r4, #20]
 800507c:	4252      	negs	r2, r2
 800507e:	61a2      	str	r2, [r4, #24]
 8005080:	2000      	movs	r0, #0
 8005082:	6922      	ldr	r2, [r4, #16]
 8005084:	4282      	cmp	r2, r0
 8005086:	d1ba      	bne.n	8004ffe <__swsetup_r+0x3e>
 8005088:	060a      	lsls	r2, r1, #24
 800508a:	d5b8      	bpl.n	8004ffe <__swsetup_r+0x3e>
 800508c:	2240      	movs	r2, #64	; 0x40
 800508e:	4313      	orrs	r3, r2
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	3801      	subs	r0, #1
 8005094:	e7b3      	b.n	8004ffe <__swsetup_r+0x3e>
 8005096:	0788      	lsls	r0, r1, #30
 8005098:	d400      	bmi.n	800509c <__swsetup_r+0xdc>
 800509a:	6962      	ldr	r2, [r4, #20]
 800509c:	60a2      	str	r2, [r4, #8]
 800509e:	e7ef      	b.n	8005080 <__swsetup_r+0xc0>
 80050a0:	2000009c 	.word	0x2000009c
 80050a4:	08005ba8 	.word	0x08005ba8
 80050a8:	08005bc8 	.word	0x08005bc8
 80050ac:	08005b88 	.word	0x08005b88

080050b0 <abort>:
 80050b0:	2006      	movs	r0, #6
 80050b2:	b510      	push	{r4, lr}
 80050b4:	f000 fad4 	bl	8005660 <raise>
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7fc f8f5 	bl	80012a8 <_exit>
	...

080050c0 <__sflush_r>:
 80050c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050c2:	898b      	ldrh	r3, [r1, #12]
 80050c4:	0005      	movs	r5, r0
 80050c6:	000c      	movs	r4, r1
 80050c8:	071a      	lsls	r2, r3, #28
 80050ca:	d45f      	bmi.n	800518c <__sflush_r+0xcc>
 80050cc:	684a      	ldr	r2, [r1, #4]
 80050ce:	2a00      	cmp	r2, #0
 80050d0:	dc04      	bgt.n	80050dc <__sflush_r+0x1c>
 80050d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	dc01      	bgt.n	80050dc <__sflush_r+0x1c>
 80050d8:	2000      	movs	r0, #0
 80050da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80050de:	2f00      	cmp	r7, #0
 80050e0:	d0fa      	beq.n	80050d8 <__sflush_r+0x18>
 80050e2:	2200      	movs	r2, #0
 80050e4:	2180      	movs	r1, #128	; 0x80
 80050e6:	682e      	ldr	r6, [r5, #0]
 80050e8:	602a      	str	r2, [r5, #0]
 80050ea:	001a      	movs	r2, r3
 80050ec:	0149      	lsls	r1, r1, #5
 80050ee:	400a      	ands	r2, r1
 80050f0:	420b      	tst	r3, r1
 80050f2:	d034      	beq.n	800515e <__sflush_r+0x9e>
 80050f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	075b      	lsls	r3, r3, #29
 80050fa:	d506      	bpl.n	800510a <__sflush_r+0x4a>
 80050fc:	6863      	ldr	r3, [r4, #4]
 80050fe:	1ac0      	subs	r0, r0, r3
 8005100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <__sflush_r+0x4a>
 8005106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005108:	1ac0      	subs	r0, r0, r3
 800510a:	0002      	movs	r2, r0
 800510c:	6a21      	ldr	r1, [r4, #32]
 800510e:	2300      	movs	r3, #0
 8005110:	0028      	movs	r0, r5
 8005112:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005114:	47b8      	blx	r7
 8005116:	89a1      	ldrh	r1, [r4, #12]
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d106      	bne.n	800512a <__sflush_r+0x6a>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	2b1d      	cmp	r3, #29
 8005120:	d831      	bhi.n	8005186 <__sflush_r+0xc6>
 8005122:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <__sflush_r+0x114>)
 8005124:	40da      	lsrs	r2, r3
 8005126:	07d3      	lsls	r3, r2, #31
 8005128:	d52d      	bpl.n	8005186 <__sflush_r+0xc6>
 800512a:	2300      	movs	r3, #0
 800512c:	6063      	str	r3, [r4, #4]
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	04cb      	lsls	r3, r1, #19
 8005134:	d505      	bpl.n	8005142 <__sflush_r+0x82>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	d102      	bne.n	8005140 <__sflush_r+0x80>
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d100      	bne.n	8005142 <__sflush_r+0x82>
 8005140:	6560      	str	r0, [r4, #84]	; 0x54
 8005142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005144:	602e      	str	r6, [r5, #0]
 8005146:	2900      	cmp	r1, #0
 8005148:	d0c6      	beq.n	80050d8 <__sflush_r+0x18>
 800514a:	0023      	movs	r3, r4
 800514c:	3344      	adds	r3, #68	; 0x44
 800514e:	4299      	cmp	r1, r3
 8005150:	d002      	beq.n	8005158 <__sflush_r+0x98>
 8005152:	0028      	movs	r0, r5
 8005154:	f7ff f9a4 	bl	80044a0 <_free_r>
 8005158:	2000      	movs	r0, #0
 800515a:	6360      	str	r0, [r4, #52]	; 0x34
 800515c:	e7bd      	b.n	80050da <__sflush_r+0x1a>
 800515e:	2301      	movs	r3, #1
 8005160:	0028      	movs	r0, r5
 8005162:	6a21      	ldr	r1, [r4, #32]
 8005164:	47b8      	blx	r7
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d1c5      	bne.n	80050f6 <__sflush_r+0x36>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0c2      	beq.n	80050f6 <__sflush_r+0x36>
 8005170:	2b1d      	cmp	r3, #29
 8005172:	d001      	beq.n	8005178 <__sflush_r+0xb8>
 8005174:	2b16      	cmp	r3, #22
 8005176:	d101      	bne.n	800517c <__sflush_r+0xbc>
 8005178:	602e      	str	r6, [r5, #0]
 800517a:	e7ad      	b.n	80050d8 <__sflush_r+0x18>
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	89a2      	ldrh	r2, [r4, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	e7a9      	b.n	80050da <__sflush_r+0x1a>
 8005186:	2340      	movs	r3, #64	; 0x40
 8005188:	430b      	orrs	r3, r1
 800518a:	e7fa      	b.n	8005182 <__sflush_r+0xc2>
 800518c:	690f      	ldr	r7, [r1, #16]
 800518e:	2f00      	cmp	r7, #0
 8005190:	d0a2      	beq.n	80050d8 <__sflush_r+0x18>
 8005192:	680a      	ldr	r2, [r1, #0]
 8005194:	600f      	str	r7, [r1, #0]
 8005196:	1bd2      	subs	r2, r2, r7
 8005198:	9201      	str	r2, [sp, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	079b      	lsls	r3, r3, #30
 800519e:	d100      	bne.n	80051a2 <__sflush_r+0xe2>
 80051a0:	694a      	ldr	r2, [r1, #20]
 80051a2:	60a2      	str	r2, [r4, #8]
 80051a4:	9b01      	ldr	r3, [sp, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dc00      	bgt.n	80051ac <__sflush_r+0xec>
 80051aa:	e795      	b.n	80050d8 <__sflush_r+0x18>
 80051ac:	003a      	movs	r2, r7
 80051ae:	0028      	movs	r0, r5
 80051b0:	9b01      	ldr	r3, [sp, #4]
 80051b2:	6a21      	ldr	r1, [r4, #32]
 80051b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051b6:	47b0      	blx	r6
 80051b8:	2800      	cmp	r0, #0
 80051ba:	dc06      	bgt.n	80051ca <__sflush_r+0x10a>
 80051bc:	2340      	movs	r3, #64	; 0x40
 80051be:	2001      	movs	r0, #1
 80051c0:	89a2      	ldrh	r2, [r4, #12]
 80051c2:	4240      	negs	r0, r0
 80051c4:	4313      	orrs	r3, r2
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	e787      	b.n	80050da <__sflush_r+0x1a>
 80051ca:	9b01      	ldr	r3, [sp, #4]
 80051cc:	183f      	adds	r7, r7, r0
 80051ce:	1a1b      	subs	r3, r3, r0
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	e7e7      	b.n	80051a4 <__sflush_r+0xe4>
 80051d4:	20400001 	.word	0x20400001

080051d8 <_fflush_r>:
 80051d8:	690b      	ldr	r3, [r1, #16]
 80051da:	b570      	push	{r4, r5, r6, lr}
 80051dc:	0005      	movs	r5, r0
 80051de:	000c      	movs	r4, r1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <_fflush_r+0x12>
 80051e4:	2500      	movs	r5, #0
 80051e6:	0028      	movs	r0, r5
 80051e8:	bd70      	pop	{r4, r5, r6, pc}
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d004      	beq.n	80051f8 <_fflush_r+0x20>
 80051ee:	6983      	ldr	r3, [r0, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <_fflush_r+0x20>
 80051f4:	f000 f892 	bl	800531c <__sinit>
 80051f8:	4b14      	ldr	r3, [pc, #80]	; (800524c <_fflush_r+0x74>)
 80051fa:	429c      	cmp	r4, r3
 80051fc:	d11b      	bne.n	8005236 <_fflush_r+0x5e>
 80051fe:	686c      	ldr	r4, [r5, #4]
 8005200:	220c      	movs	r2, #12
 8005202:	5ea3      	ldrsh	r3, [r4, r2]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0ed      	beq.n	80051e4 <_fflush_r+0xc>
 8005208:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800520a:	07d2      	lsls	r2, r2, #31
 800520c:	d404      	bmi.n	8005218 <_fflush_r+0x40>
 800520e:	059b      	lsls	r3, r3, #22
 8005210:	d402      	bmi.n	8005218 <_fflush_r+0x40>
 8005212:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005214:	f000 f923 	bl	800545e <__retarget_lock_acquire_recursive>
 8005218:	0028      	movs	r0, r5
 800521a:	0021      	movs	r1, r4
 800521c:	f7ff ff50 	bl	80050c0 <__sflush_r>
 8005220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005222:	0005      	movs	r5, r0
 8005224:	07db      	lsls	r3, r3, #31
 8005226:	d4de      	bmi.n	80051e6 <_fflush_r+0xe>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	059b      	lsls	r3, r3, #22
 800522c:	d4db      	bmi.n	80051e6 <_fflush_r+0xe>
 800522e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005230:	f000 f916 	bl	8005460 <__retarget_lock_release_recursive>
 8005234:	e7d7      	b.n	80051e6 <_fflush_r+0xe>
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <_fflush_r+0x78>)
 8005238:	429c      	cmp	r4, r3
 800523a:	d101      	bne.n	8005240 <_fflush_r+0x68>
 800523c:	68ac      	ldr	r4, [r5, #8]
 800523e:	e7df      	b.n	8005200 <_fflush_r+0x28>
 8005240:	4b04      	ldr	r3, [pc, #16]	; (8005254 <_fflush_r+0x7c>)
 8005242:	429c      	cmp	r4, r3
 8005244:	d1dc      	bne.n	8005200 <_fflush_r+0x28>
 8005246:	68ec      	ldr	r4, [r5, #12]
 8005248:	e7da      	b.n	8005200 <_fflush_r+0x28>
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	08005ba8 	.word	0x08005ba8
 8005250:	08005bc8 	.word	0x08005bc8
 8005254:	08005b88 	.word	0x08005b88

08005258 <std>:
 8005258:	2300      	movs	r3, #0
 800525a:	b510      	push	{r4, lr}
 800525c:	0004      	movs	r4, r0
 800525e:	6003      	str	r3, [r0, #0]
 8005260:	6043      	str	r3, [r0, #4]
 8005262:	6083      	str	r3, [r0, #8]
 8005264:	8181      	strh	r1, [r0, #12]
 8005266:	6643      	str	r3, [r0, #100]	; 0x64
 8005268:	0019      	movs	r1, r3
 800526a:	81c2      	strh	r2, [r0, #14]
 800526c:	6103      	str	r3, [r0, #16]
 800526e:	6143      	str	r3, [r0, #20]
 8005270:	6183      	str	r3, [r0, #24]
 8005272:	2208      	movs	r2, #8
 8005274:	305c      	adds	r0, #92	; 0x5c
 8005276:	f7ff f809 	bl	800428c <memset>
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <std+0x38>)
 800527c:	6224      	str	r4, [r4, #32]
 800527e:	6263      	str	r3, [r4, #36]	; 0x24
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <std+0x3c>)
 8005282:	62a3      	str	r3, [r4, #40]	; 0x28
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <std+0x40>)
 8005286:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <std+0x44>)
 800528a:	6323      	str	r3, [r4, #48]	; 0x30
 800528c:	bd10      	pop	{r4, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	080056a1 	.word	0x080056a1
 8005294:	080056c9 	.word	0x080056c9
 8005298:	08005701 	.word	0x08005701
 800529c:	0800572d 	.word	0x0800572d

080052a0 <_cleanup_r>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	4902      	ldr	r1, [pc, #8]	; (80052ac <_cleanup_r+0xc>)
 80052a4:	f000 f8ba 	bl	800541c <_fwalk_reent>
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	080051d9 	.word	0x080051d9

080052b0 <__sfmoreglue>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	2568      	movs	r5, #104	; 0x68
 80052b4:	1e4a      	subs	r2, r1, #1
 80052b6:	4355      	muls	r5, r2
 80052b8:	000e      	movs	r6, r1
 80052ba:	0029      	movs	r1, r5
 80052bc:	3174      	adds	r1, #116	; 0x74
 80052be:	f7ff f95b 	bl	8004578 <_malloc_r>
 80052c2:	1e04      	subs	r4, r0, #0
 80052c4:	d008      	beq.n	80052d8 <__sfmoreglue+0x28>
 80052c6:	2100      	movs	r1, #0
 80052c8:	002a      	movs	r2, r5
 80052ca:	6001      	str	r1, [r0, #0]
 80052cc:	6046      	str	r6, [r0, #4]
 80052ce:	300c      	adds	r0, #12
 80052d0:	60a0      	str	r0, [r4, #8]
 80052d2:	3268      	adds	r2, #104	; 0x68
 80052d4:	f7fe ffda 	bl	800428c <memset>
 80052d8:	0020      	movs	r0, r4
 80052da:	bd70      	pop	{r4, r5, r6, pc}

080052dc <__sfp_lock_acquire>:
 80052dc:	b510      	push	{r4, lr}
 80052de:	4802      	ldr	r0, [pc, #8]	; (80052e8 <__sfp_lock_acquire+0xc>)
 80052e0:	f000 f8bd 	bl	800545e <__retarget_lock_acquire_recursive>
 80052e4:	bd10      	pop	{r4, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	200004d9 	.word	0x200004d9

080052ec <__sfp_lock_release>:
 80052ec:	b510      	push	{r4, lr}
 80052ee:	4802      	ldr	r0, [pc, #8]	; (80052f8 <__sfp_lock_release+0xc>)
 80052f0:	f000 f8b6 	bl	8005460 <__retarget_lock_release_recursive>
 80052f4:	bd10      	pop	{r4, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	200004d9 	.word	0x200004d9

080052fc <__sinit_lock_acquire>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4802      	ldr	r0, [pc, #8]	; (8005308 <__sinit_lock_acquire+0xc>)
 8005300:	f000 f8ad 	bl	800545e <__retarget_lock_acquire_recursive>
 8005304:	bd10      	pop	{r4, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	200004da 	.word	0x200004da

0800530c <__sinit_lock_release>:
 800530c:	b510      	push	{r4, lr}
 800530e:	4802      	ldr	r0, [pc, #8]	; (8005318 <__sinit_lock_release+0xc>)
 8005310:	f000 f8a6 	bl	8005460 <__retarget_lock_release_recursive>
 8005314:	bd10      	pop	{r4, pc}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	200004da 	.word	0x200004da

0800531c <__sinit>:
 800531c:	b513      	push	{r0, r1, r4, lr}
 800531e:	0004      	movs	r4, r0
 8005320:	f7ff ffec 	bl	80052fc <__sinit_lock_acquire>
 8005324:	69a3      	ldr	r3, [r4, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <__sinit+0x14>
 800532a:	f7ff ffef 	bl	800530c <__sinit_lock_release>
 800532e:	bd13      	pop	{r0, r1, r4, pc}
 8005330:	64a3      	str	r3, [r4, #72]	; 0x48
 8005332:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005334:	6523      	str	r3, [r4, #80]	; 0x50
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <__sinit+0x68>)
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <__sinit+0x6c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	62a2      	str	r2, [r4, #40]	; 0x28
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	42a3      	cmp	r3, r4
 8005342:	d101      	bne.n	8005348 <__sinit+0x2c>
 8005344:	2301      	movs	r3, #1
 8005346:	61a3      	str	r3, [r4, #24]
 8005348:	0020      	movs	r0, r4
 800534a:	f000 f81f 	bl	800538c <__sfp>
 800534e:	6060      	str	r0, [r4, #4]
 8005350:	0020      	movs	r0, r4
 8005352:	f000 f81b 	bl	800538c <__sfp>
 8005356:	60a0      	str	r0, [r4, #8]
 8005358:	0020      	movs	r0, r4
 800535a:	f000 f817 	bl	800538c <__sfp>
 800535e:	2200      	movs	r2, #0
 8005360:	2104      	movs	r1, #4
 8005362:	60e0      	str	r0, [r4, #12]
 8005364:	6860      	ldr	r0, [r4, #4]
 8005366:	f7ff ff77 	bl	8005258 <std>
 800536a:	2201      	movs	r2, #1
 800536c:	2109      	movs	r1, #9
 800536e:	68a0      	ldr	r0, [r4, #8]
 8005370:	f7ff ff72 	bl	8005258 <std>
 8005374:	2202      	movs	r2, #2
 8005376:	2112      	movs	r1, #18
 8005378:	68e0      	ldr	r0, [r4, #12]
 800537a:	f7ff ff6d 	bl	8005258 <std>
 800537e:	2301      	movs	r3, #1
 8005380:	61a3      	str	r3, [r4, #24]
 8005382:	e7d2      	b.n	800532a <__sinit+0xe>
 8005384:	08005aa0 	.word	0x08005aa0
 8005388:	080052a1 	.word	0x080052a1

0800538c <__sfp>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	0007      	movs	r7, r0
 8005390:	f7ff ffa4 	bl	80052dc <__sfp_lock_acquire>
 8005394:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <__sfp+0x88>)
 8005396:	681e      	ldr	r6, [r3, #0]
 8005398:	69b3      	ldr	r3, [r6, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <__sfp+0x18>
 800539e:	0030      	movs	r0, r6
 80053a0:	f7ff ffbc 	bl	800531c <__sinit>
 80053a4:	3648      	adds	r6, #72	; 0x48
 80053a6:	68b4      	ldr	r4, [r6, #8]
 80053a8:	6873      	ldr	r3, [r6, #4]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	d504      	bpl.n	80053b8 <__sfp+0x2c>
 80053ae:	6833      	ldr	r3, [r6, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d022      	beq.n	80053fa <__sfp+0x6e>
 80053b4:	6836      	ldr	r6, [r6, #0]
 80053b6:	e7f6      	b.n	80053a6 <__sfp+0x1a>
 80053b8:	220c      	movs	r2, #12
 80053ba:	5ea5      	ldrsh	r5, [r4, r2]
 80053bc:	2d00      	cmp	r5, #0
 80053be:	d11a      	bne.n	80053f6 <__sfp+0x6a>
 80053c0:	0020      	movs	r0, r4
 80053c2:	4b15      	ldr	r3, [pc, #84]	; (8005418 <__sfp+0x8c>)
 80053c4:	3058      	adds	r0, #88	; 0x58
 80053c6:	60e3      	str	r3, [r4, #12]
 80053c8:	6665      	str	r5, [r4, #100]	; 0x64
 80053ca:	f000 f847 	bl	800545c <__retarget_lock_init_recursive>
 80053ce:	f7ff ff8d 	bl	80052ec <__sfp_lock_release>
 80053d2:	0020      	movs	r0, r4
 80053d4:	2208      	movs	r2, #8
 80053d6:	0029      	movs	r1, r5
 80053d8:	6025      	str	r5, [r4, #0]
 80053da:	60a5      	str	r5, [r4, #8]
 80053dc:	6065      	str	r5, [r4, #4]
 80053de:	6125      	str	r5, [r4, #16]
 80053e0:	6165      	str	r5, [r4, #20]
 80053e2:	61a5      	str	r5, [r4, #24]
 80053e4:	305c      	adds	r0, #92	; 0x5c
 80053e6:	f7fe ff51 	bl	800428c <memset>
 80053ea:	6365      	str	r5, [r4, #52]	; 0x34
 80053ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80053ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80053f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80053f2:	0020      	movs	r0, r4
 80053f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f6:	3468      	adds	r4, #104	; 0x68
 80053f8:	e7d7      	b.n	80053aa <__sfp+0x1e>
 80053fa:	2104      	movs	r1, #4
 80053fc:	0038      	movs	r0, r7
 80053fe:	f7ff ff57 	bl	80052b0 <__sfmoreglue>
 8005402:	1e04      	subs	r4, r0, #0
 8005404:	6030      	str	r0, [r6, #0]
 8005406:	d1d5      	bne.n	80053b4 <__sfp+0x28>
 8005408:	f7ff ff70 	bl	80052ec <__sfp_lock_release>
 800540c:	230c      	movs	r3, #12
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	e7ef      	b.n	80053f2 <__sfp+0x66>
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	08005aa0 	.word	0x08005aa0
 8005418:	ffff0001 	.word	0xffff0001

0800541c <_fwalk_reent>:
 800541c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800541e:	0004      	movs	r4, r0
 8005420:	0006      	movs	r6, r0
 8005422:	2700      	movs	r7, #0
 8005424:	9101      	str	r1, [sp, #4]
 8005426:	3448      	adds	r4, #72	; 0x48
 8005428:	6863      	ldr	r3, [r4, #4]
 800542a:	68a5      	ldr	r5, [r4, #8]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	9b00      	ldr	r3, [sp, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	d504      	bpl.n	8005440 <_fwalk_reent+0x24>
 8005436:	6824      	ldr	r4, [r4, #0]
 8005438:	2c00      	cmp	r4, #0
 800543a:	d1f5      	bne.n	8005428 <_fwalk_reent+0xc>
 800543c:	0038      	movs	r0, r7
 800543e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005440:	89ab      	ldrh	r3, [r5, #12]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d908      	bls.n	8005458 <_fwalk_reent+0x3c>
 8005446:	220e      	movs	r2, #14
 8005448:	5eab      	ldrsh	r3, [r5, r2]
 800544a:	3301      	adds	r3, #1
 800544c:	d004      	beq.n	8005458 <_fwalk_reent+0x3c>
 800544e:	0029      	movs	r1, r5
 8005450:	0030      	movs	r0, r6
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	4798      	blx	r3
 8005456:	4307      	orrs	r7, r0
 8005458:	3568      	adds	r5, #104	; 0x68
 800545a:	e7e8      	b.n	800542e <_fwalk_reent+0x12>

0800545c <__retarget_lock_init_recursive>:
 800545c:	4770      	bx	lr

0800545e <__retarget_lock_acquire_recursive>:
 800545e:	4770      	bx	lr

08005460 <__retarget_lock_release_recursive>:
 8005460:	4770      	bx	lr
	...

08005464 <__swhatbuf_r>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	000e      	movs	r6, r1
 8005468:	001d      	movs	r5, r3
 800546a:	230e      	movs	r3, #14
 800546c:	5ec9      	ldrsh	r1, [r1, r3]
 800546e:	0014      	movs	r4, r2
 8005470:	b096      	sub	sp, #88	; 0x58
 8005472:	2900      	cmp	r1, #0
 8005474:	da08      	bge.n	8005488 <__swhatbuf_r+0x24>
 8005476:	220c      	movs	r2, #12
 8005478:	5eb3      	ldrsh	r3, [r6, r2]
 800547a:	2200      	movs	r2, #0
 800547c:	602a      	str	r2, [r5, #0]
 800547e:	061b      	lsls	r3, r3, #24
 8005480:	d411      	bmi.n	80054a6 <__swhatbuf_r+0x42>
 8005482:	2380      	movs	r3, #128	; 0x80
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	e00f      	b.n	80054a8 <__swhatbuf_r+0x44>
 8005488:	466a      	mov	r2, sp
 800548a:	f000 f97b 	bl	8005784 <_fstat_r>
 800548e:	2800      	cmp	r0, #0
 8005490:	dbf1      	blt.n	8005476 <__swhatbuf_r+0x12>
 8005492:	23f0      	movs	r3, #240	; 0xf0
 8005494:	9901      	ldr	r1, [sp, #4]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	4019      	ands	r1, r3
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <__swhatbuf_r+0x4c>)
 800549c:	18c9      	adds	r1, r1, r3
 800549e:	424b      	negs	r3, r1
 80054a0:	4159      	adcs	r1, r3
 80054a2:	6029      	str	r1, [r5, #0]
 80054a4:	e7ed      	b.n	8005482 <__swhatbuf_r+0x1e>
 80054a6:	2340      	movs	r3, #64	; 0x40
 80054a8:	2000      	movs	r0, #0
 80054aa:	6023      	str	r3, [r4, #0]
 80054ac:	b016      	add	sp, #88	; 0x58
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	ffffe000 	.word	0xffffe000

080054b4 <__smakebuf_r>:
 80054b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054b6:	2602      	movs	r6, #2
 80054b8:	898b      	ldrh	r3, [r1, #12]
 80054ba:	0005      	movs	r5, r0
 80054bc:	000c      	movs	r4, r1
 80054be:	4233      	tst	r3, r6
 80054c0:	d006      	beq.n	80054d0 <__smakebuf_r+0x1c>
 80054c2:	0023      	movs	r3, r4
 80054c4:	3347      	adds	r3, #71	; 0x47
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	6123      	str	r3, [r4, #16]
 80054ca:	2301      	movs	r3, #1
 80054cc:	6163      	str	r3, [r4, #20]
 80054ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80054d0:	466a      	mov	r2, sp
 80054d2:	ab01      	add	r3, sp, #4
 80054d4:	f7ff ffc6 	bl	8005464 <__swhatbuf_r>
 80054d8:	9900      	ldr	r1, [sp, #0]
 80054da:	0007      	movs	r7, r0
 80054dc:	0028      	movs	r0, r5
 80054de:	f7ff f84b 	bl	8004578 <_malloc_r>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d108      	bne.n	80054f8 <__smakebuf_r+0x44>
 80054e6:	220c      	movs	r2, #12
 80054e8:	5ea3      	ldrsh	r3, [r4, r2]
 80054ea:	059a      	lsls	r2, r3, #22
 80054ec:	d4ef      	bmi.n	80054ce <__smakebuf_r+0x1a>
 80054ee:	2203      	movs	r2, #3
 80054f0:	4393      	bics	r3, r2
 80054f2:	431e      	orrs	r6, r3
 80054f4:	81a6      	strh	r6, [r4, #12]
 80054f6:	e7e4      	b.n	80054c2 <__smakebuf_r+0xe>
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <__smakebuf_r+0x84>)
 80054fa:	62ab      	str	r3, [r5, #40]	; 0x28
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	89a2      	ldrh	r2, [r4, #12]
 8005500:	6020      	str	r0, [r4, #0]
 8005502:	4313      	orrs	r3, r2
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	9b00      	ldr	r3, [sp, #0]
 8005508:	6120      	str	r0, [r4, #16]
 800550a:	6163      	str	r3, [r4, #20]
 800550c:	9b01      	ldr	r3, [sp, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <__smakebuf_r+0x7a>
 8005512:	0028      	movs	r0, r5
 8005514:	230e      	movs	r3, #14
 8005516:	5ee1      	ldrsh	r1, [r4, r3]
 8005518:	f000 f946 	bl	80057a8 <_isatty_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	d006      	beq.n	800552e <__smakebuf_r+0x7a>
 8005520:	2203      	movs	r2, #3
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	4393      	bics	r3, r2
 8005526:	001a      	movs	r2, r3
 8005528:	2301      	movs	r3, #1
 800552a:	4313      	orrs	r3, r2
 800552c:	81a3      	strh	r3, [r4, #12]
 800552e:	89a0      	ldrh	r0, [r4, #12]
 8005530:	4307      	orrs	r7, r0
 8005532:	81a7      	strh	r7, [r4, #12]
 8005534:	e7cb      	b.n	80054ce <__smakebuf_r+0x1a>
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	080052a1 	.word	0x080052a1

0800553c <memchr>:
 800553c:	b2c9      	uxtb	r1, r1
 800553e:	1882      	adds	r2, r0, r2
 8005540:	4290      	cmp	r0, r2
 8005542:	d101      	bne.n	8005548 <memchr+0xc>
 8005544:	2000      	movs	r0, #0
 8005546:	4770      	bx	lr
 8005548:	7803      	ldrb	r3, [r0, #0]
 800554a:	428b      	cmp	r3, r1
 800554c:	d0fb      	beq.n	8005546 <memchr+0xa>
 800554e:	3001      	adds	r0, #1
 8005550:	e7f6      	b.n	8005540 <memchr+0x4>

08005552 <memcpy>:
 8005552:	2300      	movs	r3, #0
 8005554:	b510      	push	{r4, lr}
 8005556:	429a      	cmp	r2, r3
 8005558:	d100      	bne.n	800555c <memcpy+0xa>
 800555a:	bd10      	pop	{r4, pc}
 800555c:	5ccc      	ldrb	r4, [r1, r3]
 800555e:	54c4      	strb	r4, [r0, r3]
 8005560:	3301      	adds	r3, #1
 8005562:	e7f8      	b.n	8005556 <memcpy+0x4>

08005564 <memmove>:
 8005564:	b510      	push	{r4, lr}
 8005566:	4288      	cmp	r0, r1
 8005568:	d902      	bls.n	8005570 <memmove+0xc>
 800556a:	188b      	adds	r3, r1, r2
 800556c:	4298      	cmp	r0, r3
 800556e:	d303      	bcc.n	8005578 <memmove+0x14>
 8005570:	2300      	movs	r3, #0
 8005572:	e007      	b.n	8005584 <memmove+0x20>
 8005574:	5c8b      	ldrb	r3, [r1, r2]
 8005576:	5483      	strb	r3, [r0, r2]
 8005578:	3a01      	subs	r2, #1
 800557a:	d2fb      	bcs.n	8005574 <memmove+0x10>
 800557c:	bd10      	pop	{r4, pc}
 800557e:	5ccc      	ldrb	r4, [r1, r3]
 8005580:	54c4      	strb	r4, [r0, r3]
 8005582:	3301      	adds	r3, #1
 8005584:	429a      	cmp	r2, r3
 8005586:	d1fa      	bne.n	800557e <memmove+0x1a>
 8005588:	e7f8      	b.n	800557c <memmove+0x18>
	...

0800558c <__malloc_lock>:
 800558c:	b510      	push	{r4, lr}
 800558e:	4802      	ldr	r0, [pc, #8]	; (8005598 <__malloc_lock+0xc>)
 8005590:	f7ff ff65 	bl	800545e <__retarget_lock_acquire_recursive>
 8005594:	bd10      	pop	{r4, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	200004d8 	.word	0x200004d8

0800559c <__malloc_unlock>:
 800559c:	b510      	push	{r4, lr}
 800559e:	4802      	ldr	r0, [pc, #8]	; (80055a8 <__malloc_unlock+0xc>)
 80055a0:	f7ff ff5e 	bl	8005460 <__retarget_lock_release_recursive>
 80055a4:	bd10      	pop	{r4, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	200004d8 	.word	0x200004d8

080055ac <_realloc_r>:
 80055ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ae:	0007      	movs	r7, r0
 80055b0:	000e      	movs	r6, r1
 80055b2:	0014      	movs	r4, r2
 80055b4:	2900      	cmp	r1, #0
 80055b6:	d105      	bne.n	80055c4 <_realloc_r+0x18>
 80055b8:	0011      	movs	r1, r2
 80055ba:	f7fe ffdd 	bl	8004578 <_malloc_r>
 80055be:	0005      	movs	r5, r0
 80055c0:	0028      	movs	r0, r5
 80055c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055c4:	2a00      	cmp	r2, #0
 80055c6:	d103      	bne.n	80055d0 <_realloc_r+0x24>
 80055c8:	f7fe ff6a 	bl	80044a0 <_free_r>
 80055cc:	0025      	movs	r5, r4
 80055ce:	e7f7      	b.n	80055c0 <_realloc_r+0x14>
 80055d0:	f000 f910 	bl	80057f4 <_malloc_usable_size_r>
 80055d4:	9001      	str	r0, [sp, #4]
 80055d6:	4284      	cmp	r4, r0
 80055d8:	d803      	bhi.n	80055e2 <_realloc_r+0x36>
 80055da:	0035      	movs	r5, r6
 80055dc:	0843      	lsrs	r3, r0, #1
 80055de:	42a3      	cmp	r3, r4
 80055e0:	d3ee      	bcc.n	80055c0 <_realloc_r+0x14>
 80055e2:	0021      	movs	r1, r4
 80055e4:	0038      	movs	r0, r7
 80055e6:	f7fe ffc7 	bl	8004578 <_malloc_r>
 80055ea:	1e05      	subs	r5, r0, #0
 80055ec:	d0e8      	beq.n	80055c0 <_realloc_r+0x14>
 80055ee:	9b01      	ldr	r3, [sp, #4]
 80055f0:	0022      	movs	r2, r4
 80055f2:	429c      	cmp	r4, r3
 80055f4:	d900      	bls.n	80055f8 <_realloc_r+0x4c>
 80055f6:	001a      	movs	r2, r3
 80055f8:	0031      	movs	r1, r6
 80055fa:	0028      	movs	r0, r5
 80055fc:	f7ff ffa9 	bl	8005552 <memcpy>
 8005600:	0031      	movs	r1, r6
 8005602:	0038      	movs	r0, r7
 8005604:	f7fe ff4c 	bl	80044a0 <_free_r>
 8005608:	e7da      	b.n	80055c0 <_realloc_r+0x14>

0800560a <_raise_r>:
 800560a:	b570      	push	{r4, r5, r6, lr}
 800560c:	0004      	movs	r4, r0
 800560e:	000d      	movs	r5, r1
 8005610:	291f      	cmp	r1, #31
 8005612:	d904      	bls.n	800561e <_raise_r+0x14>
 8005614:	2316      	movs	r3, #22
 8005616:	6003      	str	r3, [r0, #0]
 8005618:	2001      	movs	r0, #1
 800561a:	4240      	negs	r0, r0
 800561c:	bd70      	pop	{r4, r5, r6, pc}
 800561e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <_raise_r+0x24>
 8005624:	008a      	lsls	r2, r1, #2
 8005626:	189b      	adds	r3, r3, r2
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	2a00      	cmp	r2, #0
 800562c:	d108      	bne.n	8005640 <_raise_r+0x36>
 800562e:	0020      	movs	r0, r4
 8005630:	f000 f832 	bl	8005698 <_getpid_r>
 8005634:	002a      	movs	r2, r5
 8005636:	0001      	movs	r1, r0
 8005638:	0020      	movs	r0, r4
 800563a:	f000 f81b 	bl	8005674 <_kill_r>
 800563e:	e7ed      	b.n	800561c <_raise_r+0x12>
 8005640:	2000      	movs	r0, #0
 8005642:	2a01      	cmp	r2, #1
 8005644:	d0ea      	beq.n	800561c <_raise_r+0x12>
 8005646:	1c51      	adds	r1, r2, #1
 8005648:	d103      	bne.n	8005652 <_raise_r+0x48>
 800564a:	2316      	movs	r3, #22
 800564c:	3001      	adds	r0, #1
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	e7e4      	b.n	800561c <_raise_r+0x12>
 8005652:	2400      	movs	r4, #0
 8005654:	0028      	movs	r0, r5
 8005656:	601c      	str	r4, [r3, #0]
 8005658:	4790      	blx	r2
 800565a:	0020      	movs	r0, r4
 800565c:	e7de      	b.n	800561c <_raise_r+0x12>
	...

08005660 <raise>:
 8005660:	b510      	push	{r4, lr}
 8005662:	4b03      	ldr	r3, [pc, #12]	; (8005670 <raise+0x10>)
 8005664:	0001      	movs	r1, r0
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	f7ff ffcf 	bl	800560a <_raise_r>
 800566c:	bd10      	pop	{r4, pc}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	2000009c 	.word	0x2000009c

08005674 <_kill_r>:
 8005674:	2300      	movs	r3, #0
 8005676:	b570      	push	{r4, r5, r6, lr}
 8005678:	4d06      	ldr	r5, [pc, #24]	; (8005694 <_kill_r+0x20>)
 800567a:	0004      	movs	r4, r0
 800567c:	0008      	movs	r0, r1
 800567e:	0011      	movs	r1, r2
 8005680:	602b      	str	r3, [r5, #0]
 8005682:	f7fb fe01 	bl	8001288 <_kill>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d103      	bne.n	8005692 <_kill_r+0x1e>
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d000      	beq.n	8005692 <_kill_r+0x1e>
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	200004dc 	.word	0x200004dc

08005698 <_getpid_r>:
 8005698:	b510      	push	{r4, lr}
 800569a:	f7fb fdef 	bl	800127c <_getpid>
 800569e:	bd10      	pop	{r4, pc}

080056a0 <__sread>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	000c      	movs	r4, r1
 80056a4:	250e      	movs	r5, #14
 80056a6:	5f49      	ldrsh	r1, [r1, r5]
 80056a8:	f000 f8ac 	bl	8005804 <_read_r>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	db03      	blt.n	80056b8 <__sread+0x18>
 80056b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056b2:	181b      	adds	r3, r3, r0
 80056b4:	6563      	str	r3, [r4, #84]	; 0x54
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	4a02      	ldr	r2, [pc, #8]	; (80056c4 <__sread+0x24>)
 80056bc:	4013      	ands	r3, r2
 80056be:	81a3      	strh	r3, [r4, #12]
 80056c0:	e7f9      	b.n	80056b6 <__sread+0x16>
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	ffffefff 	.word	0xffffefff

080056c8 <__swrite>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	001f      	movs	r7, r3
 80056cc:	898b      	ldrh	r3, [r1, #12]
 80056ce:	0005      	movs	r5, r0
 80056d0:	000c      	movs	r4, r1
 80056d2:	0016      	movs	r6, r2
 80056d4:	05db      	lsls	r3, r3, #23
 80056d6:	d505      	bpl.n	80056e4 <__swrite+0x1c>
 80056d8:	230e      	movs	r3, #14
 80056da:	5ec9      	ldrsh	r1, [r1, r3]
 80056dc:	2200      	movs	r2, #0
 80056de:	2302      	movs	r3, #2
 80056e0:	f000 f874 	bl	80057cc <_lseek_r>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	4a05      	ldr	r2, [pc, #20]	; (80056fc <__swrite+0x34>)
 80056e8:	0028      	movs	r0, r5
 80056ea:	4013      	ands	r3, r2
 80056ec:	81a3      	strh	r3, [r4, #12]
 80056ee:	0032      	movs	r2, r6
 80056f0:	230e      	movs	r3, #14
 80056f2:	5ee1      	ldrsh	r1, [r4, r3]
 80056f4:	003b      	movs	r3, r7
 80056f6:	f000 f81f 	bl	8005738 <_write_r>
 80056fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fc:	ffffefff 	.word	0xffffefff

08005700 <__sseek>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	000c      	movs	r4, r1
 8005704:	250e      	movs	r5, #14
 8005706:	5f49      	ldrsh	r1, [r1, r5]
 8005708:	f000 f860 	bl	80057cc <_lseek_r>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	1c42      	adds	r2, r0, #1
 8005710:	d103      	bne.n	800571a <__sseek+0x1a>
 8005712:	4a05      	ldr	r2, [pc, #20]	; (8005728 <__sseek+0x28>)
 8005714:	4013      	ands	r3, r2
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	bd70      	pop	{r4, r5, r6, pc}
 800571a:	2280      	movs	r2, #128	; 0x80
 800571c:	0152      	lsls	r2, r2, #5
 800571e:	4313      	orrs	r3, r2
 8005720:	81a3      	strh	r3, [r4, #12]
 8005722:	6560      	str	r0, [r4, #84]	; 0x54
 8005724:	e7f8      	b.n	8005718 <__sseek+0x18>
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	ffffefff 	.word	0xffffefff

0800572c <__sclose>:
 800572c:	b510      	push	{r4, lr}
 800572e:	230e      	movs	r3, #14
 8005730:	5ec9      	ldrsh	r1, [r1, r3]
 8005732:	f000 f815 	bl	8005760 <_close_r>
 8005736:	bd10      	pop	{r4, pc}

08005738 <_write_r>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	0004      	movs	r4, r0
 800573c:	0008      	movs	r0, r1
 800573e:	0011      	movs	r1, r2
 8005740:	001a      	movs	r2, r3
 8005742:	2300      	movs	r3, #0
 8005744:	4d05      	ldr	r5, [pc, #20]	; (800575c <_write_r+0x24>)
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fb fdd7 	bl	80012fa <_write>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d103      	bne.n	8005758 <_write_r+0x20>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d000      	beq.n	8005758 <_write_r+0x20>
 8005756:	6023      	str	r3, [r4, #0]
 8005758:	bd70      	pop	{r4, r5, r6, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	200004dc 	.word	0x200004dc

08005760 <_close_r>:
 8005760:	2300      	movs	r3, #0
 8005762:	b570      	push	{r4, r5, r6, lr}
 8005764:	4d06      	ldr	r5, [pc, #24]	; (8005780 <_close_r+0x20>)
 8005766:	0004      	movs	r4, r0
 8005768:	0008      	movs	r0, r1
 800576a:	602b      	str	r3, [r5, #0]
 800576c:	f7fb fde1 	bl	8001332 <_close>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d103      	bne.n	800577c <_close_r+0x1c>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d000      	beq.n	800577c <_close_r+0x1c>
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	bd70      	pop	{r4, r5, r6, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	200004dc 	.word	0x200004dc

08005784 <_fstat_r>:
 8005784:	2300      	movs	r3, #0
 8005786:	b570      	push	{r4, r5, r6, lr}
 8005788:	4d06      	ldr	r5, [pc, #24]	; (80057a4 <_fstat_r+0x20>)
 800578a:	0004      	movs	r4, r0
 800578c:	0008      	movs	r0, r1
 800578e:	0011      	movs	r1, r2
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	f7fb fdd8 	bl	8001346 <_fstat>
 8005796:	1c43      	adds	r3, r0, #1
 8005798:	d103      	bne.n	80057a2 <_fstat_r+0x1e>
 800579a:	682b      	ldr	r3, [r5, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d000      	beq.n	80057a2 <_fstat_r+0x1e>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	200004dc 	.word	0x200004dc

080057a8 <_isatty_r>:
 80057a8:	2300      	movs	r3, #0
 80057aa:	b570      	push	{r4, r5, r6, lr}
 80057ac:	4d06      	ldr	r5, [pc, #24]	; (80057c8 <_isatty_r+0x20>)
 80057ae:	0004      	movs	r4, r0
 80057b0:	0008      	movs	r0, r1
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	f7fb fdd5 	bl	8001362 <_isatty>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d103      	bne.n	80057c4 <_isatty_r+0x1c>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d000      	beq.n	80057c4 <_isatty_r+0x1c>
 80057c2:	6023      	str	r3, [r4, #0]
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	200004dc 	.word	0x200004dc

080057cc <_lseek_r>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	0004      	movs	r4, r0
 80057d0:	0008      	movs	r0, r1
 80057d2:	0011      	movs	r1, r2
 80057d4:	001a      	movs	r2, r3
 80057d6:	2300      	movs	r3, #0
 80057d8:	4d05      	ldr	r5, [pc, #20]	; (80057f0 <_lseek_r+0x24>)
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	f7fb fdca 	bl	8001374 <_lseek>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d103      	bne.n	80057ec <_lseek_r+0x20>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d000      	beq.n	80057ec <_lseek_r+0x20>
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	bd70      	pop	{r4, r5, r6, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	200004dc 	.word	0x200004dc

080057f4 <_malloc_usable_size_r>:
 80057f4:	1f0b      	subs	r3, r1, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	1f18      	subs	r0, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da01      	bge.n	8005802 <_malloc_usable_size_r+0xe>
 80057fe:	580b      	ldr	r3, [r1, r0]
 8005800:	18c0      	adds	r0, r0, r3
 8005802:	4770      	bx	lr

08005804 <_read_r>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	0004      	movs	r4, r0
 8005808:	0008      	movs	r0, r1
 800580a:	0011      	movs	r1, r2
 800580c:	001a      	movs	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	4d05      	ldr	r5, [pc, #20]	; (8005828 <_read_r+0x24>)
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	f7fb fd54 	bl	80012c0 <_read>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d103      	bne.n	8005824 <_read_r+0x20>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d000      	beq.n	8005824 <_read_r+0x20>
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	bd70      	pop	{r4, r5, r6, pc}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	200004dc 	.word	0x200004dc

0800582c <_init>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr

08005838 <_fini>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr
