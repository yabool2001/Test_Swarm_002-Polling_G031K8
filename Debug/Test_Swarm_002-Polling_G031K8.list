
Test_Swarm_002-Polling_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005794  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf4  08005bf4  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bfc  08005bfc  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08005c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000100  08005d04  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08005d04  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ce7  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae6  00000000  00000000  00034e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  000378f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00038b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188c4  00000000  00000000  00039c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fd3  00000000  00000000  00052524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b2ce  00000000  00000000  000674f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001027c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  00102818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005838 	.word	0x08005838

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	08005838 	.word	0x08005838

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 ff0d 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f959 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fa85 	bl	8000b5c <MX_GPIO_Init>
  MX_RTC_Init();
 8000652:	f000 f9ab 	bl	80009ac <MX_RTC_Init>
  MX_TIM14_Init();
 8000656:	f000 f9e1 	bl	8000a1c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 800065a:	f000 fa31 	bl	8000ac0 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800065e:	f000 fa05 	bl	8000a6c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000662:	4b7c      	ldr	r3, [pc, #496]	; (8000854 <main+0x214>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2202      	movs	r2, #2
 8000668:	4252      	negs	r2, r2
 800066a:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT ( &htim16 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 800066c:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <main+0x218>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2202      	movs	r2, #2
 8000672:	4252      	negs	r2, r2
 8000674:	611a      	str	r2, [r3, #16]
  //wait_for_tim16x ( 2 ) ;

  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 8000676:	4b79      	ldr	r3, [pc, #484]	; (800085c <main+0x21c>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	4b79      	ldr	r3, [pc, #484]	; (8000860 <main+0x220>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2201      	movs	r2, #1
 8000680:	0019      	movs	r1, r3
 8000682:	f000 faaf 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 1 )
 8000686:	4b77      	ldr	r3, [pc, #476]	; (8000864 <main+0x224>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d107      	bne.n	800069e <main+0x5e>
	  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 800068e:	4b76      	ldr	r3, [pc, #472]	; (8000868 <main+0x228>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	4b76      	ldr	r3, [pc, #472]	; (800086c <main+0x22c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2202      	movs	r2, #2
 8000698:	0019      	movs	r1, r3
 800069a:	f000 faa3 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 2 )
 800069e:	4b71      	ldr	r3, [pc, #452]	; (8000864 <main+0x224>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d107      	bne.n	80006b6 <main+0x76>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006a6:	4b72      	ldr	r3, [pc, #456]	; (8000870 <main+0x230>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	4b72      	ldr	r3, [pc, #456]	; (8000874 <main+0x234>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2203      	movs	r2, #3
 80006b0:	0019      	movs	r1, r3
 80006b2:	f000 fa97 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 3 )
 80006b6:	4b6b      	ldr	r3, [pc, #428]	; (8000864 <main+0x224>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d107      	bne.n	80006ce <main+0x8e>
	  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006be:	4b6e      	ldr	r3, [pc, #440]	; (8000878 <main+0x238>)
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	4b6e      	ldr	r3, [pc, #440]	; (800087c <main+0x23c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2204      	movs	r2, #4
 80006c8:	0019      	movs	r1, r3
 80006ca:	f000 fa8b 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 4 )
 80006ce:	4b65      	ldr	r3, [pc, #404]	; (8000864 <main+0x224>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d107      	bne.n	80006e6 <main+0xa6>
	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006d6:	4b6a      	ldr	r3, [pc, #424]	; (8000880 <main+0x240>)
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	4b6a      	ldr	r3, [pc, #424]	; (8000884 <main+0x244>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2205      	movs	r2, #5
 80006e0:	0019      	movs	r1, r3
 80006e2:	f000 fa7f 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 5 )
 80006e6:	4b5f      	ldr	r3, [pc, #380]	; (8000864 <main+0x224>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	d107      	bne.n	80006fe <main+0xbe>
	  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 6 ) ;
 80006ee:	4b66      	ldr	r3, [pc, #408]	; (8000888 <main+0x248>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	4b66      	ldr	r3, [pc, #408]	; (800088c <main+0x24c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2206      	movs	r2, #6
 80006f8:	0019      	movs	r1, r3
 80006fa:	f000 fa73 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 6 )
 80006fe:	4b59      	ldr	r3, [pc, #356]	; (8000864 <main+0x224>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b06      	cmp	r3, #6
 8000704:	d107      	bne.n	8000716 <main+0xd6>
	  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 7 ) ;
 8000706:	4b62      	ldr	r3, [pc, #392]	; (8000890 <main+0x250>)
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	4b62      	ldr	r3, [pc, #392]	; (8000894 <main+0x254>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2207      	movs	r2, #7
 8000710:	0019      	movs	r1, r3
 8000712:	f000 fa67 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 7 )
 8000716:	4b53      	ldr	r3, [pc, #332]	; (8000864 <main+0x224>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b07      	cmp	r3, #7
 800071c:	d107      	bne.n	800072e <main+0xee>
	  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 8 ) ;
 800071e:	4b5e      	ldr	r3, [pc, #376]	; (8000898 <main+0x258>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	4b5e      	ldr	r3, [pc, #376]	; (800089c <main+0x25c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2208      	movs	r2, #8
 8000728:	0019      	movs	r1, r3
 800072a:	f000 fa5b 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 8 )
 800072e:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <main+0x224>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b08      	cmp	r3, #8
 8000734:	d107      	bne.n	8000746 <main+0x106>
	  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 9 ) ;
 8000736:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <main+0x260>)
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <main+0x264>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2209      	movs	r2, #9
 8000740:	0019      	movs	r1, r3
 8000742:	f000 fa4f 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 9 )
 8000746:	4b47      	ldr	r3, [pc, #284]	; (8000864 <main+0x224>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b09      	cmp	r3, #9
 800074c:	d107      	bne.n	800075e <main+0x11e>
	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 10 ) ;
 800074e:	4b56      	ldr	r3, [pc, #344]	; (80008a8 <main+0x268>)
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	4b56      	ldr	r3, [pc, #344]	; (80008ac <main+0x26c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	220a      	movs	r2, #10
 8000758:	0019      	movs	r1, r3
 800075a:	f000 fa43 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 10 )
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <main+0x224>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b0a      	cmp	r3, #10
 8000764:	d107      	bne.n	8000776 <main+0x136>
	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 11 ) ;
 8000766:	4b52      	ldr	r3, [pc, #328]	; (80008b0 <main+0x270>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <main+0x274>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	220b      	movs	r2, #11
 8000770:	0019      	movs	r1, r3
 8000772:	f000 fa37 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 11 )
 8000776:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <main+0x224>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b0b      	cmp	r3, #11
 800077c:	d107      	bne.n	800078e <main+0x14e>
	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 12 ) ;
 800077e:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <main+0x278>)
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	4b4e      	ldr	r3, [pc, #312]	; (80008bc <main+0x27c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	220c      	movs	r2, #12
 8000788:	0019      	movs	r1, r3
 800078a:	f000 fa2b 	bl	8000be4 <send2swarm_at_command>
  if ( checklist == 12 )
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <main+0x224>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b0c      	cmp	r3, #12
 8000794:	d107      	bne.n	80007a6 <main+0x166>
	  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 13 ) ;
 8000796:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <main+0x280>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <main+0x284>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	220d      	movs	r2, #13
 80007a0:	0019      	movs	r1, r3
 80007a2:	f000 fa1f 	bl	8000be4 <send2swarm_at_command>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( checklist == 13 )
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <main+0x224>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b0d      	cmp	r3, #13
 80007ac:	d107      	bne.n	80007be <main+0x17e>
		  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 14 ) ;
 80007ae:	4b46      	ldr	r3, [pc, #280]	; (80008c8 <main+0x288>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	4b46      	ldr	r3, [pc, #280]	; (80008cc <main+0x28c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	220e      	movs	r2, #14
 80007b8:	0019      	movs	r1, r3
 80007ba:	f000 fa13 	bl	8000be4 <send2swarm_at_command>
	  //wait_for_tim16x ( 6 ) ;
	  if ( checklist == 14 )
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <main+0x224>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b0e      	cmp	r3, #14
 80007c4:	d107      	bne.n	80007d6 <main+0x196>
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007c6:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <main+0x290>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	4b42      	ldr	r3, [pc, #264]	; (80008d4 <main+0x294>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	220f      	movs	r2, #15
 80007d0:	0019      	movs	r1, r3
 80007d2:	f000 fa07 	bl	8000be4 <send2swarm_at_command>
	  if ( checklist == 15 )
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <main+0x224>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b0f      	cmp	r3, #15
 80007dc:	d107      	bne.n	80007ee <main+0x1ae>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <main+0x298>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <main+0x29c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2210      	movs	r2, #16
 80007e8:	0019      	movs	r1, r3
 80007ea:	f000 f9fb 	bl	8000be4 <send2swarm_at_command>
	  if ( checklist == 16 )
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <main+0x224>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b10      	cmp	r3, #16
 80007f4:	d10f      	bne.n	8000816 <main+0x1d6>
	  {
		  snprintf ( td_at_comm , TD_PAYLOAD_BUFF_SIZE , "$TD HD=60,\"%s;%s\"" , pw_buff , gn_buff ) ;
 80007f6:	493a      	ldr	r1, [pc, #232]	; (80008e0 <main+0x2a0>)
 80007f8:	4a3a      	ldr	r2, [pc, #232]	; (80008e4 <main+0x2a4>)
 80007fa:	483b      	ldr	r0, [pc, #236]	; (80008e8 <main+0x2a8>)
 80007fc:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <main+0x2ac>)
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	000b      	movs	r3, r1
 8000802:	215a      	movs	r1, #90	; 0x5a
 8000804:	f003 fd50 	bl	80042a8 <sniprintf>
		  send2swarm_at_command ( td_at_comm , td_ok_answer , 17 ) ;
 8000808:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <main+0x2b0>)
 800080a:	6819      	ldr	r1, [r3, #0]
 800080c:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <main+0x2a8>)
 800080e:	2211      	movs	r2, #17
 8000810:	0018      	movs	r0, r3
 8000812:	f000 f9e7 	bl	8000be4 <send2swarm_at_command>
		  //send2swarm_at_command ( td_mzo_at_comm , td_ok_answer , 17 ) ;
	  }
	  if ( checklist == 17 )
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <main+0x224>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b11      	cmp	r3, #17
 800081c:	d102      	bne.n	8000824 <main+0x1e4>
		  wait_for_tim16x ( 6 ) ;
 800081e:	2006      	movs	r0, #6
 8000820:	f000 fb52 	bl	8000ec8 <wait_for_tim16x>

	  send2swarm_at_command ( sl_3c5ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50min.
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <main+0x2b4>)
 8000826:	6818      	ldr	r0, [r3, #0]
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <main+0x2b8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2212      	movs	r2, #18
 800082e:	0019      	movs	r1, r3
 8000830:	f000 f9d8 	bl	8000be4 <send2swarm_at_command>
	  rx_buff[0] = 0 ;
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <main+0x2bc>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
	  pw_buff[0] = 0 ;
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <main+0x2a0>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	  gn_buff[0] = 0 ;
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <main+0x2ac>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	  checklist = 13 ;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <main+0x224>)
 8000848:	220d      	movs	r2, #13
 800084a:	701a      	strb	r2, [r3, #0]


	  /* Enter LowPower Mode */

	  // Option1: Enter the SHUTDOWN mode. App applies hard restart after WFI
	  HAL_PWREx_EnterSHUTDOWNMode () ; // Enter the SHUTDOWN mode. Docelowo rozważyć STOP Mode 2, żeby nie zaczynać zawsze od konfiguracji
 800084c:	f001 f9aa 	bl	8001ba4 <HAL_PWREx_EnterSHUTDOWNMode>
	  if ( checklist == 13 )
 8000850:	e7a9      	b.n	80007a6 <main+0x166>
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000148 	.word	0x20000148
 8000858:	20000194 	.word	0x20000194
 800085c:	20000004 	.word	0x20000004
 8000860:	20000048 	.word	0x20000048
 8000864:	20000274 	.word	0x20000274
 8000868:	20000008 	.word	0x20000008
 800086c:	2000004c 	.word	0x2000004c
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000050 	.word	0x20000050
 8000878:	20000010 	.word	0x20000010
 800087c:	20000054 	.word	0x20000054
 8000880:	20000014 	.word	0x20000014
 8000884:	20000058 	.word	0x20000058
 8000888:	2000001c 	.word	0x2000001c
 800088c:	20000060 	.word	0x20000060
 8000890:	20000020 	.word	0x20000020
 8000894:	20000064 	.word	0x20000064
 8000898:	20000024 	.word	0x20000024
 800089c:	20000068 	.word	0x20000068
 80008a0:	20000028 	.word	0x20000028
 80008a4:	2000006c 	.word	0x2000006c
 80008a8:	2000002c 	.word	0x2000002c
 80008ac:	20000070 	.word	0x20000070
 80008b0:	20000030 	.word	0x20000030
 80008b4:	20000074 	.word	0x20000074
 80008b8:	20000034 	.word	0x20000034
 80008bc:	20000078 	.word	0x20000078
 80008c0:	20000038 	.word	0x20000038
 80008c4:	2000007c 	.word	0x2000007c
 80008c8:	20000018 	.word	0x20000018
 80008cc:	2000005c 	.word	0x2000005c
 80008d0:	2000003c 	.word	0x2000003c
 80008d4:	20000080 	.word	0x20000080
 80008d8:	20000040 	.word	0x20000040
 80008dc:	20000084 	.word	0x20000084
 80008e0:	2000043c 	.word	0x2000043c
 80008e4:	080059f0 	.word	0x080059f0
 80008e8:	20000468 	.word	0x20000468
 80008ec:	20000444 	.word	0x20000444
 80008f0:	20000088 	.word	0x20000088
 80008f4:	20000044 	.word	0x20000044
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	20000278 	.word	0x20000278

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b093      	sub	sp, #76	; 0x4c
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	2410      	movs	r4, #16
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2338      	movs	r3, #56	; 0x38
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f003 fcc1 	bl	8004298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000916:	003b      	movs	r3, r7
 8000918:	0018      	movs	r0, r3
 800091a:	2310      	movs	r3, #16
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f003 fcba 	bl	8004298 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	0018      	movs	r0, r3
 800092a:	f001 f8fb 	bl	8001b24 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800092e:	f001 f8eb 	bl	8001b08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <SystemClock_Config+0xa8>)
 8000934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <SystemClock_Config+0xa8>)
 8000938:	2118      	movs	r1, #24
 800093a:	438a      	bics	r2, r1
 800093c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2206      	movs	r2, #6
 8000942:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2201      	movs	r2, #1
 8000948:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0052      	lsls	r2, r2, #1
 8000950:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2240      	movs	r2, #64	; 0x40
 800095c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	193b      	adds	r3, r7, r4
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f942 	bl	8001bf0 <HAL_RCC_OscConfig>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000970:	f000 fb36 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	003b      	movs	r3, r7
 8000976:	2207      	movs	r2, #7
 8000978:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800097a:	003b      	movs	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	003b      	movs	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000986:	003b      	movs	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800098c:	003b      	movs	r3, r7
 800098e:	2100      	movs	r1, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fc47 	bl	8002224 <HAL_RCC_ClockConfig>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800099a:	f000 fb21 	bl	8000fe0 <Error_Handler>
  }
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b013      	add	sp, #76	; 0x4c
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_RTC_Init+0x68>)
 80009b2:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <MX_RTC_Init+0x6c>)
 80009b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_RTC_Init+0x68>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_RTC_Init+0x68>)
 80009be:	227f      	movs	r2, #127	; 0x7f
 80009c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_RTC_Init+0x68>)
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_RTC_Init+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_RTC_Init+0x68>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_RTC_Init+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_RTC_Init+0x68>)
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	05d2      	lsls	r2, r2, #23
 80009e0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_RTC_Init+0x68>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_RTC_Init+0x68>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 ff3e 	bl	800286c <HAL_RTC_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 faf4 	bl	8000fe0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_RTC_Init+0x68>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	213c      	movs	r1, #60	; 0x3c
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f884 	bl	8002b0c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000a08:	f000 faea 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	2000011c 	.word	0x2000011c
 8000a18:	40002800 	.word	0x40002800

08000a1c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <MX_TIM14_Init+0x44>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <MX_TIM14_Init+0x48>)
 8000a2a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <MX_TIM14_Init+0x4c>)
 8000a36:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <MX_TIM14_Init+0x40>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f002 f920 	bl	8002c8c <HAL_TIM_Base_Init>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a50:	f000 fac6 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000148 	.word	0x20000148
 8000a60:	40002000 	.word	0x40002000
 8000a64:	00003e7f 	.word	0x00003e7f
 8000a68:	000007cf 	.word	0x000007cf

08000a6c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <MX_TIM16_Init+0x48>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a78:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <MX_TIM16_Init+0x4c>)
 8000a7a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <MX_TIM16_Init+0x50>)
 8000a86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <MX_TIM16_Init+0x44>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 f8f5 	bl	8002c8c <HAL_TIM_Base_Init>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000aa6:	f000 fa9b 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000194 	.word	0x20000194
 8000ab4:	40014400 	.word	0x40014400
 8000ab8:	00003e7f 	.word	0x00003e7f
 8000abc:	0000270f 	.word	0x0000270f

08000ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ac6:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <MX_USART1_UART_Init+0x98>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000acc:	22e1      	movs	r2, #225	; 0xe1
 8000ace:	0252      	lsls	r2, r2, #9
 8000ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 fb78 	bl	8003200 <HAL_UART_Init>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 fa64 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f003 f991 	bl	8003e44 <HAL_UARTEx_SetTxFifoThreshold>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f000 fa5b 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f003 f9c8 	bl	8003ec4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 fa52 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f003 f946 	bl	8003dd0 <HAL_UARTEx_DisableFifoMode>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 fa4a 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	200001e0 	.word	0x200001e0
 8000b58:	40013800 	.word	0x40013800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	240c      	movs	r4, #12
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	0018      	movs	r0, r3
 8000b68:	2314      	movs	r3, #20
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f003 fb93 	bl	8004298 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b78:	2104      	movs	r1, #4
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b82:	2204      	movs	r2, #4
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_GPIO_Init+0x80>)
 8000b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_GPIO_Init+0x84>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2140      	movs	r1, #64	; 0x40
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 ff8f 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000bae:	0021      	movs	r1, r4
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2240      	movs	r2, #64	; 0x40
 8000bb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2201      	movs	r2, #1
 8000bba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <MX_GPIO_Init+0x84>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f000 fe18 	bl	8001804 <HAL_GPIO_Init>

}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b009      	add	sp, #36	; 0x24
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	50000800 	.word	0x50000800

08000be4 <send2swarm_at_command>:

/* USER CODE BEGIN 4 */
void send2swarm_at_command ( const char* at_command , const char* answer , uint8_t step )
{
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	701a      	strb	r2, [r3, #0]
	//uint32_t temp_tickstart = HAL_GetTick () ; //temp
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fa85 	bl	8000104 <strlen>
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	2517      	movs	r5, #23
 8000bfe:	197c      	adds	r4, r7, r5
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f000 f98d 	bl	8000f24 <nmea_checksum>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	7023      	strb	r3, [r4, #0]

	sprintf ( (char*) tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000c0e:	197b      	adds	r3, r7, r5
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4977      	ldr	r1, [pc, #476]	; (8000df4 <send2swarm_at_command+0x210>)
 8000c16:	4878      	ldr	r0, [pc, #480]	; (8000df8 <send2swarm_at_command+0x214>)
 8000c18:	f003 fb7a 	bl	8004310 <siprintf>
	//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
	uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000c1c:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <send2swarm_at_command+0x218>)
 8000c1e:	4978      	ldr	r1, [pc, #480]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000c20:	4878      	ldr	r0, [pc, #480]	; (8000e04 <send2swarm_at_command+0x220>)
 8000c22:	22fa      	movs	r2, #250	; 0xfa
 8000c24:	9200      	str	r2, [sp, #0]
 8000c26:	22c8      	movs	r2, #200	; 0xc8
 8000c28:	f003 f98e 	bl	8003f48 <HAL_UARTEx_ReceiveToIdle>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	001a      	movs	r2, r3
 8000c30:	4b75      	ldr	r3, [pc, #468]	; (8000e08 <send2swarm_at_command+0x224>)
 8000c32:	701a      	strb	r2, [r3, #0]
	uart_status = HAL_UART_AbortReceive ( &huart1 ) ;
 8000c34:	4b73      	ldr	r3, [pc, #460]	; (8000e04 <send2swarm_at_command+0x220>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 fbd4 	bl	80033e4 <HAL_UART_AbortReceive>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	001a      	movs	r2, r3
 8000c40:	4b71      	ldr	r3, [pc, #452]	; (8000e08 <send2swarm_at_command+0x224>)
 8000c42:	701a      	strb	r2, [r3, #0]
	rx_buff[0] = 0 ;
 8000c44:	4b6e      	ldr	r3, [pc, #440]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , SWARM_UART_TX_TIMEOUT ) ;
 8000c4a:	4b6b      	ldr	r3, [pc, #428]	; (8000df8 <send2swarm_at_command+0x214>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fa59 	bl	8000104 <strlen>
 8000c52:	0003      	movs	r3, r0
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	23fa      	movs	r3, #250	; 0xfa
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4967      	ldr	r1, [pc, #412]	; (8000df8 <send2swarm_at_command+0x214>)
 8000c5c:	4869      	ldr	r0, [pc, #420]	; (8000e04 <send2swarm_at_command+0x220>)
 8000c5e:	f002 fb25 	bl	80032ac <HAL_UART_Transmit>
 8000c62:	0003      	movs	r3, r0
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b68      	ldr	r3, [pc, #416]	; (8000e08 <send2swarm_at_command+0x224>)
 8000c68:	701a      	strb	r2, [r3, #0]
	tx_buff[0] = 0 ;
 8000c6a:	4b63      	ldr	r3, [pc, #396]	; (8000df8 <send2swarm_at_command+0x214>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
	//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
	uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000c70:	4b62      	ldr	r3, [pc, #392]	; (8000dfc <send2swarm_at_command+0x218>)
 8000c72:	4963      	ldr	r1, [pc, #396]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000c74:	4863      	ldr	r0, [pc, #396]	; (8000e04 <send2swarm_at_command+0x220>)
 8000c76:	22fa      	movs	r2, #250	; 0xfa
 8000c78:	9200      	str	r2, [sp, #0]
 8000c7a:	22c8      	movs	r2, #200	; 0xc8
 8000c7c:	f003 f964 	bl	8003f48 <HAL_UARTEx_ReceiveToIdle>
 8000c80:	0003      	movs	r3, r0
 8000c82:	001a      	movs	r2, r3
 8000c84:	4b60      	ldr	r3, [pc, #384]	; (8000e08 <send2swarm_at_command+0x224>)
 8000c86:	701a      	strb	r2, [r3, #0]
	/* Wait of SWARM UARt RX */
	tim16_on = 1 ;
 8000c88:	4b60      	ldr	r3, [pc, #384]	; (8000e0c <send2swarm_at_command+0x228>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000c8e:	4b60      	ldr	r3, [pc, #384]	; (8000e10 <send2swarm_at_command+0x22c>)
 8000c90:	0018      	movs	r0, r3
 8000c92:	f002 f853 	bl	8002d3c <HAL_TIM_Base_Start_IT>
	while ( tim16_on )
 8000c96:	e01f      	b.n	8000cd8 <send2swarm_at_command+0xf4>
	{
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fa32 	bl	8000104 <strlen>
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	4b56      	ldr	r3, [pc, #344]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f003 fb52 	bl	8004350 <strncmp>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d104      	bne.n	8000cba <send2swarm_at_command+0xd6>
		{
			checklist = step ;
 8000cb0:	4b58      	ldr	r3, [pc, #352]	; (8000e14 <send2swarm_at_command+0x230>)
 8000cb2:	1dfa      	adds	r2, r7, #7
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	701a      	strb	r2, [r3, #0]
			break ;
 8000cb8:	e012      	b.n	8000ce0 <send2swarm_at_command+0xfc>
		}
		else
		{
			rx_buff[0] = 0 ;
 8000cba:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
			//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
			uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000cc0:	4b4e      	ldr	r3, [pc, #312]	; (8000dfc <send2swarm_at_command+0x218>)
 8000cc2:	494f      	ldr	r1, [pc, #316]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000cc4:	484f      	ldr	r0, [pc, #316]	; (8000e04 <send2swarm_at_command+0x220>)
 8000cc6:	22fa      	movs	r2, #250	; 0xfa
 8000cc8:	9200      	str	r2, [sp, #0]
 8000cca:	22c8      	movs	r2, #200	; 0xc8
 8000ccc:	f003 f93c 	bl	8003f48 <HAL_UARTEx_ReceiveToIdle>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <send2swarm_at_command+0x224>)
 8000cd6:	701a      	strb	r2, [r3, #0]
	while ( tim16_on )
 8000cd8:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <send2swarm_at_command+0x228>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1db      	bne.n	8000c98 <send2swarm_at_command+0xb4>
		}
	}
	if ( checklist != step && step != 17 )
 8000ce0:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <send2swarm_at_command+0x230>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	1dfa      	adds	r2, r7, #7
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d05a      	beq.n	8000da2 <send2swarm_at_command+0x1be>
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b11      	cmp	r3, #17
 8000cf2:	d056      	beq.n	8000da2 <send2swarm_at_command+0x1be>
	{
		uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , SWARM_UART_TX_TIMEOUT ) ;
 8000cf4:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <send2swarm_at_command+0x214>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fa04 	bl	8000104 <strlen>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	23fa      	movs	r3, #250	; 0xfa
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	493c      	ldr	r1, [pc, #240]	; (8000df8 <send2swarm_at_command+0x214>)
 8000d06:	483f      	ldr	r0, [pc, #252]	; (8000e04 <send2swarm_at_command+0x220>)
 8000d08:	f002 fad0 	bl	80032ac <HAL_UART_Transmit>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	001a      	movs	r2, r3
 8000d10:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <send2swarm_at_command+0x224>)
 8000d12:	701a      	strb	r2, [r3, #0]
		tx_buff[0] = 0 ;
 8000d14:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <send2swarm_at_command+0x214>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
		//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
		uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000d1a:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <send2swarm_at_command+0x218>)
 8000d1c:	4938      	ldr	r1, [pc, #224]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000d1e:	4839      	ldr	r0, [pc, #228]	; (8000e04 <send2swarm_at_command+0x220>)
 8000d20:	22fa      	movs	r2, #250	; 0xfa
 8000d22:	9200      	str	r2, [sp, #0]
 8000d24:	22c8      	movs	r2, #200	; 0xc8
 8000d26:	f003 f90f 	bl	8003f48 <HAL_UARTEx_ReceiveToIdle>
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <send2swarm_at_command+0x224>)
 8000d30:	701a      	strb	r2, [r3, #0]
		/* Wait of SWARM UARt RX */
		tim16_on = 1 ;
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <send2swarm_at_command+0x228>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000d38:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <send2swarm_at_command+0x22c>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f001 fffe 	bl	8002d3c <HAL_TIM_Base_Start_IT>
		while ( tim16_on )
 8000d40:	e02b      	b.n	8000d9a <send2swarm_at_command+0x1b6>
		{
			//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
			uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <send2swarm_at_command+0x218>)
 8000d44:	492e      	ldr	r1, [pc, #184]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000d46:	482f      	ldr	r0, [pc, #188]	; (8000e04 <send2swarm_at_command+0x220>)
 8000d48:	22fa      	movs	r2, #250	; 0xfa
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	22c8      	movs	r2, #200	; 0xc8
 8000d4e:	f003 f8fb 	bl	8003f48 <HAL_UARTEx_ReceiveToIdle>
 8000d52:	0003      	movs	r3, r0
 8000d54:	001a      	movs	r2, r3
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <send2swarm_at_command+0x224>)
 8000d58:	701a      	strb	r2, [r3, #0]
			if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff f9d1 	bl	8000104 <strlen>
 8000d62:	0002      	movs	r2, r0
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f003 faf1 	bl	8004350 <strncmp>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d104      	bne.n	8000d7c <send2swarm_at_command+0x198>
			{
				checklist = step ;
 8000d72:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <send2swarm_at_command+0x230>)
 8000d74:	1dfa      	adds	r2, r7, #7
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	701a      	strb	r2, [r3, #0]
				break ;
 8000d7a:	e012      	b.n	8000da2 <send2swarm_at_command+0x1be>
			}
			else
			{
				rx_buff[0] = 0 ;
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
				//uart_status = HAL_UART_Receive ( &huart1 , rx_buff , sizeof ( rx_buff ) , SWARM_UART_RX_TIMEOUT ) ;
				uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , SWARM_UART_RX_TIMEOUT ) ;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <send2swarm_at_command+0x218>)
 8000d84:	491e      	ldr	r1, [pc, #120]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000d86:	481f      	ldr	r0, [pc, #124]	; (8000e04 <send2swarm_at_command+0x220>)
 8000d88:	22fa      	movs	r2, #250	; 0xfa
 8000d8a:	9200      	str	r2, [sp, #0]
 8000d8c:	22c8      	movs	r2, #200	; 0xc8
 8000d8e:	f003 f8db 	bl	8003f48 <HAL_UARTEx_ReceiveToIdle>
 8000d92:	0003      	movs	r3, r0
 8000d94:	001a      	movs	r2, r3
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <send2swarm_at_command+0x224>)
 8000d98:	701a      	strb	r2, [r3, #0]
		while ( tim16_on )
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <send2swarm_at_command+0x228>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1cf      	bne.n	8000d42 <send2swarm_at_command+0x15e>
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
			checklist = step ;
	}
	*/

	if ( strncmp ( pw_mostrecent_at_comm , at_command , strlen ( pw_mostrecent_at_comm ) ) == 0 )
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <send2swarm_at_command+0x234>)
 8000da4:	681c      	ldr	r4, [r3, #0]
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <send2swarm_at_command+0x234>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff f9aa 	bl	8000104 <strlen>
 8000db0:	0002      	movs	r2, r0
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	0019      	movs	r1, r3
 8000db6:	0020      	movs	r0, r4
 8000db8:	f003 faca 	bl	8004350 <strncmp>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d101      	bne.n	8000dc4 <send2swarm_at_command+0x1e0>
		pw2payload () ;
 8000dc0:	f000 f82e 	bl	8000e20 <pw2payload>
	if ( strncmp ( gn_mostrecent_at_comm , at_command , strlen ( gn_mostrecent_at_comm ) ) == 0 )
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <send2swarm_at_command+0x238>)
 8000dc6:	681c      	ldr	r4, [r3, #0]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <send2swarm_at_command+0x238>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff f999 	bl	8000104 <strlen>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	0020      	movs	r0, r4
 8000dda:	f003 fab9 	bl	8004350 <strncmp>
 8000dde:	1e03      	subs	r3, r0, #0
 8000de0:	d101      	bne.n	8000de6 <send2swarm_at_command+0x202>
		gn2payload () ;
 8000de2:	f000 f847 	bl	8000e74 <gn2payload>
	rx_buff[0] = 0 ;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <send2swarm_at_command+0x21c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b006      	add	sp, #24
 8000df2:	bdb0      	pop	{r4, r5, r7, pc}
 8000df4:	08005a04 	.word	0x08005a04
 8000df8:	20000340 	.word	0x20000340
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000278 	.word	0x20000278
 8000e04:	200001e0 	.word	0x200001e0
 8000e08:	20000277 	.word	0x20000277
 8000e0c:	20000276 	.word	0x20000276
 8000e10:	20000194 	.word	0x20000194
 8000e14:	20000274 	.word	0x20000274
 8000e18:	20000018 	.word	0x20000018
 8000e1c:	2000003c 	.word	0x2000003c

08000e20 <pw2payload>:

void pw2payload ()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <pw2payload+0x3c>)
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <pw2payload+0x40>)
 8000e28:	0011      	movs	r1, r2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f003 faa2 	bl	8004374 <strtok>
 8000e30:	0002      	movs	r2, r0
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <pw2payload+0x44>)
 8000e34:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "," ) ;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <pw2payload+0x48>)
 8000e38:	0019      	movs	r1, r3
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f003 fa9a 	bl	8004374 <strtok>
 8000e40:	0002      	movs	r2, r0
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <pw2payload+0x44>)
 8000e44:	601a      	str	r2, [r3, #0]
	sprintf ( pw_buff , "%4s" , chunk ) ;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <pw2payload+0x44>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <pw2payload+0x4c>)
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <pw2payload+0x50>)
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f003 fa5e 	bl	8004310 <siprintf>
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	08005a10 	.word	0x08005a10
 8000e60:	20000278 	.word	0x20000278
 8000e64:	200004c4 	.word	0x200004c4
 8000e68:	08005a14 	.word	0x08005a14
 8000e6c:	08005a18 	.word	0x08005a18
 8000e70:	2000043c 	.word	0x2000043c

08000e74 <gn2payload>:
void gn2payload ()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <gn2payload+0x3c>)
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <gn2payload+0x40>)
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f003 fa78 	bl	8004374 <strtok>
 8000e84:	0002      	movs	r2, r0
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <gn2payload+0x44>)
 8000e88:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "*" ) ;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <gn2payload+0x48>)
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f003 fa70 	bl	8004374 <strtok>
 8000e94:	0002      	movs	r2, r0
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <gn2payload+0x44>)
 8000e98:	601a      	str	r2, [r3, #0]
	sprintf ( (char*) gn_buff , "%s" , chunk ) ;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <gn2payload+0x44>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <gn2payload+0x4c>)
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <gn2payload+0x50>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f003 fa34 	bl	8004310 <siprintf>
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	08005a10 	.word	0x08005a10
 8000eb4:	20000278 	.word	0x20000278
 8000eb8:	200004c4 	.word	0x200004c4
 8000ebc:	08005a1c 	.word	0x08005a1c
 8000ec0:	08005a20 	.word	0x08005a20
 8000ec4:	20000444 	.word	0x20000444

08000ec8 <wait_for_tim16x>:

void wait_for_tim16x ( uint8_t x )
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	0002      	movs	r2, r0
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	701a      	strb	r2, [r3, #0]
	uint8_t i ;
	for ( i = 0 ; i < x ; i++ )
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e012      	b.n	8000f04 <wait_for_tim16x+0x3c>
	{
		tim16_on = 1 ;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <wait_for_tim16x+0x54>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <wait_for_tim16x+0x58>)
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f001 ff28 	bl	8002d3c <HAL_TIM_Base_Start_IT>
		while ( tim16_on )
 8000eec:	e000      	b.n	8000ef0 <wait_for_tim16x+0x28>
			__NOP () ;
 8000eee:	46c0      	nop			; (mov r8, r8)
		while ( tim16_on )
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <wait_for_tim16x+0x54>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1fa      	bne.n	8000eee <wait_for_tim16x+0x26>
	for ( i = 0 ; i < x ; i++ )
 8000ef8:	210f      	movs	r1, #15
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	3201      	adds	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	230f      	movs	r3, #15
 8000f06:	18fa      	adds	r2, r7, r3
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	7812      	ldrb	r2, [r2, #0]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3e5      	bcc.n	8000ede <wait_for_tim16x+0x16>
	}
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b004      	add	sp, #16
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000276 	.word	0x20000276
 8000f20:	20000194 	.word	0x20000194

08000f24 <nmea_checksum>:

uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b24      	cmp	r3, #36	; 0x24
 8000f38:	d102      	bne.n	8000f40 <nmea_checksum+0x1c>
		i++ ;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f40:	230b      	movs	r3, #11
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e00c      	b.n	8000f64 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	18d3      	adds	r3, r2, r3
 8000f50:	7819      	ldrb	r1, [r3, #0]
 8000f52:	220b      	movs	r2, #11
 8000f54:	18bb      	adds	r3, r7, r2
 8000f56:	18ba      	adds	r2, r7, r2
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	404a      	eors	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d205      	bcs.n	8000f78 <nmea_checksum+0x54>
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1e8      	bne.n	8000f4a <nmea_checksum+0x26>
	return cs;
 8000f78:	230b      	movs	r3, #11
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0c      	ldr	r2, [pc, #48]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d106      	bne.n	8000fa8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f001 ff1e 	bl	8002de4 <HAL_TIM_Base_Stop_IT>
	}
	if ( htim->Instance == TIM16 )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d106      	bne.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		tim16_on = 0 ;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim16 ) ;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 ff12 	bl	8002de4 <HAL_TIM_Base_Stop_IT>
	}
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40002000 	.word	0x40002000
 8000fcc:	20000275 	.word	0x20000275
 8000fd0:	20000148 	.word	0x20000148
 8000fd4:	40014400 	.word	0x40014400
 8000fd8:	20000276 	.word	0x20000276
 8000fdc:	20000194 	.word	0x20000194

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_MspInit+0x44>)
 8000ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_MspInit+0x44>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_MspInit+0x44>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2201      	movs	r2, #1
 8001004:	4013      	ands	r3, r2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x44>)
 800100c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_MspInit+0x44>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0549      	lsls	r1, r1, #21
 8001014:	430a      	orrs	r2, r1
 8001016:	63da      	str	r2, [r3, #60]	; 0x3c
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_MspInit+0x44>)
 800101a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	055b      	lsls	r3, r3, #21
 8001020:	4013      	ands	r3, r2
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b08f      	sub	sp, #60	; 0x3c
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800103c:	2410      	movs	r4, #16
 800103e:	193b      	adds	r3, r7, r4
 8001040:	0018      	movs	r0, r3
 8001042:	2328      	movs	r3, #40	; 0x28
 8001044:	001a      	movs	r2, r3
 8001046:	2100      	movs	r1, #0
 8001048:	f003 f926 	bl	8004298 <memset>
  if(hrtc->Instance==RTC)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_RTC_MspInit+0x84>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12c      	bne.n	80010b0 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	0292      	lsls	r2, r2, #10
 800105c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800105e:	193b      	adds	r3, r7, r4
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	0052      	lsls	r2, r2, #1
 8001064:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	193b      	adds	r3, r7, r4
 8001068:	0018      	movs	r0, r3
 800106a:	f001 fa85 	bl	8002578 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	1e03      	subs	r3, r0, #0
 8001070:	d001      	beq.n	8001076 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001072:	f7ff ffb5 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_RTC_MspInit+0x88>)
 8001078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_RTC_MspInit+0x88>)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	0209      	lsls	r1, r1, #8
 8001080:	430a      	orrs	r2, r1
 8001082:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_RTC_MspInit+0x88>)
 8001086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_RTC_MspInit+0x88>)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	00c9      	lsls	r1, r1, #3
 800108e:	430a      	orrs	r2, r1
 8001090:	63da      	str	r2, [r3, #60]	; 0x3c
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_RTC_MspInit+0x88>)
 8001094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4013      	ands	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	2002      	movs	r0, #2
 80010a6:	f000 fb0f 	bl	80016c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80010aa:	2002      	movs	r0, #2
 80010ac:	f000 fb21 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b00f      	add	sp, #60	; 0x3c
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	40002800 	.word	0x40002800
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_TIM_Base_MspInit+0x80>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d116      	bne.n	8001100 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_TIM_Base_MspInit+0x84>)
 80010d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_TIM_Base_MspInit+0x84>)
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	0209      	lsls	r1, r1, #8
 80010dc:	430a      	orrs	r2, r1
 80010de:	641a      	str	r2, [r3, #64]	; 0x40
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_TIM_Base_MspInit+0x84>)
 80010e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2013      	movs	r0, #19
 80010f4:	f000 fae8 	bl	80016c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80010f8:	2013      	movs	r0, #19
 80010fa:	f000 fafa 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010fe:	e01a      	b.n	8001136 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <HAL_TIM_Base_MspInit+0x88>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d115      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_TIM_Base_MspInit+0x84>)
 800110c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_TIM_Base_MspInit+0x84>)
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	0289      	lsls	r1, r1, #10
 8001114:	430a      	orrs	r2, r1
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_TIM_Base_MspInit+0x84>)
 800111a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	029b      	lsls	r3, r3, #10
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2015      	movs	r0, #21
 800112c:	f000 facc 	bl	80016c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001130:	2015      	movs	r0, #21
 8001132:	f000 fade 	bl	80016f2 <HAL_NVIC_EnableIRQ>
}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b004      	add	sp, #16
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	40002000 	.word	0x40002000
 8001144:	40021000 	.word	0x40021000
 8001148:	40014400 	.word	0x40014400

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b095      	sub	sp, #84	; 0x54
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	233c      	movs	r3, #60	; 0x3c
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	0018      	movs	r0, r3
 800115a:	2314      	movs	r3, #20
 800115c:	001a      	movs	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	f003 f89a 	bl	8004298 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	2414      	movs	r4, #20
 8001166:	193b      	adds	r3, r7, r4
 8001168:	0018      	movs	r0, r3
 800116a:	2328      	movs	r3, #40	; 0x28
 800116c:	001a      	movs	r2, r3
 800116e:	2100      	movs	r1, #0
 8001170:	f003 f892 	bl	8004298 <memset>
  if(huart->Instance==USART1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a23      	ldr	r2, [pc, #140]	; (8001208 <HAL_UART_MspInit+0xbc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d13f      	bne.n	80011fe <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800117e:	193b      	adds	r3, r7, r4
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001184:	193b      	adds	r3, r7, r4
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118a:	193b      	adds	r3, r7, r4
 800118c:	0018      	movs	r0, r3
 800118e:	f001 f9f3 	bl	8002578 <HAL_RCCEx_PeriphCLKConfig>
 8001192:	1e03      	subs	r3, r0, #0
 8001194:	d001      	beq.n	800119a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001196:	f7ff ff23 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_UART_MspInit+0xc0>)
 800119c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_UART_MspInit+0xc0>)
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	01c9      	lsls	r1, r1, #7
 80011a4:	430a      	orrs	r2, r1
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0xc0>)
 80011aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	01db      	lsls	r3, r3, #7
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0xc0>)
 80011b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_UART_MspInit+0xc0>)
 80011bc:	2101      	movs	r1, #1
 80011be:	430a      	orrs	r2, r1
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_UART_MspInit+0xc0>)
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	2201      	movs	r2, #1
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011ce:	213c      	movs	r1, #60	; 0x3c
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	22c0      	movs	r2, #192	; 0xc0
 80011d4:	00d2      	lsls	r2, r2, #3
 80011d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	2202      	movs	r2, #2
 80011dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2201      	movs	r2, #1
 80011ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	187a      	adds	r2, r7, r1
 80011f2:	23a0      	movs	r3, #160	; 0xa0
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 fb03 	bl	8001804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b015      	add	sp, #84	; 0x54
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f980 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <RTC_TAMP_IRQHandler+0x14>)
 8001246:	0018      	movs	r0, r3
 8001248:	f001 fcfa 	bl	8002c40 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	2000011c 	.word	0x2000011c

08001258 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <TIM14_IRQHandler+0x14>)
 800125e:	0018      	movs	r0, r3
 8001260:	f001 fdee 	bl	8002e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000148 	.word	0x20000148

08001270 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <TIM16_IRQHandler+0x14>)
 8001276:	0018      	movs	r0, r3
 8001278:	f001 fde2 	bl	8002e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	20000194 	.word	0x20000194

08001288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	return 1;
 800128c:	2301      	movs	r3, #1
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_kill>:

int _kill(int pid, int sig)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800129e:	f002 ffd1 	bl	8004244 <__errno>
 80012a2:	0003      	movs	r3, r0
 80012a4:	2216      	movs	r2, #22
 80012a6:	601a      	str	r2, [r3, #0]
	return -1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	425b      	negs	r3, r3
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_exit>:

void _exit (int status)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012bc:	2301      	movs	r3, #1
 80012be:	425a      	negs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ffe5 	bl	8001294 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ca:	e7fe      	b.n	80012ca <_exit+0x16>

080012cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00a      	b.n	80012f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012de:	e000      	b.n	80012e2 <_read+0x16>
 80012e0:	bf00      	nop
 80012e2:	0001      	movs	r1, r0
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	60ba      	str	r2, [r7, #8]
 80012ea:	b2ca      	uxtb	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbf0      	blt.n	80012de <_read+0x12>
	}

return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b006      	add	sp, #24
 8001304:	bd80      	pop	{r7, pc}

08001306 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e009      	b.n	800132c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	0018      	movs	r0, r3
 8001322:	e000      	b.n	8001326 <_write+0x20>
 8001324:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	429a      	cmp	r2, r3
 8001332:	dbf1      	blt.n	8001318 <_write+0x12>
	}
	return len;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b006      	add	sp, #24
 800133c:	bd80      	pop	{r7, pc}

0800133e <_close>:

int _close(int file)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	return -1;
 8001346:	2301      	movs	r3, #1
 8001348:	425b      	negs	r3, r3
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}

08001352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	0192      	lsls	r2, r2, #6
 8001362:	605a      	str	r2, [r3, #4]
	return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b002      	add	sp, #8
 800136c:	bd80      	pop	{r7, pc}

0800136e <_isatty>:

int _isatty(int file)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	return 1;
 8001376:	2301      	movs	r3, #1
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}

08001380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	18d3      	adds	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f002 ff3c 	bl	8004244 <__errno>
 80013cc:	0003      	movs	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	425b      	negs	r3, r3
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	18d2      	adds	r2, r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b006      	add	sp, #24
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20002000 	.word	0x20002000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	200004c8 	.word	0x200004c8
 8001400:	200004e0 	.word	0x200004e0

08001404 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001412:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001414:	f7ff fff6 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <LoopForever+0x6>)
  ldr r1, =_edata
 800141a:	490d      	ldr	r1, [pc, #52]	; (8001450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <LoopForever+0xe>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001430:	4c0a      	ldr	r4, [pc, #40]	; (800145c <LoopForever+0x16>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800143e:	f002 ff07 	bl	8004250 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001442:	f7ff f8fd 	bl	8000640 <main>

08001446 <LoopForever>:

LoopForever:
  b LoopForever
 8001446:	e7fe      	b.n	8001446 <LoopForever>
  ldr   r0, =_estack
 8001448:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001454:	08005c04 	.word	0x08005c04
  ldr r2, =_sbss
 8001458:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800145c:	200004e0 	.word	0x200004e0

08001460 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_IRQHandler>
	...

08001464 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_Init+0x3c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_Init+0x3c>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	0049      	lsls	r1, r1, #1
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f810 	bl	80014a4 <HAL_InitTick>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d003      	beq.n	8001490 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	e001      	b.n	8001494 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fdac 	bl	8000fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_InitTick+0x88>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d02b      	beq.n	8001514 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <HAL_InitTick+0x8c>)
 80014be:	681c      	ldr	r4, [r3, #0]
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_InitTick+0x88>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	0019      	movs	r1, r3
 80014c6:	23fa      	movs	r3, #250	; 0xfa
 80014c8:	0098      	lsls	r0, r3, #2
 80014ca:	f7fe fe2d 	bl	8000128 <__udivsi3>
 80014ce:	0003      	movs	r3, r0
 80014d0:	0019      	movs	r1, r3
 80014d2:	0020      	movs	r0, r4
 80014d4:	f7fe fe28 	bl	8000128 <__udivsi3>
 80014d8:	0003      	movs	r3, r0
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 f919 	bl	8001712 <HAL_SYSTICK_Config>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d112      	bne.n	800150a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d80a      	bhi.n	8001500 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	2301      	movs	r3, #1
 80014ee:	425b      	negs	r3, r3
 80014f0:	2200      	movs	r2, #0
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 f8e8 	bl	80016c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_InitTick+0x90>)
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e00d      	b.n	800151c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001500:	230f      	movs	r3, #15
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e008      	b.n	800151c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800150a:	230f      	movs	r3, #15
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e003      	b.n	800151c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001514:	230f      	movs	r3, #15
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800151c:	230f      	movs	r3, #15
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	781b      	ldrb	r3, [r3, #0]
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b005      	add	sp, #20
 8001528:	bd90      	pop	{r4, r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	20000098 	.word	0x20000098
 8001530:	20000090 	.word	0x20000090
 8001534:	20000094 	.word	0x20000094

08001538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x1c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	001a      	movs	r2, r3
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_IncTick+0x20>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	18d2      	adds	r2, r2, r3
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_IncTick+0x20>)
 800154a:	601a      	str	r2, [r3, #0]
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	20000098 	.word	0x20000098
 8001558:	200004cc 	.word	0x200004cc

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <HAL_GetTick+0x10>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	200004cc 	.word	0x200004cc

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b7f      	cmp	r3, #127	; 0x7f
 8001582:	d809      	bhi.n	8001598 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	001a      	movs	r2, r3
 800158a:	231f      	movs	r3, #31
 800158c:	401a      	ands	r2, r3
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_EnableIRQ+0x30>)
 8001590:	2101      	movs	r1, #1
 8001592:	4091      	lsls	r1, r2
 8001594:	000a      	movs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	0002      	movs	r2, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d828      	bhi.n	800160c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ba:	4a2f      	ldr	r2, [pc, #188]	; (8001678 <__NVIC_SetPriority+0xd4>)
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	33c0      	adds	r3, #192	; 0xc0
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	589b      	ldr	r3, [r3, r2]
 80015ca:	1dfa      	adds	r2, r7, #7
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	0011      	movs	r1, r2
 80015d0:	2203      	movs	r2, #3
 80015d2:	400a      	ands	r2, r1
 80015d4:	00d2      	lsls	r2, r2, #3
 80015d6:	21ff      	movs	r1, #255	; 0xff
 80015d8:	4091      	lsls	r1, r2
 80015da:	000a      	movs	r2, r1
 80015dc:	43d2      	mvns	r2, r2
 80015de:	401a      	ands	r2, r3
 80015e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	019b      	lsls	r3, r3, #6
 80015e6:	22ff      	movs	r2, #255	; 0xff
 80015e8:	401a      	ands	r2, r3
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	0018      	movs	r0, r3
 80015f0:	2303      	movs	r3, #3
 80015f2:	4003      	ands	r3, r0
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f8:	481f      	ldr	r0, [pc, #124]	; (8001678 <__NVIC_SetPriority+0xd4>)
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	430a      	orrs	r2, r1
 8001604:	33c0      	adds	r3, #192	; 0xc0
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800160a:	e031      	b.n	8001670 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <__NVIC_SetPriority+0xd8>)
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	0019      	movs	r1, r3
 8001614:	230f      	movs	r3, #15
 8001616:	400b      	ands	r3, r1
 8001618:	3b08      	subs	r3, #8
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3306      	adds	r3, #6
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	18d3      	adds	r3, r2, r3
 8001622:	3304      	adds	r3, #4
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	1dfa      	adds	r2, r7, #7
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	0011      	movs	r1, r2
 800162c:	2203      	movs	r2, #3
 800162e:	400a      	ands	r2, r1
 8001630:	00d2      	lsls	r2, r2, #3
 8001632:	21ff      	movs	r1, #255	; 0xff
 8001634:	4091      	lsls	r1, r2
 8001636:	000a      	movs	r2, r1
 8001638:	43d2      	mvns	r2, r2
 800163a:	401a      	ands	r2, r3
 800163c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	22ff      	movs	r2, #255	; 0xff
 8001644:	401a      	ands	r2, r3
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	0018      	movs	r0, r3
 800164c:	2303      	movs	r3, #3
 800164e:	4003      	ands	r3, r0
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <__NVIC_SetPriority+0xd8>)
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	001c      	movs	r4, r3
 800165c:	230f      	movs	r3, #15
 800165e:	4023      	ands	r3, r4
 8001660:	3b08      	subs	r3, #8
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	430a      	orrs	r2, r1
 8001666:	3306      	adds	r3, #6
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	18c3      	adds	r3, r0, r3
 800166c:	3304      	adds	r3, #4
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b003      	add	sp, #12
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	1e5a      	subs	r2, r3, #1
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	045b      	lsls	r3, r3, #17
 8001690:	429a      	cmp	r2, r3
 8001692:	d301      	bcc.n	8001698 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001694:	2301      	movs	r3, #1
 8001696:	e010      	b.n	80016ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <SysTick_Config+0x44>)
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	3a01      	subs	r2, #1
 800169e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a0:	2301      	movs	r3, #1
 80016a2:	425b      	negs	r3, r3
 80016a4:	2103      	movs	r1, #3
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff ff7c 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x44>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x44>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	210f      	movs	r1, #15
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	1c02      	adds	r2, r0, #0
 80016d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	0011      	movs	r1, r2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <__NVIC_SetPriority>
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b004      	add	sp, #16
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	0002      	movs	r2, r0
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b25b      	sxtb	r3, r3
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff ff33 	bl	8001570 <__NVIC_EnableIRQ>
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff ffaf 	bl	8001680 <SysTick_Config>
 8001722:	0003      	movs	r3, r0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e050      	b.n	80017e0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2225      	movs	r2, #37	; 0x25
 8001742:	5c9b      	ldrb	r3, [r3, r2]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d008      	beq.n	800175c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2204      	movs	r2, #4
 800174e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	2100      	movs	r1, #0
 8001756:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e041      	b.n	80017e0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	210e      	movs	r1, #14
 8001768:	438a      	bics	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	491c      	ldr	r1, [pc, #112]	; (80017e8 <HAL_DMA_Abort+0xbc>)
 8001778:	400a      	ands	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2101      	movs	r1, #1
 8001788:	438a      	bics	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_DMA_Abort+0xc0>)
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	221c      	movs	r2, #28
 8001796:	4013      	ands	r3, r2
 8001798:	2201      	movs	r2, #1
 800179a:	409a      	lsls	r2, r3
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_DMA_Abort+0xc0>)
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00c      	beq.n	80017ce <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017be:	490a      	ldr	r1, [pc, #40]	; (80017e8 <HAL_DMA_Abort+0xbc>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2225      	movs	r2, #37	; 0x25
 80017d2:	2101      	movs	r1, #1
 80017d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2224      	movs	r2, #36	; 0x24
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	fffffeff 	.word	0xfffffeff
 80017ec:	40020000 	.word	0x40020000

080017f0 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e147      	b.n	8001aa4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4091      	lsls	r1, r2
 800181e:	000a      	movs	r2, r1
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d100      	bne.n	800182c <HAL_GPIO_Init+0x28>
 800182a:	e138      	b.n	8001a9e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
 8001834:	2b01      	cmp	r3, #1
 8001836:	d005      	beq.n	8001844 <HAL_GPIO_Init+0x40>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2203      	movs	r2, #3
 800183e:	4013      	ands	r3, r2
 8001840:	2b02      	cmp	r3, #2
 8001842:	d130      	bne.n	80018a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	409a      	lsls	r2, r3
 8001852:	0013      	movs	r3, r2
 8001854:	43da      	mvns	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	409a      	lsls	r2, r3
 8001866:	0013      	movs	r3, r2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800187a:	2201      	movs	r2, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
 8001880:	0013      	movs	r3, r2
 8001882:	43da      	mvns	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	2201      	movs	r2, #1
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d017      	beq.n	80018e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	409a      	lsls	r2, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	43da      	mvns	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2203      	movs	r2, #3
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d123      	bne.n	8001936 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	08da      	lsrs	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3208      	adds	r2, #8
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	58d3      	ldr	r3, [r2, r3]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2207      	movs	r2, #7
 8001900:	4013      	ands	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2107      	movs	r1, #7
 800191a:	400b      	ands	r3, r1
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	08da      	lsrs	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3208      	adds	r2, #8
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	6939      	ldr	r1, [r7, #16]
 8001934:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	43da      	mvns	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2203      	movs	r2, #3
 8001954:	401a      	ands	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	029b      	lsls	r3, r3, #10
 8001972:	4013      	ands	r3, r2
 8001974:	d100      	bne.n	8001978 <HAL_GPIO_Init+0x174>
 8001976:	e092      	b.n	8001a9e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001978:	4a50      	ldr	r2, [pc, #320]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3318      	adds	r3, #24
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	589b      	ldr	r3, [r3, r2]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2203      	movs	r2, #3
 800198a:	4013      	ands	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	220f      	movs	r2, #15
 8001990:	409a      	lsls	r2, r3
 8001992:	0013      	movs	r3, r2
 8001994:	43da      	mvns	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	23a0      	movs	r3, #160	; 0xa0
 80019a0:	05db      	lsls	r3, r3, #23
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d013      	beq.n	80019ce <HAL_GPIO_Init+0x1ca>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a45      	ldr	r2, [pc, #276]	; (8001ac0 <HAL_GPIO_Init+0x2bc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00d      	beq.n	80019ca <HAL_GPIO_Init+0x1c6>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a44      	ldr	r2, [pc, #272]	; (8001ac4 <HAL_GPIO_Init+0x2c0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d007      	beq.n	80019c6 <HAL_GPIO_Init+0x1c2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <HAL_GPIO_Init+0x2c4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_GPIO_Init+0x1be>
 80019be:	2303      	movs	r3, #3
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x1cc>
 80019c2:	2305      	movs	r3, #5
 80019c4:	e004      	b.n	80019d0 <HAL_GPIO_Init+0x1cc>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_Init+0x1cc>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x1cc>
 80019ce:	2300      	movs	r3, #0
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	2103      	movs	r1, #3
 80019d4:	400a      	ands	r2, r1
 80019d6:	00d2      	lsls	r2, r2, #3
 80019d8:	4093      	lsls	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80019e0:	4936      	ldr	r1, [pc, #216]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3318      	adds	r3, #24
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ee:	4b33      	ldr	r3, [pc, #204]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43da      	mvns	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	035b      	lsls	r3, r3, #13
 8001a06:	4013      	ands	r3, r2
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a12:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43da      	mvns	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	039b      	lsls	r3, r3, #14
 8001a30:	4013      	ands	r3, r2
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001a44:	2384      	movs	r3, #132	; 0x84
 8001a46:	58d3      	ldr	r3, [r2, r3]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	029b      	lsls	r3, r3, #10
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a68:	4914      	ldr	r1, [pc, #80]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001a6a:	2284      	movs	r2, #132	; 0x84
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	58d3      	ldr	r3, [r2, r3]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	025b      	lsls	r3, r3, #9
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a96:	4909      	ldr	r1, [pc, #36]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	40da      	lsrs	r2, r3
 8001aac:	1e13      	subs	r3, r2, #0
 8001aae:	d000      	beq.n	8001ab2 <HAL_GPIO_Init+0x2ae>
 8001ab0:	e6b0      	b.n	8001814 <HAL_GPIO_Init+0x10>
  }
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b006      	add	sp, #24
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021800 	.word	0x40021800
 8001ac0:	50000400 	.word	0x50000400
 8001ac4:	50000800 	.word	0x50000800
 8001ac8:	50000c00 	.word	0x50000c00

08001acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	0008      	movs	r0, r1
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	1cbb      	adds	r3, r7, #2
 8001ada:	1c02      	adds	r2, r0, #0
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	1c7b      	adds	r3, r7, #1
 8001ae0:	1c0a      	adds	r2, r1, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae4:	1c7b      	adds	r3, r7, #1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aec:	1cbb      	adds	r3, r7, #2
 8001aee:	881a      	ldrh	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e003      	b.n	8001afe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	1cbb      	adds	r3, r7, #2
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	0049      	lsls	r1, r1, #1
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40007000 	.word	0x40007000

08001b24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d11f      	bne.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	189b      	adds	r3, r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4912      	ldr	r1, [pc, #72]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7fe fae6 	bl	8000128 <__udivsi3>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	3301      	adds	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b62:	e008      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e001      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e009      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d0ed      	beq.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	40007000 	.word	0x40007000
 8001b98:	fffff9ff 	.word	0xfffff9ff
 8001b9c:	20000090 	.word	0x20000090
 8001ba0:	000f4240 	.word	0x000f4240

08001ba4 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2207      	movs	r2, #7
 8001bae:	4393      	bics	r3, r2
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8001bc6:	bf30      	wfi
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <LL_RCC_GetAPB1Prescaler+0x14>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	23e0      	movs	r3, #224	; 0xe0
 8001be2:	01db      	lsls	r3, r3, #7
 8001be4:	4013      	ands	r3, r2
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e2fe      	b.n	8002200 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2201      	movs	r2, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d100      	bne.n	8001c0e <HAL_RCC_OscConfig+0x1e>
 8001c0c:	e07c      	b.n	8001d08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4bc3      	ldr	r3, [pc, #780]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2238      	movs	r2, #56	; 0x38
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	4bc0      	ldr	r3, [pc, #768]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4013      	ands	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b10      	cmp	r3, #16
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3e>
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d002      	beq.n	8001c34 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4bb9      	ldr	r3, [pc, #740]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	029b      	lsls	r3, r3, #10
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d062      	beq.n	8001d06 <HAL_RCC_OscConfig+0x116>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d15e      	bne.n	8001d06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e2d9      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_OscConfig+0x78>
 8001c58:	4bb0      	ldr	r3, [pc, #704]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4baf      	ldr	r3, [pc, #700]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	0249      	lsls	r1, r1, #9
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e020      	b.n	8001caa <HAL_RCC_OscConfig+0xba>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	23a0      	movs	r3, #160	; 0xa0
 8001c6e:	02db      	lsls	r3, r3, #11
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d10e      	bne.n	8001c92 <HAL_RCC_OscConfig+0xa2>
 8001c74:	4ba9      	ldr	r3, [pc, #676]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	02c9      	lsls	r1, r1, #11
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	4ba6      	ldr	r3, [pc, #664]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4ba5      	ldr	r3, [pc, #660]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	0249      	lsls	r1, r1, #9
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e00b      	b.n	8001caa <HAL_RCC_OscConfig+0xba>
 8001c92:	4ba2      	ldr	r3, [pc, #648]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4ba1      	ldr	r3, [pc, #644]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001c98:	49a1      	ldr	r1, [pc, #644]	; (8001f20 <HAL_RCC_OscConfig+0x330>)
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	4b9f      	ldr	r3, [pc, #636]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b9e      	ldr	r3, [pc, #632]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	499f      	ldr	r1, [pc, #636]	; (8001f24 <HAL_RCC_OscConfig+0x334>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d014      	beq.n	8001cdc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fc53 	bl	800155c <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff fc4e 	bl	800155c <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e298      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cce:	4b93      	ldr	r3, [pc, #588]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	029b      	lsls	r3, r3, #10
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0xcc>
 8001cda:	e015      	b.n	8001d08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fc3e 	bl	800155c <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce6:	f7ff fc39 	bl	800155c <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b64      	cmp	r3, #100	; 0x64
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e283      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cf8:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	029b      	lsls	r3, r3, #10
 8001d00:	4013      	ands	r3, r2
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0xf6>
 8001d04:	e000      	b.n	8001d08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d100      	bne.n	8001d14 <HAL_RCC_OscConfig+0x124>
 8001d12:	e099      	b.n	8001e48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d14:	4b81      	ldr	r3, [pc, #516]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2238      	movs	r2, #56	; 0x38
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d1e:	4b7f      	ldr	r3, [pc, #508]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2203      	movs	r2, #3
 8001d24:	4013      	ands	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d102      	bne.n	8001d34 <HAL_RCC_OscConfig+0x144>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d002      	beq.n	8001d3a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d135      	bne.n	8001da6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3a:	4b78      	ldr	r3, [pc, #480]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4013      	ands	r3, r2
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x162>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e256      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4a74      	ldr	r2, [pc, #464]	; (8001f28 <HAL_RCC_OscConfig+0x338>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	021a      	lsls	r2, r3, #8
 8001d62:	4b6e      	ldr	r3, [pc, #440]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d64:	430a      	orrs	r2, r1
 8001d66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d112      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d6e:	4b6b      	ldr	r3, [pc, #428]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x33c>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d82:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0adb      	lsrs	r3, r3, #11
 8001d88:	2207      	movs	r2, #7
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	4a68      	ldr	r2, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x340>)
 8001d8e:	40da      	lsrs	r2, r3
 8001d90:	4b68      	ldr	r3, [pc, #416]	; (8001f34 <HAL_RCC_OscConfig+0x344>)
 8001d92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_OscConfig+0x348>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff fb83 	bl	80014a4 <HAL_InitTick>
 8001d9e:	1e03      	subs	r3, r0, #0
 8001da0:	d051      	beq.n	8001e46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e22c      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d030      	beq.n	8001e10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001dae:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <HAL_RCC_OscConfig+0x33c>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	4b57      	ldr	r3, [pc, #348]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001dc2:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001dc8:	2180      	movs	r1, #128	; 0x80
 8001dca:	0049      	lsls	r1, r1, #1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fbc4 	bl	800155c <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff fbbf 	bl	800155c <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e209      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4013      	ands	r3, r2
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a4a      	ldr	r2, [pc, #296]	; (8001f28 <HAL_RCC_OscConfig+0x338>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	021a      	lsls	r2, r3, #8
 8001e08:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	e01b      	b.n	8001e48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001e10:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e16:	4949      	ldr	r1, [pc, #292]	; (8001f3c <HAL_RCC_OscConfig+0x34c>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fb9e 	bl	800155c <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff fb99 	bl	800155c <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1e3      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e38:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4013      	ands	r3, r2
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x236>
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d047      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e52:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2238      	movs	r2, #56	; 0x38
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b18      	cmp	r3, #24
 8001e5c:	d10a      	bne.n	8001e74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	2202      	movs	r2, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d03c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2f2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d138      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e1c5      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d019      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e80:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	430a      	orrs	r2, r1
 8001e86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff fb68 	bl	800155c <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff fb63 	bl	800155c <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1ad      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d0f1      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2a2>
 8001eae:	e018      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	438a      	bics	r2, r1
 8001eba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fb4e 	bl	800155c <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec6:	f7ff fb49 	bl	800155c <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e193      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001edc:	2202      	movs	r2, #2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d1f1      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x2fe>
 8001eec:	e0c6      	b.n	800207c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	231f      	movs	r3, #31
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2238      	movs	r2, #56	; 0x38
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d11e      	bne.n	8001f40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_OscConfig+0x32c>)
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d100      	bne.n	8001f0e <HAL_RCC_OscConfig+0x31e>
 8001f0c:	e0b6      	b.n	800207c <HAL_RCC_OscConfig+0x48c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d000      	beq.n	8001f18 <HAL_RCC_OscConfig+0x328>
 8001f16:	e0b1      	b.n	800207c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e171      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	fffeffff 	.word	0xfffeffff
 8001f24:	fffbffff 	.word	0xfffbffff
 8001f28:	ffff80ff 	.word	0xffff80ff
 8001f2c:	ffffc7ff 	.word	0xffffc7ff
 8001f30:	00f42400 	.word	0x00f42400
 8001f34:	20000090 	.word	0x20000090
 8001f38:	20000094 	.word	0x20000094
 8001f3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f40:	4bb1      	ldr	r3, [pc, #708]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x360>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x362>
 8001f50:	2300      	movs	r3, #0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d011      	beq.n	8001f7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4bac      	ldr	r3, [pc, #688]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f5a:	4bab      	ldr	r3, [pc, #684]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	0549      	lsls	r1, r1, #21
 8001f60:	430a      	orrs	r2, r1
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f64:	4ba8      	ldr	r3, [pc, #672]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	055b      	lsls	r3, r3, #21
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f72:	231f      	movs	r3, #31
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7a:	4ba4      	ldr	r3, [pc, #656]	; (800220c <HAL_RCC_OscConfig+0x61c>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f86:	4ba1      	ldr	r3, [pc, #644]	; (800220c <HAL_RCC_OscConfig+0x61c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4ba0      	ldr	r3, [pc, #640]	; (800220c <HAL_RCC_OscConfig+0x61c>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	0049      	lsls	r1, r1, #1
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fae2 	bl	800155c <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7ff fadd 	bl	800155c <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e127      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb0:	4b96      	ldr	r3, [pc, #600]	; (800220c <HAL_RCC_OscConfig+0x61c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3e2>
 8001fc4:	4b90      	ldr	r3, [pc, #576]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001fc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fc8:	4b8f      	ldr	r3, [pc, #572]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fd0:	e01c      	b.n	800200c <HAL_RCC_OscConfig+0x41c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x404>
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001fdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fde:	4b8a      	ldr	r3, [pc, #552]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fe6:	4b88      	ldr	r3, [pc, #544]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001fe8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fea:	4b87      	ldr	r3, [pc, #540]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0x41c>
 8001ff4:	4b84      	ldr	r3, [pc, #528]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff8:	4b83      	ldr	r3, [pc, #524]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002000:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002004:	4b80      	ldr	r3, [pc, #512]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002006:	2104      	movs	r1, #4
 8002008:	438a      	bics	r2, r1
 800200a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d014      	beq.n	800203e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7ff faa2 	bl	800155c <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201c:	e009      	b.n	8002032 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fa9d 	bl	800155c <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	4a79      	ldr	r2, [pc, #484]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0e6      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002032:	4b75      	ldr	r3, [pc, #468]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x42e>
 800203c:	e013      	b.n	8002066 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7ff fa8d 	bl	800155c <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002046:	e009      	b.n	800205c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7ff fa88 	bl	800155c <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	4a6f      	ldr	r2, [pc, #444]	; (8002210 <HAL_RCC_OscConfig+0x620>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0d1      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	2202      	movs	r2, #2
 8002062:	4013      	ands	r3, r2
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002066:	231f      	movs	r3, #31
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d105      	bne.n	800207c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002070:	4b65      	ldr	r3, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002074:	4b64      	ldr	r3, [pc, #400]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002076:	4967      	ldr	r1, [pc, #412]	; (8002214 <HAL_RCC_OscConfig+0x624>)
 8002078:	400a      	ands	r2, r1
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d100      	bne.n	8002086 <HAL_RCC_OscConfig+0x496>
 8002084:	e0bb      	b.n	80021fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002086:	4b60      	ldr	r3, [pc, #384]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2238      	movs	r2, #56	; 0x38
 800208c:	4013      	ands	r3, r2
 800208e:	2b10      	cmp	r3, #16
 8002090:	d100      	bne.n	8002094 <HAL_RCC_OscConfig+0x4a4>
 8002092:	e07b      	b.n	800218c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d156      	bne.n	800214a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209c:	4b5a      	ldr	r3, [pc, #360]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 80020a2:	495d      	ldr	r1, [pc, #372]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7ff fa58 	bl	800155c <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff fa53 	bl	800155c <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e09d      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	049b      	lsls	r3, r3, #18
 80020cc:	4013      	ands	r3, r2
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d0:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_RCC_OscConfig+0x62c>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	431a      	orrs	r2, r3
 80020fe:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002100:	430a      	orrs	r2, r1
 8002102:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002104:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	0449      	lsls	r1, r1, #17
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	0549      	lsls	r1, r1, #21
 800211c:	430a      	orrs	r2, r1
 800211e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff fa1c 	bl	800155c <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff fa17 	bl	800155c <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e061      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213c:	4b32      	ldr	r3, [pc, #200]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	049b      	lsls	r3, r3, #18
 8002144:	4013      	ands	r3, r2
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x53a>
 8002148:	e059      	b.n	80021fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002150:	4931      	ldr	r1, [pc, #196]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8002152:	400a      	ands	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7ff fa01 	bl	800155c <HAL_GetTick>
 800215a:	0003      	movs	r3, r0
 800215c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff f9fc 	bl	800155c <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e046      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	049b      	lsls	r3, r3, #18
 800217a:	4013      	ands	r3, r2
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 8002184:	4926      	ldr	r1, [pc, #152]	; (8002220 <HAL_RCC_OscConfig+0x630>)
 8002186:	400a      	ands	r2, r1
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	e038      	b.n	80021fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e033      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x618>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2203      	movs	r2, #3
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d126      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2270      	movs	r2, #112	; 0x70
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d11f      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	23fe      	movs	r3, #254	; 0xfe
 80021be:	01db      	lsls	r3, r3, #7
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d116      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	23f8      	movs	r3, #248	; 0xf8
 80021d0:	039b      	lsls	r3, r3, #14
 80021d2:	401a      	ands	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10e      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	23e0      	movs	r3, #224	; 0xe0
 80021e0:	051b      	lsls	r3, r3, #20
 80021e2:	401a      	ands	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	0f5b      	lsrs	r3, r3, #29
 80021f0:	075a      	lsls	r2, r3, #29
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b008      	add	sp, #32
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
 8002210:	00001388 	.word	0x00001388
 8002214:	efffffff 	.word	0xefffffff
 8002218:	feffffff 	.word	0xfeffffff
 800221c:	11c1808c 	.word	0x11c1808c
 8002220:	eefefffc 	.word	0xeefefffc

08002224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0e9      	b.n	800240c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b76      	ldr	r3, [pc, #472]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2207      	movs	r2, #7
 800223e:	4013      	ands	r3, r2
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d91e      	bls.n	8002284 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b73      	ldr	r3, [pc, #460]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2207      	movs	r2, #7
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	4b70      	ldr	r3, [pc, #448]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002258:	f7ff f980 	bl	800155c <HAL_GetTick>
 800225c:	0003      	movs	r3, r0
 800225e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002260:	e009      	b.n	8002276 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002262:	f7ff f97b 	bl	800155c <HAL_GetTick>
 8002266:	0002      	movs	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	4a6a      	ldr	r2, [pc, #424]	; (8002418 <HAL_RCC_ClockConfig+0x1f4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0ca      	b.n	800240c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002276:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2207      	movs	r2, #7
 800227c:	4013      	ands	r3, r2
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2202      	movs	r2, #2
 800228a:	4013      	ands	r3, r2
 800228c:	d015      	beq.n	80022ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2204      	movs	r2, #4
 8002294:	4013      	ands	r3, r2
 8002296:	d006      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002298:	4b60      	ldr	r3, [pc, #384]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 800229e:	21e0      	movs	r1, #224	; 0xe0
 80022a0:	01c9      	lsls	r1, r1, #7
 80022a2:	430a      	orrs	r2, r1
 80022a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a6:	4b5d      	ldr	r3, [pc, #372]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4a5d      	ldr	r2, [pc, #372]	; (8002420 <HAL_RCC_ClockConfig+0x1fc>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2201      	movs	r2, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	d057      	beq.n	8002374 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	029b      	lsls	r3, r3, #10
 80022d4:	4013      	ands	r3, r2
 80022d6:	d12b      	bne.n	8002330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e097      	b.n	800240c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e4:	4b4d      	ldr	r3, [pc, #308]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	049b      	lsls	r3, r3, #18
 80022ec:	4013      	ands	r3, r2
 80022ee:	d11f      	bne.n	8002330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e08b      	b.n	800240c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fc:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4013      	ands	r3, r2
 8002306:	d113      	bne.n	8002330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e07f      	b.n	800240c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d106      	bne.n	8002322 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002314:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 8002316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002318:	2202      	movs	r2, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d108      	bne.n	8002330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e074      	b.n	800240c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e06d      	b.n	800240c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002330:	4b3a      	ldr	r3, [pc, #232]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2207      	movs	r2, #7
 8002336:	4393      	bics	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 8002340:	430a      	orrs	r2, r1
 8002342:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7ff f90a 	bl	800155c <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234c:	e009      	b.n	8002362 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234e:	f7ff f905 	bl	800155c <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <HAL_RCC_ClockConfig+0x1f4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e054      	b.n	800240c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2238      	movs	r2, #56	; 0x38
 8002368:	401a      	ands	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	429a      	cmp	r2, r3
 8002372:	d1ec      	bne.n	800234e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2207      	movs	r2, #7
 800237a:	4013      	ands	r3, r2
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d21e      	bcs.n	80023c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2207      	movs	r2, #7
 8002388:	4393      	bics	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002394:	f7ff f8e2 	bl	800155c <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800239c:	e009      	b.n	80023b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239e:	f7ff f8dd 	bl	800155c <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <HAL_RCC_ClockConfig+0x1f4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e02c      	b.n	800240c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2207      	movs	r2, #7
 80023b8:	4013      	ands	r3, r2
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1ee      	bne.n	800239e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2204      	movs	r2, #4
 80023c6:	4013      	ands	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_RCC_ClockConfig+0x200>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023de:	f000 f829 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023e2:	0001      	movs	r1, r0
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	220f      	movs	r2, #15
 80023ec:	401a      	ands	r2, r3
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_RCC_ClockConfig+0x204>)
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	58d3      	ldr	r3, [r2, r3]
 80023f4:	221f      	movs	r2, #31
 80023f6:	4013      	ands	r3, r2
 80023f8:	000a      	movs	r2, r1
 80023fa:	40da      	lsrs	r2, r3
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_ClockConfig+0x208>)
 80023fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_ClockConfig+0x20c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff f84d 	bl	80014a4 <HAL_InitTick>
 800240a:	0003      	movs	r3, r0
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40022000 	.word	0x40022000
 8002418:	00001388 	.word	0x00001388
 800241c:	40021000 	.word	0x40021000
 8002420:	fffff0ff 	.word	0xfffff0ff
 8002424:	ffff8fff 	.word	0xffff8fff
 8002428:	08005a24 	.word	0x08005a24
 800242c:	20000090 	.word	0x20000090
 8002430:	20000094 	.word	0x20000094

08002434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243a:	4b3c      	ldr	r3, [pc, #240]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2238      	movs	r2, #56	; 0x38
 8002440:	4013      	ands	r3, r2
 8002442:	d10f      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002444:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0adb      	lsrs	r3, r3, #11
 800244a:	2207      	movs	r2, #7
 800244c:	4013      	ands	r3, r2
 800244e:	2201      	movs	r2, #1
 8002450:	409a      	lsls	r2, r3
 8002452:	0013      	movs	r3, r2
 8002454:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	4835      	ldr	r0, [pc, #212]	; (8002530 <HAL_RCC_GetSysClockFreq+0xfc>)
 800245a:	f7fd fe65 	bl	8000128 <__udivsi3>
 800245e:	0003      	movs	r3, r0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	e05d      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002464:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2238      	movs	r2, #56	; 0x38
 800246a:	4013      	ands	r3, r2
 800246c:	2b08      	cmp	r3, #8
 800246e:	d102      	bne.n	8002476 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_RCC_GetSysClockFreq+0x100>)
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	e054      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2238      	movs	r2, #56	; 0x38
 800247c:	4013      	ands	r3, r2
 800247e:	2b10      	cmp	r3, #16
 8002480:	d138      	bne.n	80024f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2203      	movs	r2, #3
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	2207      	movs	r2, #7
 8002494:	4013      	ands	r3, r2
 8002496:	3301      	adds	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d10d      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	4824      	ldr	r0, [pc, #144]	; (8002534 <HAL_RCC_GetSysClockFreq+0x100>)
 80024a4:	f7fd fe40 	bl	8000128 <__udivsi3>
 80024a8:	0003      	movs	r3, r0
 80024aa:	0019      	movs	r1, r3
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	227f      	movs	r2, #127	; 0x7f
 80024b4:	4013      	ands	r3, r2
 80024b6:	434b      	muls	r3, r1
 80024b8:	617b      	str	r3, [r7, #20]
        break;
 80024ba:	e00d      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	481c      	ldr	r0, [pc, #112]	; (8002530 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024c0:	f7fd fe32 	bl	8000128 <__udivsi3>
 80024c4:	0003      	movs	r3, r0
 80024c6:	0019      	movs	r1, r3
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	227f      	movs	r2, #127	; 0x7f
 80024d0:	4013      	ands	r3, r2
 80024d2:	434b      	muls	r3, r1
 80024d4:	617b      	str	r3, [r7, #20]
        break;
 80024d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0f5b      	lsrs	r3, r3, #29
 80024de:	2207      	movs	r2, #7
 80024e0:	4013      	ands	r3, r2
 80024e2:	3301      	adds	r3, #1
 80024e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7fd fe1d 	bl	8000128 <__udivsi3>
 80024ee:	0003      	movs	r3, r0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	e015      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2238      	movs	r2, #56	; 0x38
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d103      	bne.n	8002508 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_RCC_GetSysClockFreq+0xf8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2238      	movs	r2, #56	; 0x38
 800250e:	4013      	ands	r3, r2
 8002510:	2b18      	cmp	r3, #24
 8002512:	d103      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002514:	23fa      	movs	r3, #250	; 0xfa
 8002516:	01db      	lsls	r3, r3, #7
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	e001      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002520:	693b      	ldr	r3, [r7, #16]
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b006      	add	sp, #24
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40021000 	.word	0x40021000
 8002530:	00f42400 	.word	0x00f42400
 8002534:	007a1200 	.word	0x007a1200

08002538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b02      	ldr	r3, [pc, #8]	; (8002548 <HAL_RCC_GetHCLKFreq+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	20000090 	.word	0x20000090

0800254c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800254c:	b5b0      	push	{r4, r5, r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002550:	f7ff fff2 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002554:	0004      	movs	r4, r0
 8002556:	f7ff fb3f 	bl	8001bd8 <LL_RCC_GetAPB1Prescaler>
 800255a:	0003      	movs	r3, r0
 800255c:	0b1a      	lsrs	r2, r3, #12
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002560:	0092      	lsls	r2, r2, #2
 8002562:	58d3      	ldr	r3, [r2, r3]
 8002564:	221f      	movs	r2, #31
 8002566:	4013      	ands	r3, r2
 8002568:	40dc      	lsrs	r4, r3
 800256a:	0023      	movs	r3, r4
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	bdb0      	pop	{r4, r5, r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	08005a64 	.word	0x08005a64

08002578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002580:	2313      	movs	r3, #19
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002588:	2312      	movs	r3, #18
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	029b      	lsls	r3, r3, #10
 8002598:	4013      	ands	r3, r2
 800259a:	d100      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800259c:	e0a3      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2011      	movs	r0, #17
 80025a0:	183b      	adds	r3, r7, r0
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4ba5      	ldr	r3, [pc, #660]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	055b      	lsls	r3, r3, #21
 80025ae:	4013      	ands	r3, r2
 80025b0:	d110      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4ba2      	ldr	r3, [pc, #648]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025b6:	4ba1      	ldr	r3, [pc, #644]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	0549      	lsls	r1, r1, #21
 80025bc:	430a      	orrs	r2, r1
 80025be:	63da      	str	r2, [r3, #60]	; 0x3c
 80025c0:	4b9e      	ldr	r3, [pc, #632]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	055b      	lsls	r3, r3, #21
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	183b      	adds	r3, r7, r0
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d4:	4b9a      	ldr	r3, [pc, #616]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b99      	ldr	r3, [pc, #612]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	0049      	lsls	r1, r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e2:	f7fe ffbb 	bl	800155c <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ea:	e00b      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ec:	f7fe ffb6 	bl	800155c <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d904      	bls.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80025fa:	2313      	movs	r3, #19
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2203      	movs	r2, #3
 8002600:	701a      	strb	r2, [r3, #0]
        break;
 8002602:	e005      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002604:	4b8e      	ldr	r3, [pc, #568]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4013      	ands	r3, r2
 800260e:	d0ed      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002610:	2313      	movs	r3, #19
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d154      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800261a:	4b88      	ldr	r3, [pc, #544]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800261c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800261e:	23c0      	movs	r3, #192	; 0xc0
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4013      	ands	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d019      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	429a      	cmp	r2, r3
 8002634:	d014      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002636:	4b81      	ldr	r3, [pc, #516]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	4a82      	ldr	r2, [pc, #520]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800263c:	4013      	ands	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002640:	4b7e      	ldr	r3, [pc, #504]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002642:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002644:	4b7d      	ldr	r3, [pc, #500]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0249      	lsls	r1, r1, #9
 800264a:	430a      	orrs	r2, r1
 800264c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800264e:	4b7b      	ldr	r3, [pc, #492]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002652:	4b7a      	ldr	r3, [pc, #488]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002654:	497c      	ldr	r1, [pc, #496]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002656:	400a      	ands	r2, r1
 8002658:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800265a:	4b78      	ldr	r3, [pc, #480]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d016      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe ff78 	bl	800155c <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002670:	e00c      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe ff73 	bl	800155c <HAL_GetTick>
 8002676:	0002      	movs	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	4a73      	ldr	r2, [pc, #460]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d904      	bls.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002682:	2313      	movs	r3, #19
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2203      	movs	r2, #3
 8002688:	701a      	strb	r2, [r3, #0]
            break;
 800268a:	e004      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268c:	4b6b      	ldr	r3, [pc, #428]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	2202      	movs	r2, #2
 8002692:	4013      	ands	r3, r2
 8002694:	d0ed      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002696:	2313      	movs	r3, #19
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a0:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	4a67      	ldr	r2, [pc, #412]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026b0:	430a      	orrs	r2, r1
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80026b4:	e00c      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b6:	2312      	movs	r3, #18
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2213      	movs	r2, #19
 80026bc:	18ba      	adds	r2, r7, r2
 80026be:	7812      	ldrb	r2, [r2, #0]
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e005      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c4:	2312      	movs	r3, #18
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2213      	movs	r2, #19
 80026ca:	18ba      	adds	r2, r7, r2
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026d0:	2311      	movs	r3, #17
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b58      	ldr	r3, [pc, #352]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026de:	4b57      	ldr	r3, [pc, #348]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026e0:	495b      	ldr	r1, [pc, #364]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d009      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f0:	4b52      	ldr	r3, [pc, #328]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	2203      	movs	r2, #3
 80026f6:	4393      	bics	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002700:	430a      	orrs	r2, r1
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2210      	movs	r2, #16
 800270a:	4013      	ands	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800270e:	4b4b      	ldr	r3, [pc, #300]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800271e:	430a      	orrs	r2, r1
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4013      	ands	r3, r2
 800272c:	d009      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800272e:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	4a49      	ldr	r2, [pc, #292]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002734:	4013      	ands	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800273e:	430a      	orrs	r2, r1
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4013      	ands	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	4a42      	ldr	r2, [pc, #264]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002754:	4013      	ands	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	4b37      	ldr	r3, [pc, #220]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800275e:	430a      	orrs	r2, r1
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2220      	movs	r2, #32
 8002768:	4013      	ands	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800276c:	4b33      	ldr	r3, [pc, #204]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	4a3b      	ldr	r2, [pc, #236]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002772:	4013      	ands	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800277c:	430a      	orrs	r2, r1
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	01db      	lsls	r3, r3, #7
 8002788:	4013      	ands	r3, r2
 800278a:	d015      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	0899      	lsrs	r1, r3, #2
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800279a:	430a      	orrs	r2, r1
 800279c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	05db      	lsls	r3, r3, #23
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0249      	lsls	r1, r1, #9
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	039b      	lsls	r3, r3, #14
 80027c0:	4013      	ands	r3, r2
 80027c2:	d016      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	4a26      	ldr	r2, [pc, #152]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1a      	ldr	r2, [r3, #32]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	03db      	lsls	r3, r3, #15
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d106      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	0449      	lsls	r1, r1, #17
 80027ee:	430a      	orrs	r2, r1
 80027f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	4013      	ands	r3, r2
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	4a19      	ldr	r2, [pc, #100]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002804:	4013      	ands	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800280e:	430a      	orrs	r2, r1
 8002810:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	01db      	lsls	r3, r3, #7
 800281a:	429a      	cmp	r2, r3
 800281c:	d106      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0249      	lsls	r1, r1, #9
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800282c:	2312      	movs	r3, #18
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b006      	add	sp, #24
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	40021000 	.word	0x40021000
 8002840:	40007000 	.word	0x40007000
 8002844:	fffffcff 	.word	0xfffffcff
 8002848:	fffeffff 	.word	0xfffeffff
 800284c:	00001388 	.word	0x00001388
 8002850:	efffffff 	.word	0xefffffff
 8002854:	fffff3ff 	.word	0xfffff3ff
 8002858:	fff3ffff 	.word	0xfff3ffff
 800285c:	ffcfffff 	.word	0xffcfffff
 8002860:	ffffcfff 	.word	0xffffcfff
 8002864:	ffbfffff 	.word	0xffbfffff
 8002868:	ffff3fff 	.word	0xffff3fff

0800286c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800286c:	b5b0      	push	{r4, r5, r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002874:	230f      	movs	r3, #15
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d100      	bne.n	8002884 <HAL_RTC_Init+0x18>
 8002882:	e08c      	b.n	800299e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2229      	movs	r2, #41	; 0x29
 8002888:	5c9b      	ldrb	r3, [r3, r2]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2228      	movs	r2, #40	; 0x28
 8002894:	2100      	movs	r1, #0
 8002896:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2288      	movs	r2, #136	; 0x88
 800289c:	0212      	lsls	r2, r2, #8
 800289e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7fe fbc6 	bl	8001034 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2229      	movs	r2, #41	; 0x29
 80028ac:	2102      	movs	r1, #2
 80028ae:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2210      	movs	r2, #16
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d062      	beq.n	8002984 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	22ca      	movs	r2, #202	; 0xca
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2253      	movs	r2, #83	; 0x53
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80028ce:	250f      	movs	r5, #15
 80028d0:	197c      	adds	r4, r7, r5
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 f892 	bl	80029fe <RTC_EnterInitMode>
 80028da:	0003      	movs	r3, r0
 80028dc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80028de:	0028      	movs	r0, r5
 80028e0:	183b      	adds	r3, r7, r0
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d12c      	bne.n	8002942 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	492e      	ldr	r1, [pc, #184]	; (80029ac <HAL_RTC_Init+0x140>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6999      	ldr	r1, [r3, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6912      	ldr	r2, [r2, #16]
 800291e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6919      	ldr	r1, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	041a      	lsls	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002934:	183c      	adds	r4, r7, r0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f8a3 	bl	8002a84 <RTC_ExitInitMode>
 800293e:	0003      	movs	r3, r0
 8002940:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002942:	230f      	movs	r3, #15
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d116      	bne.n	800297a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	00d2      	lsls	r2, r2, #3
 8002958:	08d2      	lsrs	r2, r2, #3
 800295a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6999      	ldr	r1, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	22ff      	movs	r2, #255	; 0xff
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
 8002982:	e003      	b.n	800298c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002984:	230f      	movs	r3, #15
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800298c:	230f      	movs	r3, #15
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2229      	movs	r2, #41	; 0x29
 800299a:	2101      	movs	r1, #1
 800299c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800299e:	230f      	movs	r3, #15
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	781b      	ldrb	r3, [r3, #0]
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bdb0      	pop	{r4, r5, r7, pc}
 80029ac:	fb8fffbf 	.word	0xfb8fffbf

080029b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	21a0      	movs	r1, #160	; 0xa0
 80029c4:	438a      	bics	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80029c8:	f7fe fdc8 	bl	800155c <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80029d0:	e00a      	b.n	80029e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80029d2:	f7fe fdc3 	bl	800155c <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1ad2      	subs	r2, r2, r3
 80029dc:	23fa      	movs	r3, #250	; 0xfa
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d901      	bls.n	80029e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e006      	b.n	80029f6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	4013      	ands	r3, r2
 80029f2:	d0ee      	beq.n	80029d2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b004      	add	sp, #16
 80029fc:	bd80      	pop	{r7, pc}

080029fe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002a06:	230f      	movs	r3, #15
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2240      	movs	r2, #64	; 0x40
 8002a16:	4013      	ands	r3, r2
 8002a18:	d12c      	bne.n	8002a74 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	430a      	orrs	r2, r1
 8002a28:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a2a:	f7fe fd97 	bl	800155c <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a32:	e014      	b.n	8002a5e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a34:	f7fe fd92 	bl	800155c <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad2      	subs	r2, r2, r3
 8002a3e:	200f      	movs	r0, #15
 8002a40:	183b      	adds	r3, r7, r0
 8002a42:	1839      	adds	r1, r7, r0
 8002a44:	7809      	ldrb	r1, [r1, #0]
 8002a46:	7019      	strb	r1, [r3, #0]
 8002a48:	23fa      	movs	r3, #250	; 0xfa
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d906      	bls.n	8002a5e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	2203      	movs	r2, #3
 8002a54:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2229      	movs	r2, #41	; 0x29
 8002a5a:	2103      	movs	r1, #3
 8002a5c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	4013      	ands	r3, r2
 8002a68:	d104      	bne.n	8002a74 <RTC_EnterInitMode+0x76>
 8002a6a:	230f      	movs	r3, #15
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d1df      	bne.n	8002a34 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002a74:	230f      	movs	r3, #15
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	781b      	ldrb	r3, [r3, #0]
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b004      	add	sp, #16
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	240f      	movs	r4, #15
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002a94:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <RTC_ExitInitMode+0x84>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <RTC_ExitInitMode+0x84>)
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002aa0:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <RTC_ExitInitMode+0x84>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d10d      	bne.n	8002ac6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff ff7f 	bl	80029b0 <HAL_RTC_WaitForSynchro>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d021      	beq.n	8002afa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2229      	movs	r2, #41	; 0x29
 8002aba:	2103      	movs	r1, #3
 8002abc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e019      	b.n	8002afa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <RTC_ExitInitMode+0x84>)
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <RTC_ExitInitMode+0x84>)
 8002acc:	2120      	movs	r1, #32
 8002ace:	438a      	bics	r2, r1
 8002ad0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff ff6b 	bl	80029b0 <HAL_RTC_WaitForSynchro>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d007      	beq.n	8002aee <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2229      	movs	r2, #41	; 0x29
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002ae6:	230f      	movs	r3, #15
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2203      	movs	r2, #3
 8002aec:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <RTC_ExitInitMode+0x84>)
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <RTC_ExitInitMode+0x84>)
 8002af4:	2120      	movs	r1, #32
 8002af6:	430a      	orrs	r2, r1
 8002af8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002afa:	230f      	movs	r3, #15
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	781b      	ldrb	r3, [r3, #0]
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b005      	add	sp, #20
 8002b06:	bd90      	pop	{r4, r7, pc}
 8002b08:	40002800 	.word	0x40002800

08002b0c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2228      	movs	r2, #40	; 0x28
 8002b1c:	5c9b      	ldrb	r3, [r3, r2]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e082      	b.n	8002c2c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2228      	movs	r2, #40	; 0x28
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2229      	movs	r2, #41	; 0x29
 8002b32:	2102      	movs	r1, #2
 8002b34:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	22ca      	movs	r2, #202	; 0xca
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2253      	movs	r2, #83	; 0x53
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699a      	ldr	r2, [r3, #24]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4938      	ldr	r1, [pc, #224]	; (8002c34 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8002b52:	400a      	ands	r2, r1
 8002b54:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2104      	movs	r1, #4
 8002b62:	430a      	orrs	r2, r1
 8002b64:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002b66:	4b34      	ldr	r3, [pc, #208]	; (8002c38 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2240      	movs	r2, #64	; 0x40
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d121      	bne.n	8002bb4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8002b70:	f7fe fcf4 	bl	800155c <HAL_GetTick>
 8002b74:	0003      	movs	r3, r0
 8002b76:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002b78:	e016      	b.n	8002ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b7a:	f7fe fcef 	bl	800155c <HAL_GetTick>
 8002b7e:	0002      	movs	r2, r0
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	1ad2      	subs	r2, r2, r3
 8002b84:	23fa      	movs	r3, #250	; 0xfa
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d90d      	bls.n	8002ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2229      	movs	r2, #41	; 0x29
 8002b98:	2103      	movs	r1, #3
 8002b9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2228      	movs	r2, #40	; 0x28
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e041      	b.n	8002c2c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d0e2      	beq.n	8002b7a <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2107      	movs	r1, #7
 8002bc8:	438a      	bics	r2, r1
 8002bca:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6999      	ldr	r1, [r3, #24]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	58d3      	ldr	r3, [r2, r3]
 8002be2:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	0312      	lsls	r2, r2, #12
 8002be8:	4313      	orrs	r3, r2
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	01c9      	lsls	r1, r1, #7
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	00c9      	lsls	r1, r1, #3
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	22ff      	movs	r2, #255	; 0xff
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2229      	movs	r2, #41	; 0x29
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2228      	movs	r2, #40	; 0x28
 8002c26:	2100      	movs	r1, #0
 8002c28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b006      	add	sp, #24
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	fffffbff 	.word	0xfffffbff
 8002c38:	40002800 	.word	0x40002800
 8002c3c:	40021800 	.word	0x40021800

08002c40 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	2204      	movs	r2, #4
 8002c50:	4013      	ands	r3, r2
 8002c52:	d00b      	beq.n	8002c6c <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2104      	movs	r1, #4
 8002c60:	430a      	orrs	r2, r1
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f808 	bl	8002c7c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2229      	movs	r2, #41	; 0x29
 8002c70:	2101      	movs	r1, #1
 8002c72:	5499      	strb	r1, [r3, r2]
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e04a      	b.n	8002d34 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	223d      	movs	r2, #61	; 0x3d
 8002ca2:	5c9b      	ldrb	r3, [r3, r2]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	223c      	movs	r2, #60	; 0x3c
 8002cae:	2100      	movs	r1, #0
 8002cb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7fe fa03 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	223d      	movs	r2, #61	; 0x3d
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	0019      	movs	r1, r3
 8002ccc:	0010      	movs	r0, r2
 8002cce:	f000 fa09 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2248      	movs	r2, #72	; 0x48
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	223e      	movs	r2, #62	; 0x3e
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	223f      	movs	r2, #63	; 0x3f
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	5499      	strb	r1, [r3, r2]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2240      	movs	r2, #64	; 0x40
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2241      	movs	r2, #65	; 0x41
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2242      	movs	r2, #66	; 0x42
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2243      	movs	r2, #67	; 0x43
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2244      	movs	r2, #68	; 0x44
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2245      	movs	r2, #69	; 0x45
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2246      	movs	r2, #70	; 0x46
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2247      	movs	r2, #71	; 0x47
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	223d      	movs	r2, #61	; 0x3d
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	223d      	movs	r2, #61	; 0x3d
 8002d48:	5c9b      	ldrb	r3, [r3, r2]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d001      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e03d      	b.n	8002dd0 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	223d      	movs	r2, #61	; 0x3d
 8002d58:	2102      	movs	r1, #2
 8002d5a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00a      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x50>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	05db      	lsls	r3, r3, #23
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d004      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x50>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <HAL_TIM_Base_Start_IT+0xa0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d116      	bne.n	8002dba <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d016      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x90>
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	025b      	lsls	r3, r3, #9
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d011      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db8:	e008      	b.n	8002dcc <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e000      	b.n	8002dce <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dcc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b004      	add	sp, #16
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40012c00 	.word	0x40012c00
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	00010007 	.word	0x00010007

08002de4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2101      	movs	r1, #1
 8002df8:	438a      	bics	r2, r1
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <HAL_TIM_Base_Stop_IT+0x54>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	d10d      	bne.n	8002e24 <HAL_TIM_Base_Stop_IT+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <HAL_TIM_Base_Stop_IT+0x58>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_Base_Stop_IT+0x40>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2101      	movs	r1, #1
 8002e20:	438a      	bics	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	223d      	movs	r2, #61	; 0x3d
 8002e28:	2101      	movs	r1, #1
 8002e2a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b002      	add	sp, #8
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	00001111 	.word	0x00001111
 8002e3c:	00000444 	.word	0x00000444

08002e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d124      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d11d      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2203      	movs	r2, #3
 8002e6a:	4252      	negs	r2, r2
 8002e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f000 f916 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e007      	b.n	8002e9a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f909 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 f915 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d125      	bne.n	8002efa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d11e      	bne.n	8002efa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2205      	movs	r2, #5
 8002ec2:	4252      	negs	r2, r2
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	23c0      	movs	r3, #192	; 0xc0
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 f8e9 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002ee2:	e007      	b.n	8002ef4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 f8dc 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 f8e8 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2208      	movs	r2, #8
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d124      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2208      	movs	r2, #8
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11d      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2209      	movs	r2, #9
 8002f1c:	4252      	negs	r2, r2
 8002f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2204      	movs	r2, #4
 8002f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 f8bd 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002f3a:	e007      	b.n	8002f4c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f8b0 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f8bc 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b10      	cmp	r3, #16
 8002f5e:	d125      	bne.n	8002fac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2210      	movs	r2, #16
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d11e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2211      	movs	r2, #17
 8002f74:	4252      	negs	r2, r2
 8002f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	23c0      	movs	r3, #192	; 0xc0
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 f890 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e007      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f883 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f88f 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10f      	bne.n	8002fda <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d108      	bne.n	8002fda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	4252      	negs	r2, r2
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7fd ffd7 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d10f      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d108      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2281      	movs	r2, #129	; 0x81
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0018      	movs	r0, r3
 8003004:	f000 f8ec 	bl	80031e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	401a      	ands	r2, r3
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	429a      	cmp	r2, r3
 800301a:	d10e      	bne.n	800303a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2280      	movs	r2, #128	; 0x80
 8003024:	4013      	ands	r3, r2
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d107      	bne.n	800303a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <HAL_TIM_IRQHandler+0x260>)
 8003030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f000 f8db 	bl	80031f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2240      	movs	r2, #64	; 0x40
 8003042:	4013      	ands	r3, r2
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d10f      	bne.n	8003068 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	4013      	ands	r3, r2
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d108      	bne.n	8003068 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2241      	movs	r2, #65	; 0x41
 800305c:	4252      	negs	r2, r2
 800305e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	0018      	movs	r0, r3
 8003064:	f000 f836 	bl	80030d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2220      	movs	r2, #32
 8003070:	4013      	ands	r3, r2
 8003072:	2b20      	cmp	r3, #32
 8003074:	d10f      	bne.n	8003096 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	4013      	ands	r3, r2
 8003080:	2b20      	cmp	r3, #32
 8003082:	d108      	bne.n	8003096 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2221      	movs	r2, #33	; 0x21
 800308a:	4252      	negs	r2, r2
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f000 f89d 	bl	80031d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b002      	add	sp, #8
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	fffffeff 	.word	0xfffffeff

080030a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b002      	add	sp, #8
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <TIM_Base_SetConfig+0xd4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d008      	beq.n	800310e <TIM_Base_SetConfig+0x2a>
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	05db      	lsls	r3, r3, #23
 8003102:	429a      	cmp	r2, r3
 8003104:	d003      	beq.n	800310e <TIM_Base_SetConfig+0x2a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <TIM_Base_SetConfig+0xd8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d108      	bne.n	8003120 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2270      	movs	r2, #112	; 0x70
 8003112:	4393      	bics	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <TIM_Base_SetConfig+0xd4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d014      	beq.n	8003152 <TIM_Base_SetConfig+0x6e>
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	05db      	lsls	r3, r3, #23
 800312e:	429a      	cmp	r2, r3
 8003130:	d00f      	beq.n	8003152 <TIM_Base_SetConfig+0x6e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a21      	ldr	r2, [pc, #132]	; (80031bc <TIM_Base_SetConfig+0xd8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00b      	beq.n	8003152 <TIM_Base_SetConfig+0x6e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a20      	ldr	r2, [pc, #128]	; (80031c0 <TIM_Base_SetConfig+0xdc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_Base_SetConfig+0x6e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <TIM_Base_SetConfig+0xe0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_Base_SetConfig+0x6e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <TIM_Base_SetConfig+0xe4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d108      	bne.n	8003164 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <TIM_Base_SetConfig+0xe8>)
 8003156:	4013      	ands	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	4393      	bics	r3, r2
 800316a:	001a      	movs	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <TIM_Base_SetConfig+0xd4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0xbe>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <TIM_Base_SetConfig+0xe0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0xbe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <TIM_Base_SetConfig+0xe4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d103      	bne.n	80031aa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	615a      	str	r2, [r3, #20]
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40002000 	.word	0x40002000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800
 80031cc:	fffffcff 	.word	0xfffffcff

080031d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e046      	b.n	80032a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2288      	movs	r2, #136	; 0x88
 8003216:	589b      	ldr	r3, [r3, r2]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d107      	bne.n	800322c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2284      	movs	r2, #132	; 0x84
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	0018      	movs	r0, r3
 8003228:	f7fd ff90 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2288      	movs	r2, #136	; 0x88
 8003230:	2124      	movs	r1, #36	; 0x24
 8003232:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	438a      	bics	r2, r1
 8003242:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	0018      	movs	r0, r3
 8003248:	f000 f980 	bl	800354c <UART_SetConfig>
 800324c:	0003      	movs	r3, r0
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e024      	b.n	80032a0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 fbeb 	bl	8003a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	490d      	ldr	r1, [pc, #52]	; (80032a8 <HAL_UART_Init+0xa8>)
 8003272:	400a      	ands	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	212a      	movs	r1, #42	; 0x2a
 8003282:	438a      	bics	r2, r1
 8003284:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0018      	movs	r0, r3
 800329a:	f000 fc83 	bl	8003ba4 <UART_CheckIdleState>
 800329e:	0003      	movs	r3, r0
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	ffffb7ff 	.word	0xffffb7ff

080032ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	1dbb      	adds	r3, r7, #6
 80032ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2288      	movs	r2, #136	; 0x88
 80032c0:	589b      	ldr	r3, [r3, r2]
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d000      	beq.n	80032c8 <HAL_UART_Transmit+0x1c>
 80032c6:	e088      	b.n	80033da <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_UART_Transmit+0x2a>
 80032ce:	1dbb      	adds	r3, r7, #6
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e080      	b.n	80033dc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	015b      	lsls	r3, r3, #5
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d109      	bne.n	80032fa <HAL_UART_Transmit+0x4e>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2201      	movs	r2, #1
 80032f2:	4013      	ands	r3, r2
 80032f4:	d001      	beq.n	80032fa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e070      	b.n	80033dc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2290      	movs	r2, #144	; 0x90
 80032fe:	2100      	movs	r1, #0
 8003300:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2288      	movs	r2, #136	; 0x88
 8003306:	2121      	movs	r1, #33	; 0x21
 8003308:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330a:	f7fe f927 	bl	800155c <HAL_GetTick>
 800330e:	0003      	movs	r3, r0
 8003310:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1dba      	adds	r2, r7, #6
 8003316:	2154      	movs	r1, #84	; 0x54
 8003318:	8812      	ldrh	r2, [r2, #0]
 800331a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1dba      	adds	r2, r7, #6
 8003320:	2156      	movs	r1, #86	; 0x56
 8003322:	8812      	ldrh	r2, [r2, #0]
 8003324:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	015b      	lsls	r3, r3, #5
 800332e:	429a      	cmp	r2, r3
 8003330:	d108      	bne.n	8003344 <HAL_UART_Transmit+0x98>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	e003      	b.n	800334c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800334c:	e02c      	b.n	80033a8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	0013      	movs	r3, r2
 8003358:	2200      	movs	r2, #0
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	f000 fc70 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d001      	beq.n	8003368 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e039      	b.n	80033dc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	001a      	movs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	05d2      	lsls	r2, r2, #23
 800337a:	0dd2      	lsrs	r2, r2, #23
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	3302      	adds	r3, #2
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	e007      	b.n	8003396 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3301      	adds	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2256      	movs	r2, #86	; 0x56
 800339a:	5a9b      	ldrh	r3, [r3, r2]
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b299      	uxth	r1, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2256      	movs	r2, #86	; 0x56
 80033a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2256      	movs	r2, #86	; 0x56
 80033ac:	5a9b      	ldrh	r3, [r3, r2]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1cc      	bne.n	800334e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	0013      	movs	r3, r2
 80033be:	2200      	movs	r2, #0
 80033c0:	2140      	movs	r1, #64	; 0x40
 80033c2:	f000 fc3d 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d001      	beq.n	80033ce <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e006      	b.n	80033dc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2288      	movs	r2, #136	; 0x88
 80033d2:	2120      	movs	r1, #32
 80033d4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b008      	add	sp, #32
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b092      	sub	sp, #72	; 0x48
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ec:	f3ef 8310 	mrs	r3, PRIMASK
 80033f0:	623b      	str	r3, [r7, #32]
  return(result);
 80033f2:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
 80033f6:	2301      	movs	r3, #1
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	f383 8810 	msr	PRIMASK, r3
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	494d      	ldr	r1, [pc, #308]	; (8003544 <HAL_UART_AbortReceive+0x160>)
 800340e:	400a      	ands	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	f383 8810 	msr	PRIMASK, r3
}
 800341c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341e:	f3ef 8310 	mrs	r3, PRIMASK
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8003426:	643b      	str	r3, [r7, #64]	; 0x40
 8003428:	2301      	movs	r3, #1
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	f383 8810 	msr	PRIMASK, r3
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4942      	ldr	r1, [pc, #264]	; (8003548 <HAL_UART_AbortReceive+0x164>)
 8003440:	400a      	ands	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	f383 8810 	msr	PRIMASK, r3
}
 800344e:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d118      	bne.n	800348a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003458:	f3ef 8310 	mrs	r3, PRIMASK
 800345c:	617b      	str	r3, [r7, #20]
  return(result);
 800345e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003462:	2301      	movs	r3, #1
 8003464:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f383 8810 	msr	PRIMASK, r3
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2110      	movs	r1, #16
 800347a:	438a      	bics	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	46c0      	nop			; (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2240      	movs	r2, #64	; 0x40
 8003492:	4013      	ands	r3, r2
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d139      	bne.n	800350c <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003498:	f3ef 8310 	mrs	r3, PRIMASK
 800349c:	60bb      	str	r3, [r7, #8]
  return(result);
 800349e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a2:	2301      	movs	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f383 8810 	msr	PRIMASK, r3
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2140      	movs	r1, #64	; 0x40
 80034ba:	438a      	bics	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f383 8810 	msr	PRIMASK, r3
}
 80034c8:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	589b      	ldr	r3, [r3, r2]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01b      	beq.n	800350c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	589b      	ldr	r3, [r3, r2]
 80034da:	2200      	movs	r2, #0
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	589b      	ldr	r3, [r3, r2]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7fe f921 	bl	800172c <HAL_DMA_Abort>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d00e      	beq.n	800350c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2280      	movs	r2, #128	; 0x80
 80034f2:	589b      	ldr	r3, [r3, r2]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7fe f97b 	bl	80017f0 <HAL_DMA_GetError>
 80034fa:	0003      	movs	r3, r0
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d105      	bne.n	800350c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2290      	movs	r2, #144	; 0x90
 8003504:	2110      	movs	r1, #16
 8003506:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e017      	b.n	800353c <HAL_UART_AbortReceive+0x158>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	225e      	movs	r2, #94	; 0x5e
 8003510:	2100      	movs	r1, #0
 8003512:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	220f      	movs	r2, #15
 800351a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2108      	movs	r1, #8
 8003528:	430a      	orrs	r2, r1
 800352a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	228c      	movs	r2, #140	; 0x8c
 8003530:	2120      	movs	r1, #32
 8003532:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b012      	add	sp, #72	; 0x48
 8003542:	bd80      	pop	{r7, pc}
 8003544:	fffffedf 	.word	0xfffffedf
 8003548:	effffffe 	.word	0xeffffffe

0800354c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800354c:	b5b0      	push	{r4, r5, r7, lr}
 800354e:	b090      	sub	sp, #64	; 0x40
 8003550:	af00      	add	r7, sp, #0
 8003552:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003554:	231a      	movs	r3, #26
 8003556:	2220      	movs	r2, #32
 8003558:	189b      	adds	r3, r3, r2
 800355a:	19db      	adds	r3, r3, r7
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	431a      	orrs	r2, r3
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	431a      	orrs	r2, r3
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	4313      	orrs	r3, r2
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4ac4      	ldr	r2, [pc, #784]	; (8003890 <UART_SetConfig+0x344>)
 8003580:	4013      	ands	r3, r2
 8003582:	0019      	movs	r1, r3
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358a:	430b      	orrs	r3, r1
 800358c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4abf      	ldr	r2, [pc, #764]	; (8003894 <UART_SetConfig+0x348>)
 8003596:	4013      	ands	r3, r2
 8003598:	0018      	movs	r0, r3
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	68d9      	ldr	r1, [r3, #12]
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	0003      	movs	r3, r0
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4ab9      	ldr	r2, [pc, #740]	; (8003898 <UART_SetConfig+0x34c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035be:	4313      	orrs	r3, r2
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4ab4      	ldr	r2, [pc, #720]	; (800389c <UART_SetConfig+0x350>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	220f      	movs	r2, #15
 80035e0:	4393      	bics	r3, r2
 80035e2:	0018      	movs	r0, r3
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	0003      	movs	r3, r0
 80035ee:	430b      	orrs	r3, r1
 80035f0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4aaa      	ldr	r2, [pc, #680]	; (80038a0 <UART_SetConfig+0x354>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d131      	bne.n	8003660 <UART_SetConfig+0x114>
 80035fc:	4ba9      	ldr	r3, [pc, #676]	; (80038a4 <UART_SetConfig+0x358>)
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	2203      	movs	r2, #3
 8003602:	4013      	ands	r3, r2
 8003604:	2b03      	cmp	r3, #3
 8003606:	d01d      	beq.n	8003644 <UART_SetConfig+0xf8>
 8003608:	d823      	bhi.n	8003652 <UART_SetConfig+0x106>
 800360a:	2b02      	cmp	r3, #2
 800360c:	d00c      	beq.n	8003628 <UART_SetConfig+0xdc>
 800360e:	d820      	bhi.n	8003652 <UART_SetConfig+0x106>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <UART_SetConfig+0xce>
 8003614:	2b01      	cmp	r3, #1
 8003616:	d00e      	beq.n	8003636 <UART_SetConfig+0xea>
 8003618:	e01b      	b.n	8003652 <UART_SetConfig+0x106>
 800361a:	231b      	movs	r3, #27
 800361c:	2220      	movs	r2, #32
 800361e:	189b      	adds	r3, r3, r2
 8003620:	19db      	adds	r3, r3, r7
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e071      	b.n	800370c <UART_SetConfig+0x1c0>
 8003628:	231b      	movs	r3, #27
 800362a:	2220      	movs	r2, #32
 800362c:	189b      	adds	r3, r3, r2
 800362e:	19db      	adds	r3, r3, r7
 8003630:	2202      	movs	r2, #2
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e06a      	b.n	800370c <UART_SetConfig+0x1c0>
 8003636:	231b      	movs	r3, #27
 8003638:	2220      	movs	r2, #32
 800363a:	189b      	adds	r3, r3, r2
 800363c:	19db      	adds	r3, r3, r7
 800363e:	2204      	movs	r2, #4
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e063      	b.n	800370c <UART_SetConfig+0x1c0>
 8003644:	231b      	movs	r3, #27
 8003646:	2220      	movs	r2, #32
 8003648:	189b      	adds	r3, r3, r2
 800364a:	19db      	adds	r3, r3, r7
 800364c:	2208      	movs	r2, #8
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e05c      	b.n	800370c <UART_SetConfig+0x1c0>
 8003652:	231b      	movs	r3, #27
 8003654:	2220      	movs	r2, #32
 8003656:	189b      	adds	r3, r3, r2
 8003658:	19db      	adds	r3, r3, r7
 800365a:	2210      	movs	r2, #16
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e055      	b.n	800370c <UART_SetConfig+0x1c0>
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a90      	ldr	r2, [pc, #576]	; (80038a8 <UART_SetConfig+0x35c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d106      	bne.n	8003678 <UART_SetConfig+0x12c>
 800366a:	231b      	movs	r3, #27
 800366c:	2220      	movs	r2, #32
 800366e:	189b      	adds	r3, r3, r2
 8003670:	19db      	adds	r3, r3, r7
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	e049      	b.n	800370c <UART_SetConfig+0x1c0>
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a86      	ldr	r2, [pc, #536]	; (8003898 <UART_SetConfig+0x34c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d13e      	bne.n	8003700 <UART_SetConfig+0x1b4>
 8003682:	4b88      	ldr	r3, [pc, #544]	; (80038a4 <UART_SetConfig+0x358>)
 8003684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003686:	23c0      	movs	r3, #192	; 0xc0
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	4013      	ands	r3, r2
 800368c:	22c0      	movs	r2, #192	; 0xc0
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	4293      	cmp	r3, r2
 8003692:	d027      	beq.n	80036e4 <UART_SetConfig+0x198>
 8003694:	22c0      	movs	r2, #192	; 0xc0
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	4293      	cmp	r3, r2
 800369a:	d82a      	bhi.n	80036f2 <UART_SetConfig+0x1a6>
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d011      	beq.n	80036c8 <UART_SetConfig+0x17c>
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d822      	bhi.n	80036f2 <UART_SetConfig+0x1a6>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <UART_SetConfig+0x16e>
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	00d2      	lsls	r2, r2, #3
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <UART_SetConfig+0x18a>
 80036b8:	e01b      	b.n	80036f2 <UART_SetConfig+0x1a6>
 80036ba:	231b      	movs	r3, #27
 80036bc:	2220      	movs	r2, #32
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	19db      	adds	r3, r3, r7
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e021      	b.n	800370c <UART_SetConfig+0x1c0>
 80036c8:	231b      	movs	r3, #27
 80036ca:	2220      	movs	r2, #32
 80036cc:	189b      	adds	r3, r3, r2
 80036ce:	19db      	adds	r3, r3, r7
 80036d0:	2202      	movs	r2, #2
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e01a      	b.n	800370c <UART_SetConfig+0x1c0>
 80036d6:	231b      	movs	r3, #27
 80036d8:	2220      	movs	r2, #32
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	19db      	adds	r3, r3, r7
 80036de:	2204      	movs	r2, #4
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e013      	b.n	800370c <UART_SetConfig+0x1c0>
 80036e4:	231b      	movs	r3, #27
 80036e6:	2220      	movs	r2, #32
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	19db      	adds	r3, r3, r7
 80036ec:	2208      	movs	r2, #8
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e00c      	b.n	800370c <UART_SetConfig+0x1c0>
 80036f2:	231b      	movs	r3, #27
 80036f4:	2220      	movs	r2, #32
 80036f6:	189b      	adds	r3, r3, r2
 80036f8:	19db      	adds	r3, r3, r7
 80036fa:	2210      	movs	r2, #16
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	e005      	b.n	800370c <UART_SetConfig+0x1c0>
 8003700:	231b      	movs	r3, #27
 8003702:	2220      	movs	r2, #32
 8003704:	189b      	adds	r3, r3, r2
 8003706:	19db      	adds	r3, r3, r7
 8003708:	2210      	movs	r2, #16
 800370a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a61      	ldr	r2, [pc, #388]	; (8003898 <UART_SetConfig+0x34c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d000      	beq.n	8003718 <UART_SetConfig+0x1cc>
 8003716:	e092      	b.n	800383e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003718:	231b      	movs	r3, #27
 800371a:	2220      	movs	r2, #32
 800371c:	189b      	adds	r3, r3, r2
 800371e:	19db      	adds	r3, r3, r7
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b08      	cmp	r3, #8
 8003724:	d015      	beq.n	8003752 <UART_SetConfig+0x206>
 8003726:	dc18      	bgt.n	800375a <UART_SetConfig+0x20e>
 8003728:	2b04      	cmp	r3, #4
 800372a:	d00d      	beq.n	8003748 <UART_SetConfig+0x1fc>
 800372c:	dc15      	bgt.n	800375a <UART_SetConfig+0x20e>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <UART_SetConfig+0x1ec>
 8003732:	2b02      	cmp	r3, #2
 8003734:	d005      	beq.n	8003742 <UART_SetConfig+0x1f6>
 8003736:	e010      	b.n	800375a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003738:	f7fe ff08 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 800373c:	0003      	movs	r3, r0
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003740:	e014      	b.n	800376c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003742:	4b5a      	ldr	r3, [pc, #360]	; (80038ac <UART_SetConfig+0x360>)
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003746:	e011      	b.n	800376c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003748:	f7fe fe74 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 800374c:	0003      	movs	r3, r0
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003750:	e00c      	b.n	800376c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003758:	e008      	b.n	800376c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800375e:	231a      	movs	r3, #26
 8003760:	2220      	movs	r2, #32
 8003762:	189b      	adds	r3, r3, r2
 8003764:	19db      	adds	r3, r3, r7
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
        break;
 800376a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800376c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376e:	2b00      	cmp	r3, #0
 8003770:	d100      	bne.n	8003774 <UART_SetConfig+0x228>
 8003772:	e147      	b.n	8003a04 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003778:	4b4d      	ldr	r3, [pc, #308]	; (80038b0 <UART_SetConfig+0x364>)
 800377a:	0052      	lsls	r2, r2, #1
 800377c:	5ad3      	ldrh	r3, [r2, r3]
 800377e:	0019      	movs	r1, r3
 8003780:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003782:	f7fc fcd1 	bl	8000128 <__udivsi3>
 8003786:	0003      	movs	r3, r0
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	0013      	movs	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	189b      	adds	r3, r3, r2
 8003794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003796:	429a      	cmp	r2, r3
 8003798:	d305      	bcc.n	80037a6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d906      	bls.n	80037b4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80037a6:	231a      	movs	r3, #26
 80037a8:	2220      	movs	r2, #32
 80037aa:	189b      	adds	r3, r3, r2
 80037ac:	19db      	adds	r3, r3, r7
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	e127      	b.n	8003a04 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c0:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <UART_SetConfig+0x364>)
 80037c2:	0052      	lsls	r2, r2, #1
 80037c4:	5ad3      	ldrh	r3, [r2, r3]
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	69b8      	ldr	r0, [r7, #24]
 80037d2:	69f9      	ldr	r1, [r7, #28]
 80037d4:	f7fc fe1e 	bl	8000414 <__aeabi_uldivmod>
 80037d8:	0002      	movs	r2, r0
 80037da:	000b      	movs	r3, r1
 80037dc:	0e11      	lsrs	r1, r2, #24
 80037de:	021d      	lsls	r5, r3, #8
 80037e0:	430d      	orrs	r5, r1
 80037e2:	0214      	lsls	r4, r2, #8
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68b8      	ldr	r0, [r7, #8]
 80037f2:	68f9      	ldr	r1, [r7, #12]
 80037f4:	1900      	adds	r0, r0, r4
 80037f6:	4169      	adcs	r1, r5
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f7fc fe05 	bl	8000414 <__aeabi_uldivmod>
 800380a:	0002      	movs	r2, r0
 800380c:	000b      	movs	r3, r1
 800380e:	0013      	movs	r3, r2
 8003810:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003814:	23c0      	movs	r3, #192	; 0xc0
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d309      	bcc.n	8003830 <UART_SetConfig+0x2e4>
 800381c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	035b      	lsls	r3, r3, #13
 8003822:	429a      	cmp	r2, r3
 8003824:	d204      	bcs.n	8003830 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	e0e9      	b.n	8003a04 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003830:	231a      	movs	r3, #26
 8003832:	2220      	movs	r2, #32
 8003834:	189b      	adds	r3, r3, r2
 8003836:	19db      	adds	r3, r3, r7
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e0e2      	b.n	8003a04 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	69da      	ldr	r2, [r3, #28]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	429a      	cmp	r2, r3
 8003848:	d000      	beq.n	800384c <UART_SetConfig+0x300>
 800384a:	e083      	b.n	8003954 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800384c:	231b      	movs	r3, #27
 800384e:	2220      	movs	r2, #32
 8003850:	189b      	adds	r3, r3, r2
 8003852:	19db      	adds	r3, r3, r7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d015      	beq.n	8003886 <UART_SetConfig+0x33a>
 800385a:	dc2b      	bgt.n	80038b4 <UART_SetConfig+0x368>
 800385c:	2b04      	cmp	r3, #4
 800385e:	d00d      	beq.n	800387c <UART_SetConfig+0x330>
 8003860:	dc28      	bgt.n	80038b4 <UART_SetConfig+0x368>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <UART_SetConfig+0x320>
 8003866:	2b02      	cmp	r3, #2
 8003868:	d005      	beq.n	8003876 <UART_SetConfig+0x32a>
 800386a:	e023      	b.n	80038b4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800386c:	f7fe fe6e 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 8003870:	0003      	movs	r3, r0
 8003872:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003874:	e027      	b.n	80038c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <UART_SetConfig+0x360>)
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800387a:	e024      	b.n	80038c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387c:	f7fe fdda 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8003880:	0003      	movs	r3, r0
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003884:	e01f      	b.n	80038c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800388c:	e01b      	b.n	80038c6 <UART_SetConfig+0x37a>
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	cfff69f3 	.word	0xcfff69f3
 8003894:	ffffcfff 	.word	0xffffcfff
 8003898:	40008000 	.word	0x40008000
 800389c:	11fff4ff 	.word	0x11fff4ff
 80038a0:	40013800 	.word	0x40013800
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40004400 	.word	0x40004400
 80038ac:	00f42400 	.word	0x00f42400
 80038b0:	08005a84 	.word	0x08005a84
      default:
        pclk = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038b8:	231a      	movs	r3, #26
 80038ba:	2220      	movs	r2, #32
 80038bc:	189b      	adds	r3, r3, r2
 80038be:	19db      	adds	r3, r3, r7
 80038c0:	2201      	movs	r2, #1
 80038c2:	701a      	strb	r2, [r3, #0]
        break;
 80038c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d100      	bne.n	80038ce <UART_SetConfig+0x382>
 80038cc:	e09a      	b.n	8003a04 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d2:	4b58      	ldr	r3, [pc, #352]	; (8003a34 <UART_SetConfig+0x4e8>)
 80038d4:	0052      	lsls	r2, r2, #1
 80038d6:	5ad3      	ldrh	r3, [r2, r3]
 80038d8:	0019      	movs	r1, r3
 80038da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038dc:	f7fc fc24 	bl	8000128 <__udivsi3>
 80038e0:	0003      	movs	r3, r0
 80038e2:	005a      	lsls	r2, r3, #1
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	18d2      	adds	r2, r2, r3
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0019      	movs	r1, r3
 80038f2:	0010      	movs	r0, r2
 80038f4:	f7fc fc18 	bl	8000128 <__udivsi3>
 80038f8:	0003      	movs	r3, r0
 80038fa:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d921      	bls.n	8003946 <UART_SetConfig+0x3fa>
 8003902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	025b      	lsls	r3, r3, #9
 8003908:	429a      	cmp	r2, r3
 800390a:	d21c      	bcs.n	8003946 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	b29a      	uxth	r2, r3
 8003910:	200e      	movs	r0, #14
 8003912:	2420      	movs	r4, #32
 8003914:	1903      	adds	r3, r0, r4
 8003916:	19db      	adds	r3, r3, r7
 8003918:	210f      	movs	r1, #15
 800391a:	438a      	bics	r2, r1
 800391c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	b29b      	uxth	r3, r3
 8003924:	2207      	movs	r2, #7
 8003926:	4013      	ands	r3, r2
 8003928:	b299      	uxth	r1, r3
 800392a:	1903      	adds	r3, r0, r4
 800392c:	19db      	adds	r3, r3, r7
 800392e:	1902      	adds	r2, r0, r4
 8003930:	19d2      	adds	r2, r2, r7
 8003932:	8812      	ldrh	r2, [r2, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	1902      	adds	r2, r0, r4
 800393e:	19d2      	adds	r2, r2, r7
 8003940:	8812      	ldrh	r2, [r2, #0]
 8003942:	60da      	str	r2, [r3, #12]
 8003944:	e05e      	b.n	8003a04 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003946:	231a      	movs	r3, #26
 8003948:	2220      	movs	r2, #32
 800394a:	189b      	adds	r3, r3, r2
 800394c:	19db      	adds	r3, r3, r7
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e057      	b.n	8003a04 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003954:	231b      	movs	r3, #27
 8003956:	2220      	movs	r2, #32
 8003958:	189b      	adds	r3, r3, r2
 800395a:	19db      	adds	r3, r3, r7
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b08      	cmp	r3, #8
 8003960:	d015      	beq.n	800398e <UART_SetConfig+0x442>
 8003962:	dc18      	bgt.n	8003996 <UART_SetConfig+0x44a>
 8003964:	2b04      	cmp	r3, #4
 8003966:	d00d      	beq.n	8003984 <UART_SetConfig+0x438>
 8003968:	dc15      	bgt.n	8003996 <UART_SetConfig+0x44a>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <UART_SetConfig+0x428>
 800396e:	2b02      	cmp	r3, #2
 8003970:	d005      	beq.n	800397e <UART_SetConfig+0x432>
 8003972:	e010      	b.n	8003996 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003974:	f7fe fdea 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 8003978:	0003      	movs	r3, r0
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800397c:	e014      	b.n	80039a8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397e:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <UART_SetConfig+0x4ec>)
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003982:	e011      	b.n	80039a8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003984:	f7fe fd56 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 8003988:	0003      	movs	r3, r0
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800398c:	e00c      	b.n	80039a8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003994:	e008      	b.n	80039a8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800399a:	231a      	movs	r3, #26
 800399c:	2220      	movs	r2, #32
 800399e:	189b      	adds	r3, r3, r2
 80039a0:	19db      	adds	r3, r3, r7
 80039a2:	2201      	movs	r2, #1
 80039a4:	701a      	strb	r2, [r3, #0]
        break;
 80039a6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02a      	beq.n	8003a04 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <UART_SetConfig+0x4e8>)
 80039b4:	0052      	lsls	r2, r2, #1
 80039b6:	5ad3      	ldrh	r3, [r2, r3]
 80039b8:	0019      	movs	r1, r3
 80039ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039bc:	f7fc fbb4 	bl	8000128 <__udivsi3>
 80039c0:	0003      	movs	r3, r0
 80039c2:	001a      	movs	r2, r3
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	18d2      	adds	r2, r2, r3
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0019      	movs	r1, r3
 80039d2:	0010      	movs	r0, r2
 80039d4:	f7fc fba8 	bl	8000128 <__udivsi3>
 80039d8:	0003      	movs	r3, r0
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	d90a      	bls.n	80039f8 <UART_SetConfig+0x4ac>
 80039e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	025b      	lsls	r3, r3, #9
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d205      	bcs.n	80039f8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	e005      	b.n	8003a04 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80039f8:	231a      	movs	r3, #26
 80039fa:	2220      	movs	r2, #32
 80039fc:	189b      	adds	r3, r3, r2
 80039fe:	19db      	adds	r3, r3, r7
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	226a      	movs	r2, #106	; 0x6a
 8003a08:	2101      	movs	r1, #1
 8003a0a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	2268      	movs	r2, #104	; 0x68
 8003a10:	2101      	movs	r1, #1
 8003a12:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	2200      	movs	r2, #0
 8003a18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003a20:	231a      	movs	r3, #26
 8003a22:	2220      	movs	r2, #32
 8003a24:	189b      	adds	r3, r3, r2
 8003a26:	19db      	adds	r3, r3, r7
 8003a28:	781b      	ldrb	r3, [r3, #0]
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b010      	add	sp, #64	; 0x40
 8003a30:	bdb0      	pop	{r4, r5, r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	08005a84 	.word	0x08005a84
 8003a38:	00f42400 	.word	0x00f42400

08003a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a4a      	ldr	r2, [pc, #296]	; (8003b80 <UART_AdvFeatureConfig+0x144>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	0019      	movs	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4a43      	ldr	r2, [pc, #268]	; (8003b84 <UART_AdvFeatureConfig+0x148>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d00b      	beq.n	8003aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a3b      	ldr	r2, [pc, #236]	; (8003b88 <UART_AdvFeatureConfig+0x14c>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	2208      	movs	r2, #8
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a34      	ldr	r2, [pc, #208]	; (8003b8c <UART_AdvFeatureConfig+0x150>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	0019      	movs	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <UART_AdvFeatureConfig+0x154>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	2220      	movs	r2, #32
 8003af4:	4013      	ands	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <UART_AdvFeatureConfig+0x158>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	2240      	movs	r2, #64	; 0x40
 8003b16:	4013      	ands	r3, r2
 8003b18:	d01d      	beq.n	8003b56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <UART_AdvFeatureConfig+0x15c>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	035b      	lsls	r3, r3, #13
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d10b      	bne.n	8003b56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <UART_AdvFeatureConfig+0x160>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	0019      	movs	r1, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d00b      	beq.n	8003b78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4a0e      	ldr	r2, [pc, #56]	; (8003ba0 <UART_AdvFeatureConfig+0x164>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]
  }
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	fffdffff 	.word	0xfffdffff
 8003b84:	fffeffff 	.word	0xfffeffff
 8003b88:	fffbffff 	.word	0xfffbffff
 8003b8c:	ffff7fff 	.word	0xffff7fff
 8003b90:	ffffefff 	.word	0xffffefff
 8003b94:	ffffdfff 	.word	0xffffdfff
 8003b98:	ffefffff 	.word	0xffefffff
 8003b9c:	ff9fffff 	.word	0xff9fffff
 8003ba0:	fff7ffff 	.word	0xfff7ffff

08003ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2290      	movs	r2, #144	; 0x90
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bb4:	f7fd fcd2 	bl	800155c <HAL_GetTick>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d10c      	bne.n	8003be4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	0391      	lsls	r1, r2, #14
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4a1a      	ldr	r2, [pc, #104]	; (8003c3c <UART_CheckIdleState+0x98>)
 8003bd4:	9200      	str	r2, [sp, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f000 f832 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d001      	beq.n	8003be4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e026      	b.n	8003c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2204      	movs	r2, #4
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d10c      	bne.n	8003c0c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	03d1      	lsls	r1, r2, #15
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <UART_CheckIdleState+0x98>)
 8003bfc:	9200      	str	r2, [sp, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f000 f81e 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003c04:	1e03      	subs	r3, r0, #0
 8003c06:	d001      	beq.n	8003c0c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e012      	b.n	8003c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2288      	movs	r2, #136	; 0x88
 8003c10:	2120      	movs	r1, #32
 8003c12:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	228c      	movs	r2, #140	; 0x8c
 8003c18:	2120      	movs	r1, #32
 8003c1a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2284      	movs	r2, #132	; 0x84
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	01ffffff 	.word	0x01ffffff

08003c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b094      	sub	sp, #80	; 0x50
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	1dfb      	adds	r3, r7, #7
 8003c4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c50:	e0a7      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c54:	3301      	adds	r3, #1
 8003c56:	d100      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c58:	e0a3      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fd fc7f 	bl	800155c <HAL_GetTick>
 8003c5e:	0002      	movs	r2, r0
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d13f      	bne.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c70:	f3ef 8310 	mrs	r3, PRIMASK
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	494e      	ldr	r1, [pc, #312]	; (8003dcc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	643b      	str	r3, [r7, #64]	; 0x40
 8003cac:	2301      	movs	r3, #1
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	f383 8810 	msr	PRIMASK, r3
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	f383 8810 	msr	PRIMASK, r3
}
 8003cd2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2288      	movs	r2, #136	; 0x88
 8003cd8:	2120      	movs	r1, #32
 8003cda:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	228c      	movs	r2, #140	; 0x8c
 8003ce0:	2120      	movs	r1, #32
 8003ce2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2284      	movs	r2, #132	; 0x84
 8003ce8:	2100      	movs	r1, #0
 8003cea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e069      	b.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d052      	beq.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	401a      	ands	r2, r3
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d148      	bne.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2280      	movs	r2, #128	; 0x80
 8003d16:	0112      	lsls	r2, r2, #4
 8003d18:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8003d20:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d24:	2301      	movs	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f383 8810 	msr	PRIMASK, r3
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4924      	ldr	r1, [pc, #144]	; (8003dcc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f383 8810 	msr	PRIMASK, r3
}
 8003d4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d50:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d52:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d56:	2301      	movs	r3, #1
 8003d58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f383 8810 	msr	PRIMASK, r3
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	438a      	bics	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
 8003d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2288      	movs	r2, #136	; 0x88
 8003d82:	2120      	movs	r1, #32
 8003d84:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	228c      	movs	r2, #140	; 0x8c
 8003d8a:	2120      	movs	r1, #32
 8003d8c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2290      	movs	r2, #144	; 0x90
 8003d92:	2120      	movs	r1, #32
 8003d94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2284      	movs	r2, #132	; 0x84
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e010      	b.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	425a      	negs	r2, r3
 8003db2:	4153      	adcs	r3, r2
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	001a      	movs	r2, r3
 8003db8:	1dfb      	adds	r3, r7, #7
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d100      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x182>
 8003dc0:	e747      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b014      	add	sp, #80	; 0x50
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	fffffe5f 	.word	0xfffffe5f

08003dd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2284      	movs	r2, #132	; 0x84
 8003ddc:	5c9b      	ldrb	r3, [r3, r2]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e027      	b.n	8003e36 <HAL_UARTEx_DisableFifoMode+0x66>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2284      	movs	r2, #132	; 0x84
 8003dea:	2101      	movs	r1, #1
 8003dec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2288      	movs	r2, #136	; 0x88
 8003df2:	2124      	movs	r1, #36	; 0x24
 8003df4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2101      	movs	r1, #1
 8003e0a:	438a      	bics	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a0b      	ldr	r2, [pc, #44]	; (8003e40 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2288      	movs	r2, #136	; 0x88
 8003e28:	2120      	movs	r1, #32
 8003e2a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2284      	movs	r2, #132	; 0x84
 8003e30:	2100      	movs	r1, #0
 8003e32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	dfffffff 	.word	0xdfffffff

08003e44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2284      	movs	r2, #132	; 0x84
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e02e      	b.n	8003eba <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2284      	movs	r2, #132	; 0x84
 8003e60:	2101      	movs	r1, #1
 8003e62:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2288      	movs	r2, #136	; 0x88
 8003e68:	2124      	movs	r1, #36	; 0x24
 8003e6a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2101      	movs	r1, #1
 8003e80:	438a      	bics	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	08d9      	lsrs	r1, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 f974 	bl	8004188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2288      	movs	r2, #136	; 0x88
 8003eac:	2120      	movs	r1, #32
 8003eae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2284      	movs	r2, #132	; 0x84
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b004      	add	sp, #16
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2284      	movs	r2, #132	; 0x84
 8003ed2:	5c9b      	ldrb	r3, [r3, r2]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e02f      	b.n	8003f3c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2284      	movs	r2, #132	; 0x84
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2288      	movs	r2, #136	; 0x88
 8003ee8:	2124      	movs	r1, #36	; 0x24
 8003eea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2101      	movs	r1, #1
 8003f00:	438a      	bics	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f000 f933 	bl	8004188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2288      	movs	r2, #136	; 0x88
 8003f2e:	2120      	movs	r1, #32
 8003f30:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2284      	movs	r2, #132	; 0x84
 8003f36:	2100      	movs	r1, #0
 8003f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b004      	add	sp, #16
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	f1ffffff 	.word	0xf1ffffff

08003f48 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	1dbb      	adds	r3, r7, #6
 8003f56:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	228c      	movs	r2, #140	; 0x8c
 8003f5c:	589b      	ldr	r3, [r3, r2]
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d000      	beq.n	8003f64 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8003f62:	e109      	b.n	8004178 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8003f6a:	1dbb      	adds	r3, r7, #6
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e101      	b.n	800417a <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	015b      	lsls	r3, r3, #5
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d109      	bne.n	8003f96 <HAL_UARTEx_ReceiveToIdle+0x4e>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d105      	bne.n	8003f96 <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d001      	beq.n	8003f96 <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0f1      	b.n	800417a <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2290      	movs	r2, #144	; 0x90
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	228c      	movs	r2, #140	; 0x8c
 8003fa2:	2122      	movs	r1, #34	; 0x22
 8003fa4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	671a      	str	r2, [r3, #112]	; 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fb2:	f7fd fad3 	bl	800155c <HAL_GetTick>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1dba      	adds	r2, r7, #6
 8003fbe:	215c      	movs	r1, #92	; 0x5c
 8003fc0:	8812      	ldrh	r2, [r2, #0]
 8003fc2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1dba      	adds	r2, r7, #6
 8003fc8:	215e      	movs	r1, #94	; 0x5e
 8003fca:	8812      	ldrh	r2, [r2, #0]
 8003fcc:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	015b      	lsls	r3, r3, #5
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d10d      	bne.n	8003ff6 <HAL_UARTEx_ReceiveToIdle+0xae>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <HAL_UARTEx_ReceiveToIdle+0xa4>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2260      	movs	r2, #96	; 0x60
 8003fe6:	4967      	ldr	r1, [pc, #412]	; (8004184 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8003fe8:	5299      	strh	r1, [r3, r2]
 8003fea:	e02e      	b.n	800404a <HAL_UARTEx_ReceiveToIdle+0x102>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2260      	movs	r2, #96	; 0x60
 8003ff0:	21ff      	movs	r1, #255	; 0xff
 8003ff2:	5299      	strh	r1, [r3, r2]
 8003ff4:	e029      	b.n	800404a <HAL_UARTEx_ReceiveToIdle+0x102>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10d      	bne.n	800401a <HAL_UARTEx_ReceiveToIdle+0xd2>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <HAL_UARTEx_ReceiveToIdle+0xc8>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2260      	movs	r2, #96	; 0x60
 800400a:	21ff      	movs	r1, #255	; 0xff
 800400c:	5299      	strh	r1, [r3, r2]
 800400e:	e01c      	b.n	800404a <HAL_UARTEx_ReceiveToIdle+0x102>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2260      	movs	r2, #96	; 0x60
 8004014:	217f      	movs	r1, #127	; 0x7f
 8004016:	5299      	strh	r1, [r3, r2]
 8004018:	e017      	b.n	800404a <HAL_UARTEx_ReceiveToIdle+0x102>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	055b      	lsls	r3, r3, #21
 8004022:	429a      	cmp	r2, r3
 8004024:	d10d      	bne.n	8004042 <HAL_UARTEx_ReceiveToIdle+0xfa>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <HAL_UARTEx_ReceiveToIdle+0xf0>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2260      	movs	r2, #96	; 0x60
 8004032:	217f      	movs	r1, #127	; 0x7f
 8004034:	5299      	strh	r1, [r3, r2]
 8004036:	e008      	b.n	800404a <HAL_UARTEx_ReceiveToIdle+0x102>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2260      	movs	r2, #96	; 0x60
 800403c:	213f      	movs	r1, #63	; 0x3f
 800403e:	5299      	strh	r1, [r3, r2]
 8004040:	e003      	b.n	800404a <HAL_UARTEx_ReceiveToIdle+0x102>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2260      	movs	r2, #96	; 0x60
 8004046:	2100      	movs	r1, #0
 8004048:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800404a:	2312      	movs	r3, #18
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	2160      	movs	r1, #96	; 0x60
 8004052:	5a52      	ldrh	r2, [r2, r1]
 8004054:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	015b      	lsls	r3, r3, #5
 800405e:	429a      	cmp	r2, r3
 8004060:	d108      	bne.n	8004074 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e003      	b.n	800407c <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2200      	movs	r2, #0
 8004080:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004082:	e062      	b.n	800414a <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	2210      	movs	r2, #16
 800408c:	4013      	ands	r3, r2
 800408e:	2b10      	cmp	r3, #16
 8004090:	d110      	bne.n	80040b4 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2210      	movs	r2, #16
 8004098:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2202      	movs	r2, #2
 80040a6:	671a      	str	r2, [r3, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	228c      	movs	r2, #140	; 0x8c
 80040ac:	2120      	movs	r1, #32
 80040ae:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e062      	b.n	800417a <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2220      	movs	r2, #32
 80040bc:	4013      	ands	r3, r2
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d12f      	bne.n	8004122 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10e      	bne.n	80040e6 <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2212      	movs	r2, #18
 80040d2:	18ba      	adds	r2, r7, r2
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	4013      	ands	r3, r2
 80040d8:	b29a      	uxth	r2, r3
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	3302      	adds	r3, #2
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	e00e      	b.n	8004104 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2212      	movs	r2, #18
 80040f0:	18ba      	adds	r2, r7, r2
 80040f2:	8812      	ldrh	r2, [r2, #0]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	4013      	ands	r3, r2
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	225e      	movs	r2, #94	; 0x5e
 8004114:	5a9b      	ldrh	r3, [r3, r2]
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b299      	uxth	r1, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	225e      	movs	r2, #94	; 0x5e
 8004120:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	3301      	adds	r3, #1
 8004126:	d010      	beq.n	800414a <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004128:	f7fd fa18 	bl	800155c <HAL_GetTick>
 800412c:	0002      	movs	r2, r0
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004134:	429a      	cmp	r2, r3
 8004136:	d302      	bcc.n	800413e <HAL_UARTEx_ReceiveToIdle+0x1f6>
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	228c      	movs	r2, #140	; 0x8c
 8004142:	2120      	movs	r1, #32
 8004144:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e017      	b.n	800417a <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	225e      	movs	r2, #94	; 0x5e
 800414e:	5a9b      	ldrh	r3, [r3, r2]
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d196      	bne.n	8004084 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	225c      	movs	r2, #92	; 0x5c
 800415a:	5a9a      	ldrh	r2, [r3, r2]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	215e      	movs	r1, #94	; 0x5e
 8004160:	5a5b      	ldrh	r3, [r3, r1]
 8004162:	b29b      	uxth	r3, r3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	b29a      	uxth	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	228c      	movs	r2, #140	; 0x8c
 8004170:	2120      	movs	r1, #32
 8004172:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b008      	add	sp, #32
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	000001ff 	.word	0x000001ff

08004188 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	226a      	movs	r2, #106	; 0x6a
 800419c:	2101      	movs	r1, #1
 800419e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2268      	movs	r2, #104	; 0x68
 80041a4:	2101      	movs	r1, #1
 80041a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041a8:	e043      	b.n	8004232 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041aa:	260f      	movs	r6, #15
 80041ac:	19bb      	adds	r3, r7, r6
 80041ae:	2208      	movs	r2, #8
 80041b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041b2:	200e      	movs	r0, #14
 80041b4:	183b      	adds	r3, r7, r0
 80041b6:	2208      	movs	r2, #8
 80041b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	0e5b      	lsrs	r3, r3, #25
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	240d      	movs	r4, #13
 80041c6:	193b      	adds	r3, r7, r4
 80041c8:	2107      	movs	r1, #7
 80041ca:	400a      	ands	r2, r1
 80041cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	0f5b      	lsrs	r3, r3, #29
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	250c      	movs	r5, #12
 80041da:	197b      	adds	r3, r7, r5
 80041dc:	2107      	movs	r1, #7
 80041de:	400a      	ands	r2, r1
 80041e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041e2:	183b      	adds	r3, r7, r0
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	197a      	adds	r2, r7, r5
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	4914      	ldr	r1, [pc, #80]	; (800423c <UARTEx_SetNbDataToProcess+0xb4>)
 80041ec:	5c8a      	ldrb	r2, [r1, r2]
 80041ee:	435a      	muls	r2, r3
 80041f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80041f2:	197b      	adds	r3, r7, r5
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <UARTEx_SetNbDataToProcess+0xb8>)
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041fa:	0019      	movs	r1, r3
 80041fc:	f7fc f81e 	bl	800023c <__divsi3>
 8004200:	0003      	movs	r3, r0
 8004202:	b299      	uxth	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	226a      	movs	r2, #106	; 0x6a
 8004208:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800420a:	19bb      	adds	r3, r7, r6
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	193a      	adds	r2, r7, r4
 8004210:	7812      	ldrb	r2, [r2, #0]
 8004212:	490a      	ldr	r1, [pc, #40]	; (800423c <UARTEx_SetNbDataToProcess+0xb4>)
 8004214:	5c8a      	ldrb	r2, [r1, r2]
 8004216:	435a      	muls	r2, r3
 8004218:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800421a:	193b      	adds	r3, r7, r4
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	4a08      	ldr	r2, [pc, #32]	; (8004240 <UARTEx_SetNbDataToProcess+0xb8>)
 8004220:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004222:	0019      	movs	r1, r3
 8004224:	f7fc f80a 	bl	800023c <__divsi3>
 8004228:	0003      	movs	r3, r0
 800422a:	b299      	uxth	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2268      	movs	r2, #104	; 0x68
 8004230:	5299      	strh	r1, [r3, r2]
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b005      	add	sp, #20
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	08005a9c 	.word	0x08005a9c
 8004240:	08005aa4 	.word	0x08005aa4

08004244 <__errno>:
 8004244:	4b01      	ldr	r3, [pc, #4]	; (800424c <__errno+0x8>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	4770      	bx	lr
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	2000009c 	.word	0x2000009c

08004250 <__libc_init_array>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	2600      	movs	r6, #0
 8004254:	4d0c      	ldr	r5, [pc, #48]	; (8004288 <__libc_init_array+0x38>)
 8004256:	4c0d      	ldr	r4, [pc, #52]	; (800428c <__libc_init_array+0x3c>)
 8004258:	1b64      	subs	r4, r4, r5
 800425a:	10a4      	asrs	r4, r4, #2
 800425c:	42a6      	cmp	r6, r4
 800425e:	d109      	bne.n	8004274 <__libc_init_array+0x24>
 8004260:	2600      	movs	r6, #0
 8004262:	f001 fae9 	bl	8005838 <_init>
 8004266:	4d0a      	ldr	r5, [pc, #40]	; (8004290 <__libc_init_array+0x40>)
 8004268:	4c0a      	ldr	r4, [pc, #40]	; (8004294 <__libc_init_array+0x44>)
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	42a6      	cmp	r6, r4
 8004270:	d105      	bne.n	800427e <__libc_init_array+0x2e>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	00b3      	lsls	r3, r6, #2
 8004276:	58eb      	ldr	r3, [r5, r3]
 8004278:	4798      	blx	r3
 800427a:	3601      	adds	r6, #1
 800427c:	e7ee      	b.n	800425c <__libc_init_array+0xc>
 800427e:	00b3      	lsls	r3, r6, #2
 8004280:	58eb      	ldr	r3, [r5, r3]
 8004282:	4798      	blx	r3
 8004284:	3601      	adds	r6, #1
 8004286:	e7f2      	b.n	800426e <__libc_init_array+0x1e>
 8004288:	08005bfc 	.word	0x08005bfc
 800428c:	08005bfc 	.word	0x08005bfc
 8004290:	08005bfc 	.word	0x08005bfc
 8004294:	08005c00 	.word	0x08005c00

08004298 <memset>:
 8004298:	0003      	movs	r3, r0
 800429a:	1882      	adds	r2, r0, r2
 800429c:	4293      	cmp	r3, r2
 800429e:	d100      	bne.n	80042a2 <memset+0xa>
 80042a0:	4770      	bx	lr
 80042a2:	7019      	strb	r1, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	e7f9      	b.n	800429c <memset+0x4>

080042a8 <sniprintf>:
 80042a8:	b40c      	push	{r2, r3}
 80042aa:	b530      	push	{r4, r5, lr}
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <sniprintf+0x64>)
 80042ae:	000c      	movs	r4, r1
 80042b0:	681d      	ldr	r5, [r3, #0]
 80042b2:	b09d      	sub	sp, #116	; 0x74
 80042b4:	2900      	cmp	r1, #0
 80042b6:	da08      	bge.n	80042ca <sniprintf+0x22>
 80042b8:	238b      	movs	r3, #139	; 0x8b
 80042ba:	2001      	movs	r0, #1
 80042bc:	602b      	str	r3, [r5, #0]
 80042be:	4240      	negs	r0, r0
 80042c0:	b01d      	add	sp, #116	; 0x74
 80042c2:	bc30      	pop	{r4, r5}
 80042c4:	bc08      	pop	{r3}
 80042c6:	b002      	add	sp, #8
 80042c8:	4718      	bx	r3
 80042ca:	2382      	movs	r3, #130	; 0x82
 80042cc:	466a      	mov	r2, sp
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	8293      	strh	r3, [r2, #20]
 80042d2:	2300      	movs	r3, #0
 80042d4:	9002      	str	r0, [sp, #8]
 80042d6:	9006      	str	r0, [sp, #24]
 80042d8:	4299      	cmp	r1, r3
 80042da:	d000      	beq.n	80042de <sniprintf+0x36>
 80042dc:	1e4b      	subs	r3, r1, #1
 80042de:	9304      	str	r3, [sp, #16]
 80042e0:	9307      	str	r3, [sp, #28]
 80042e2:	2301      	movs	r3, #1
 80042e4:	466a      	mov	r2, sp
 80042e6:	425b      	negs	r3, r3
 80042e8:	82d3      	strh	r3, [r2, #22]
 80042ea:	0028      	movs	r0, r5
 80042ec:	ab21      	add	r3, sp, #132	; 0x84
 80042ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042f0:	a902      	add	r1, sp, #8
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	f000 fa1e 	bl	8004734 <_svfiprintf_r>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	da01      	bge.n	8004300 <sniprintf+0x58>
 80042fc:	238b      	movs	r3, #139	; 0x8b
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	2c00      	cmp	r4, #0
 8004302:	d0dd      	beq.n	80042c0 <sniprintf+0x18>
 8004304:	2300      	movs	r3, #0
 8004306:	9a02      	ldr	r2, [sp, #8]
 8004308:	7013      	strb	r3, [r2, #0]
 800430a:	e7d9      	b.n	80042c0 <sniprintf+0x18>
 800430c:	2000009c 	.word	0x2000009c

08004310 <siprintf>:
 8004310:	b40e      	push	{r1, r2, r3}
 8004312:	b500      	push	{lr}
 8004314:	490b      	ldr	r1, [pc, #44]	; (8004344 <siprintf+0x34>)
 8004316:	b09c      	sub	sp, #112	; 0x70
 8004318:	ab1d      	add	r3, sp, #116	; 0x74
 800431a:	9002      	str	r0, [sp, #8]
 800431c:	9006      	str	r0, [sp, #24]
 800431e:	9107      	str	r1, [sp, #28]
 8004320:	9104      	str	r1, [sp, #16]
 8004322:	4809      	ldr	r0, [pc, #36]	; (8004348 <siprintf+0x38>)
 8004324:	4909      	ldr	r1, [pc, #36]	; (800434c <siprintf+0x3c>)
 8004326:	cb04      	ldmia	r3!, {r2}
 8004328:	9105      	str	r1, [sp, #20]
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	a902      	add	r1, sp, #8
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	f000 fa00 	bl	8004734 <_svfiprintf_r>
 8004334:	2300      	movs	r3, #0
 8004336:	9a02      	ldr	r2, [sp, #8]
 8004338:	7013      	strb	r3, [r2, #0]
 800433a:	b01c      	add	sp, #112	; 0x70
 800433c:	bc08      	pop	{r3}
 800433e:	b003      	add	sp, #12
 8004340:	4718      	bx	r3
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	7fffffff 	.word	0x7fffffff
 8004348:	2000009c 	.word	0x2000009c
 800434c:	ffff0208 	.word	0xffff0208

08004350 <strncmp>:
 8004350:	b530      	push	{r4, r5, lr}
 8004352:	0005      	movs	r5, r0
 8004354:	1e10      	subs	r0, r2, #0
 8004356:	d008      	beq.n	800436a <strncmp+0x1a>
 8004358:	2400      	movs	r4, #0
 800435a:	3a01      	subs	r2, #1
 800435c:	5d2b      	ldrb	r3, [r5, r4]
 800435e:	5d08      	ldrb	r0, [r1, r4]
 8004360:	4283      	cmp	r3, r0
 8004362:	d101      	bne.n	8004368 <strncmp+0x18>
 8004364:	4294      	cmp	r4, r2
 8004366:	d101      	bne.n	800436c <strncmp+0x1c>
 8004368:	1a18      	subs	r0, r3, r0
 800436a:	bd30      	pop	{r4, r5, pc}
 800436c:	3401      	adds	r4, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f4      	bne.n	800435c <strncmp+0xc>
 8004372:	e7f9      	b.n	8004368 <strncmp+0x18>

08004374 <strtok>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <strtok+0x5c>)
 8004378:	0005      	movs	r5, r0
 800437a:	681f      	ldr	r7, [r3, #0]
 800437c:	000e      	movs	r6, r1
 800437e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004380:	2c00      	cmp	r4, #0
 8004382:	d11d      	bne.n	80043c0 <strtok+0x4c>
 8004384:	2050      	movs	r0, #80	; 0x50
 8004386:	f000 f887 	bl	8004498 <malloc>
 800438a:	1e02      	subs	r2, r0, #0
 800438c:	65b8      	str	r0, [r7, #88]	; 0x58
 800438e:	d104      	bne.n	800439a <strtok+0x26>
 8004390:	2157      	movs	r1, #87	; 0x57
 8004392:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <strtok+0x60>)
 8004394:	4810      	ldr	r0, [pc, #64]	; (80043d8 <strtok+0x64>)
 8004396:	f000 f851 	bl	800443c <__assert_func>
 800439a:	6004      	str	r4, [r0, #0]
 800439c:	6044      	str	r4, [r0, #4]
 800439e:	6084      	str	r4, [r0, #8]
 80043a0:	60c4      	str	r4, [r0, #12]
 80043a2:	6104      	str	r4, [r0, #16]
 80043a4:	6144      	str	r4, [r0, #20]
 80043a6:	6184      	str	r4, [r0, #24]
 80043a8:	6284      	str	r4, [r0, #40]	; 0x28
 80043aa:	62c4      	str	r4, [r0, #44]	; 0x2c
 80043ac:	6304      	str	r4, [r0, #48]	; 0x30
 80043ae:	6344      	str	r4, [r0, #52]	; 0x34
 80043b0:	6384      	str	r4, [r0, #56]	; 0x38
 80043b2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80043b4:	6404      	str	r4, [r0, #64]	; 0x40
 80043b6:	6444      	str	r4, [r0, #68]	; 0x44
 80043b8:	6484      	str	r4, [r0, #72]	; 0x48
 80043ba:	64c4      	str	r4, [r0, #76]	; 0x4c
 80043bc:	7704      	strb	r4, [r0, #28]
 80043be:	6244      	str	r4, [r0, #36]	; 0x24
 80043c0:	0031      	movs	r1, r6
 80043c2:	0028      	movs	r0, r5
 80043c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c6:	2301      	movs	r3, #1
 80043c8:	f000 f808 	bl	80043dc <__strtok_r>
 80043cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	2000009c 	.word	0x2000009c
 80043d4:	08005ab0 	.word	0x08005ab0
 80043d8:	08005ac7 	.word	0x08005ac7

080043dc <__strtok_r>:
 80043dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043de:	2800      	cmp	r0, #0
 80043e0:	d102      	bne.n	80043e8 <__strtok_r+0xc>
 80043e2:	6810      	ldr	r0, [r2, #0]
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d013      	beq.n	8004410 <__strtok_r+0x34>
 80043e8:	0004      	movs	r4, r0
 80043ea:	0020      	movs	r0, r4
 80043ec:	000e      	movs	r6, r1
 80043ee:	7805      	ldrb	r5, [r0, #0]
 80043f0:	3401      	adds	r4, #1
 80043f2:	7837      	ldrb	r7, [r6, #0]
 80043f4:	2f00      	cmp	r7, #0
 80043f6:	d104      	bne.n	8004402 <__strtok_r+0x26>
 80043f8:	2d00      	cmp	r5, #0
 80043fa:	d10f      	bne.n	800441c <__strtok_r+0x40>
 80043fc:	0028      	movs	r0, r5
 80043fe:	6015      	str	r5, [r2, #0]
 8004400:	e006      	b.n	8004410 <__strtok_r+0x34>
 8004402:	3601      	adds	r6, #1
 8004404:	42bd      	cmp	r5, r7
 8004406:	d1f4      	bne.n	80043f2 <__strtok_r+0x16>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ee      	bne.n	80043ea <__strtok_r+0xe>
 800440c:	6014      	str	r4, [r2, #0]
 800440e:	7003      	strb	r3, [r0, #0]
 8004410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004412:	002f      	movs	r7, r5
 8004414:	e00f      	b.n	8004436 <__strtok_r+0x5a>
 8004416:	3301      	adds	r3, #1
 8004418:	2e00      	cmp	r6, #0
 800441a:	d104      	bne.n	8004426 <__strtok_r+0x4a>
 800441c:	0023      	movs	r3, r4
 800441e:	3401      	adds	r4, #1
 8004420:	781d      	ldrb	r5, [r3, #0]
 8004422:	0027      	movs	r7, r4
 8004424:	000b      	movs	r3, r1
 8004426:	781e      	ldrb	r6, [r3, #0]
 8004428:	42b5      	cmp	r5, r6
 800442a:	d1f4      	bne.n	8004416 <__strtok_r+0x3a>
 800442c:	2d00      	cmp	r5, #0
 800442e:	d0f0      	beq.n	8004412 <__strtok_r+0x36>
 8004430:	2300      	movs	r3, #0
 8004432:	3c01      	subs	r4, #1
 8004434:	7023      	strb	r3, [r4, #0]
 8004436:	6017      	str	r7, [r2, #0]
 8004438:	e7ea      	b.n	8004410 <__strtok_r+0x34>
	...

0800443c <__assert_func>:
 800443c:	b530      	push	{r4, r5, lr}
 800443e:	0014      	movs	r4, r2
 8004440:	001a      	movs	r2, r3
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <__assert_func+0x2c>)
 8004444:	0005      	movs	r5, r0
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b085      	sub	sp, #20
 800444a:	68d8      	ldr	r0, [r3, #12]
 800444c:	4b07      	ldr	r3, [pc, #28]	; (800446c <__assert_func+0x30>)
 800444e:	2c00      	cmp	r4, #0
 8004450:	d101      	bne.n	8004456 <__assert_func+0x1a>
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <__assert_func+0x34>)
 8004454:	001c      	movs	r4, r3
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	9100      	str	r1, [sp, #0]
 800445a:	002b      	movs	r3, r5
 800445c:	4905      	ldr	r1, [pc, #20]	; (8004474 <__assert_func+0x38>)
 800445e:	9402      	str	r4, [sp, #8]
 8004460:	f000 f80a 	bl	8004478 <fiprintf>
 8004464:	f000 fe2a 	bl	80050bc <abort>
 8004468:	2000009c 	.word	0x2000009c
 800446c:	08005b24 	.word	0x08005b24
 8004470:	08005b5f 	.word	0x08005b5f
 8004474:	08005b31 	.word	0x08005b31

08004478 <fiprintf>:
 8004478:	b40e      	push	{r1, r2, r3}
 800447a:	b503      	push	{r0, r1, lr}
 800447c:	0001      	movs	r1, r0
 800447e:	ab03      	add	r3, sp, #12
 8004480:	4804      	ldr	r0, [pc, #16]	; (8004494 <fiprintf+0x1c>)
 8004482:	cb04      	ldmia	r3!, {r2}
 8004484:	6800      	ldr	r0, [r0, #0]
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	f000 fa7c 	bl	8004984 <_vfiprintf_r>
 800448c:	b002      	add	sp, #8
 800448e:	bc08      	pop	{r3}
 8004490:	b003      	add	sp, #12
 8004492:	4718      	bx	r3
 8004494:	2000009c 	.word	0x2000009c

08004498 <malloc>:
 8004498:	b510      	push	{r4, lr}
 800449a:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <malloc+0x10>)
 800449c:	0001      	movs	r1, r0
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	f000 f870 	bl	8004584 <_malloc_r>
 80044a4:	bd10      	pop	{r4, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	2000009c 	.word	0x2000009c

080044ac <_free_r>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	0005      	movs	r5, r0
 80044b0:	2900      	cmp	r1, #0
 80044b2:	d010      	beq.n	80044d6 <_free_r+0x2a>
 80044b4:	1f0c      	subs	r4, r1, #4
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	da00      	bge.n	80044be <_free_r+0x12>
 80044bc:	18e4      	adds	r4, r4, r3
 80044be:	0028      	movs	r0, r5
 80044c0:	f001 f86a 	bl	8005598 <__malloc_lock>
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <_free_r+0x90>)
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <_free_r+0x2c>
 80044cc:	6063      	str	r3, [r4, #4]
 80044ce:	6014      	str	r4, [r2, #0]
 80044d0:	0028      	movs	r0, r5
 80044d2:	f001 f869 	bl	80055a8 <__malloc_unlock>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	42a3      	cmp	r3, r4
 80044da:	d908      	bls.n	80044ee <_free_r+0x42>
 80044dc:	6821      	ldr	r1, [r4, #0]
 80044de:	1860      	adds	r0, r4, r1
 80044e0:	4283      	cmp	r3, r0
 80044e2:	d1f3      	bne.n	80044cc <_free_r+0x20>
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	1841      	adds	r1, r0, r1
 80044ea:	6021      	str	r1, [r4, #0]
 80044ec:	e7ee      	b.n	80044cc <_free_r+0x20>
 80044ee:	001a      	movs	r2, r3
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <_free_r+0x4e>
 80044f6:	42a3      	cmp	r3, r4
 80044f8:	d9f9      	bls.n	80044ee <_free_r+0x42>
 80044fa:	6811      	ldr	r1, [r2, #0]
 80044fc:	1850      	adds	r0, r2, r1
 80044fe:	42a0      	cmp	r0, r4
 8004500:	d10b      	bne.n	800451a <_free_r+0x6e>
 8004502:	6820      	ldr	r0, [r4, #0]
 8004504:	1809      	adds	r1, r1, r0
 8004506:	1850      	adds	r0, r2, r1
 8004508:	6011      	str	r1, [r2, #0]
 800450a:	4283      	cmp	r3, r0
 800450c:	d1e0      	bne.n	80044d0 <_free_r+0x24>
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	1841      	adds	r1, r0, r1
 8004514:	6011      	str	r1, [r2, #0]
 8004516:	6053      	str	r3, [r2, #4]
 8004518:	e7da      	b.n	80044d0 <_free_r+0x24>
 800451a:	42a0      	cmp	r0, r4
 800451c:	d902      	bls.n	8004524 <_free_r+0x78>
 800451e:	230c      	movs	r3, #12
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	e7d5      	b.n	80044d0 <_free_r+0x24>
 8004524:	6821      	ldr	r1, [r4, #0]
 8004526:	1860      	adds	r0, r4, r1
 8004528:	4283      	cmp	r3, r0
 800452a:	d103      	bne.n	8004534 <_free_r+0x88>
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	1841      	adds	r1, r0, r1
 8004532:	6021      	str	r1, [r4, #0]
 8004534:	6063      	str	r3, [r4, #4]
 8004536:	6054      	str	r4, [r2, #4]
 8004538:	e7ca      	b.n	80044d0 <_free_r+0x24>
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	200004d0 	.word	0x200004d0

08004540 <sbrk_aligned>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4e0f      	ldr	r6, [pc, #60]	; (8004580 <sbrk_aligned+0x40>)
 8004544:	000d      	movs	r5, r1
 8004546:	6831      	ldr	r1, [r6, #0]
 8004548:	0004      	movs	r4, r0
 800454a:	2900      	cmp	r1, #0
 800454c:	d102      	bne.n	8004554 <sbrk_aligned+0x14>
 800454e:	f000 fcd5 	bl	8004efc <_sbrk_r>
 8004552:	6030      	str	r0, [r6, #0]
 8004554:	0029      	movs	r1, r5
 8004556:	0020      	movs	r0, r4
 8004558:	f000 fcd0 	bl	8004efc <_sbrk_r>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d00a      	beq.n	8004576 <sbrk_aligned+0x36>
 8004560:	2303      	movs	r3, #3
 8004562:	1cc5      	adds	r5, r0, #3
 8004564:	439d      	bics	r5, r3
 8004566:	42a8      	cmp	r0, r5
 8004568:	d007      	beq.n	800457a <sbrk_aligned+0x3a>
 800456a:	1a29      	subs	r1, r5, r0
 800456c:	0020      	movs	r0, r4
 800456e:	f000 fcc5 	bl	8004efc <_sbrk_r>
 8004572:	1c43      	adds	r3, r0, #1
 8004574:	d101      	bne.n	800457a <sbrk_aligned+0x3a>
 8004576:	2501      	movs	r5, #1
 8004578:	426d      	negs	r5, r5
 800457a:	0028      	movs	r0, r5
 800457c:	bd70      	pop	{r4, r5, r6, pc}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	200004d4 	.word	0x200004d4

08004584 <_malloc_r>:
 8004584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004586:	2203      	movs	r2, #3
 8004588:	1ccb      	adds	r3, r1, #3
 800458a:	4393      	bics	r3, r2
 800458c:	3308      	adds	r3, #8
 800458e:	0006      	movs	r6, r0
 8004590:	001f      	movs	r7, r3
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d232      	bcs.n	80045fc <_malloc_r+0x78>
 8004596:	270c      	movs	r7, #12
 8004598:	42b9      	cmp	r1, r7
 800459a:	d831      	bhi.n	8004600 <_malloc_r+0x7c>
 800459c:	0030      	movs	r0, r6
 800459e:	f000 fffb 	bl	8005598 <__malloc_lock>
 80045a2:	4d32      	ldr	r5, [pc, #200]	; (800466c <_malloc_r+0xe8>)
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	001c      	movs	r4, r3
 80045a8:	2c00      	cmp	r4, #0
 80045aa:	d12e      	bne.n	800460a <_malloc_r+0x86>
 80045ac:	0039      	movs	r1, r7
 80045ae:	0030      	movs	r0, r6
 80045b0:	f7ff ffc6 	bl	8004540 <sbrk_aligned>
 80045b4:	0004      	movs	r4, r0
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d11e      	bne.n	80045f8 <_malloc_r+0x74>
 80045ba:	682c      	ldr	r4, [r5, #0]
 80045bc:	0025      	movs	r5, r4
 80045be:	2d00      	cmp	r5, #0
 80045c0:	d14a      	bne.n	8004658 <_malloc_r+0xd4>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	0029      	movs	r1, r5
 80045c6:	18e3      	adds	r3, r4, r3
 80045c8:	0030      	movs	r0, r6
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	f000 fc96 	bl	8004efc <_sbrk_r>
 80045d0:	9b01      	ldr	r3, [sp, #4]
 80045d2:	4283      	cmp	r3, r0
 80045d4:	d143      	bne.n	800465e <_malloc_r+0xda>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	3703      	adds	r7, #3
 80045da:	1aff      	subs	r7, r7, r3
 80045dc:	2303      	movs	r3, #3
 80045de:	439f      	bics	r7, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	2f0c      	cmp	r7, #12
 80045e4:	d200      	bcs.n	80045e8 <_malloc_r+0x64>
 80045e6:	270c      	movs	r7, #12
 80045e8:	0039      	movs	r1, r7
 80045ea:	0030      	movs	r0, r6
 80045ec:	f7ff ffa8 	bl	8004540 <sbrk_aligned>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d034      	beq.n	800465e <_malloc_r+0xda>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	19df      	adds	r7, r3, r7
 80045f8:	6027      	str	r7, [r4, #0]
 80045fa:	e013      	b.n	8004624 <_malloc_r+0xa0>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	dacb      	bge.n	8004598 <_malloc_r+0x14>
 8004600:	230c      	movs	r3, #12
 8004602:	2500      	movs	r5, #0
 8004604:	6033      	str	r3, [r6, #0]
 8004606:	0028      	movs	r0, r5
 8004608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800460a:	6822      	ldr	r2, [r4, #0]
 800460c:	1bd1      	subs	r1, r2, r7
 800460e:	d420      	bmi.n	8004652 <_malloc_r+0xce>
 8004610:	290b      	cmp	r1, #11
 8004612:	d917      	bls.n	8004644 <_malloc_r+0xc0>
 8004614:	19e2      	adds	r2, r4, r7
 8004616:	6027      	str	r7, [r4, #0]
 8004618:	42a3      	cmp	r3, r4
 800461a:	d111      	bne.n	8004640 <_malloc_r+0xbc>
 800461c:	602a      	str	r2, [r5, #0]
 800461e:	6863      	ldr	r3, [r4, #4]
 8004620:	6011      	str	r1, [r2, #0]
 8004622:	6053      	str	r3, [r2, #4]
 8004624:	0030      	movs	r0, r6
 8004626:	0025      	movs	r5, r4
 8004628:	f000 ffbe 	bl	80055a8 <__malloc_unlock>
 800462c:	2207      	movs	r2, #7
 800462e:	350b      	adds	r5, #11
 8004630:	1d23      	adds	r3, r4, #4
 8004632:	4395      	bics	r5, r2
 8004634:	1aea      	subs	r2, r5, r3
 8004636:	429d      	cmp	r5, r3
 8004638:	d0e5      	beq.n	8004606 <_malloc_r+0x82>
 800463a:	1b5b      	subs	r3, r3, r5
 800463c:	50a3      	str	r3, [r4, r2]
 800463e:	e7e2      	b.n	8004606 <_malloc_r+0x82>
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	e7ec      	b.n	800461e <_malloc_r+0x9a>
 8004644:	6862      	ldr	r2, [r4, #4]
 8004646:	42a3      	cmp	r3, r4
 8004648:	d101      	bne.n	800464e <_malloc_r+0xca>
 800464a:	602a      	str	r2, [r5, #0]
 800464c:	e7ea      	b.n	8004624 <_malloc_r+0xa0>
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	e7e8      	b.n	8004624 <_malloc_r+0xa0>
 8004652:	0023      	movs	r3, r4
 8004654:	6864      	ldr	r4, [r4, #4]
 8004656:	e7a7      	b.n	80045a8 <_malloc_r+0x24>
 8004658:	002c      	movs	r4, r5
 800465a:	686d      	ldr	r5, [r5, #4]
 800465c:	e7af      	b.n	80045be <_malloc_r+0x3a>
 800465e:	230c      	movs	r3, #12
 8004660:	0030      	movs	r0, r6
 8004662:	6033      	str	r3, [r6, #0]
 8004664:	f000 ffa0 	bl	80055a8 <__malloc_unlock>
 8004668:	e7cd      	b.n	8004606 <_malloc_r+0x82>
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	200004d0 	.word	0x200004d0

08004670 <__ssputs_r>:
 8004670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004672:	688e      	ldr	r6, [r1, #8]
 8004674:	b085      	sub	sp, #20
 8004676:	0007      	movs	r7, r0
 8004678:	000c      	movs	r4, r1
 800467a:	9203      	str	r2, [sp, #12]
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	429e      	cmp	r6, r3
 8004680:	d83c      	bhi.n	80046fc <__ssputs_r+0x8c>
 8004682:	2390      	movs	r3, #144	; 0x90
 8004684:	898a      	ldrh	r2, [r1, #12]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	421a      	tst	r2, r3
 800468a:	d034      	beq.n	80046f6 <__ssputs_r+0x86>
 800468c:	6909      	ldr	r1, [r1, #16]
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	6960      	ldr	r0, [r4, #20]
 8004692:	1a5b      	subs	r3, r3, r1
 8004694:	9302      	str	r3, [sp, #8]
 8004696:	2303      	movs	r3, #3
 8004698:	4343      	muls	r3, r0
 800469a:	0fdd      	lsrs	r5, r3, #31
 800469c:	18ed      	adds	r5, r5, r3
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	9802      	ldr	r0, [sp, #8]
 80046a2:	3301      	adds	r3, #1
 80046a4:	181b      	adds	r3, r3, r0
 80046a6:	106d      	asrs	r5, r5, #1
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	d900      	bls.n	80046ae <__ssputs_r+0x3e>
 80046ac:	001d      	movs	r5, r3
 80046ae:	0553      	lsls	r3, r2, #21
 80046b0:	d532      	bpl.n	8004718 <__ssputs_r+0xa8>
 80046b2:	0029      	movs	r1, r5
 80046b4:	0038      	movs	r0, r7
 80046b6:	f7ff ff65 	bl	8004584 <_malloc_r>
 80046ba:	1e06      	subs	r6, r0, #0
 80046bc:	d109      	bne.n	80046d2 <__ssputs_r+0x62>
 80046be:	230c      	movs	r3, #12
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	2340      	movs	r3, #64	; 0x40
 80046c4:	2001      	movs	r0, #1
 80046c6:	89a2      	ldrh	r2, [r4, #12]
 80046c8:	4240      	negs	r0, r0
 80046ca:	4313      	orrs	r3, r2
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	b005      	add	sp, #20
 80046d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d2:	9a02      	ldr	r2, [sp, #8]
 80046d4:	6921      	ldr	r1, [r4, #16]
 80046d6:	f000 ff42 	bl	800555e <memcpy>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	4a14      	ldr	r2, [pc, #80]	; (8004730 <__ssputs_r+0xc0>)
 80046de:	401a      	ands	r2, r3
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	4313      	orrs	r3, r2
 80046e4:	81a3      	strh	r3, [r4, #12]
 80046e6:	9b02      	ldr	r3, [sp, #8]
 80046e8:	6126      	str	r6, [r4, #16]
 80046ea:	18f6      	adds	r6, r6, r3
 80046ec:	6026      	str	r6, [r4, #0]
 80046ee:	6165      	str	r5, [r4, #20]
 80046f0:	9e01      	ldr	r6, [sp, #4]
 80046f2:	1aed      	subs	r5, r5, r3
 80046f4:	60a5      	str	r5, [r4, #8]
 80046f6:	9b01      	ldr	r3, [sp, #4]
 80046f8:	429e      	cmp	r6, r3
 80046fa:	d900      	bls.n	80046fe <__ssputs_r+0x8e>
 80046fc:	9e01      	ldr	r6, [sp, #4]
 80046fe:	0032      	movs	r2, r6
 8004700:	9903      	ldr	r1, [sp, #12]
 8004702:	6820      	ldr	r0, [r4, #0]
 8004704:	f000 ff34 	bl	8005570 <memmove>
 8004708:	68a3      	ldr	r3, [r4, #8]
 800470a:	2000      	movs	r0, #0
 800470c:	1b9b      	subs	r3, r3, r6
 800470e:	60a3      	str	r3, [r4, #8]
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	199e      	adds	r6, r3, r6
 8004714:	6026      	str	r6, [r4, #0]
 8004716:	e7da      	b.n	80046ce <__ssputs_r+0x5e>
 8004718:	002a      	movs	r2, r5
 800471a:	0038      	movs	r0, r7
 800471c:	f000 ff4c 	bl	80055b8 <_realloc_r>
 8004720:	1e06      	subs	r6, r0, #0
 8004722:	d1e0      	bne.n	80046e6 <__ssputs_r+0x76>
 8004724:	0038      	movs	r0, r7
 8004726:	6921      	ldr	r1, [r4, #16]
 8004728:	f7ff fec0 	bl	80044ac <_free_r>
 800472c:	e7c7      	b.n	80046be <__ssputs_r+0x4e>
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	fffffb7f 	.word	0xfffffb7f

08004734 <_svfiprintf_r>:
 8004734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004736:	b0a1      	sub	sp, #132	; 0x84
 8004738:	9003      	str	r0, [sp, #12]
 800473a:	001d      	movs	r5, r3
 800473c:	898b      	ldrh	r3, [r1, #12]
 800473e:	000f      	movs	r7, r1
 8004740:	0016      	movs	r6, r2
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	d511      	bpl.n	800476a <_svfiprintf_r+0x36>
 8004746:	690b      	ldr	r3, [r1, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10e      	bne.n	800476a <_svfiprintf_r+0x36>
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	f7ff ff19 	bl	8004584 <_malloc_r>
 8004752:	6038      	str	r0, [r7, #0]
 8004754:	6138      	str	r0, [r7, #16]
 8004756:	2800      	cmp	r0, #0
 8004758:	d105      	bne.n	8004766 <_svfiprintf_r+0x32>
 800475a:	230c      	movs	r3, #12
 800475c:	9a03      	ldr	r2, [sp, #12]
 800475e:	3801      	subs	r0, #1
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	b021      	add	sp, #132	; 0x84
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	2300      	movs	r3, #0
 800476c:	ac08      	add	r4, sp, #32
 800476e:	6163      	str	r3, [r4, #20]
 8004770:	3320      	adds	r3, #32
 8004772:	7663      	strb	r3, [r4, #25]
 8004774:	3310      	adds	r3, #16
 8004776:	76a3      	strb	r3, [r4, #26]
 8004778:	9507      	str	r5, [sp, #28]
 800477a:	0035      	movs	r5, r6
 800477c:	782b      	ldrb	r3, [r5, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <_svfiprintf_r+0x52>
 8004782:	2b25      	cmp	r3, #37	; 0x25
 8004784:	d147      	bne.n	8004816 <_svfiprintf_r+0xe2>
 8004786:	1bab      	subs	r3, r5, r6
 8004788:	9305      	str	r3, [sp, #20]
 800478a:	42b5      	cmp	r5, r6
 800478c:	d00c      	beq.n	80047a8 <_svfiprintf_r+0x74>
 800478e:	0032      	movs	r2, r6
 8004790:	0039      	movs	r1, r7
 8004792:	9803      	ldr	r0, [sp, #12]
 8004794:	f7ff ff6c 	bl	8004670 <__ssputs_r>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d100      	bne.n	800479e <_svfiprintf_r+0x6a>
 800479c:	e0ae      	b.n	80048fc <_svfiprintf_r+0x1c8>
 800479e:	6962      	ldr	r2, [r4, #20]
 80047a0:	9b05      	ldr	r3, [sp, #20]
 80047a2:	4694      	mov	ip, r2
 80047a4:	4463      	add	r3, ip
 80047a6:	6163      	str	r3, [r4, #20]
 80047a8:	782b      	ldrb	r3, [r5, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d100      	bne.n	80047b0 <_svfiprintf_r+0x7c>
 80047ae:	e0a5      	b.n	80048fc <_svfiprintf_r+0x1c8>
 80047b0:	2201      	movs	r2, #1
 80047b2:	2300      	movs	r3, #0
 80047b4:	4252      	negs	r2, r2
 80047b6:	6062      	str	r2, [r4, #4]
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	3254      	adds	r2, #84	; 0x54
 80047bc:	1852      	adds	r2, r2, r1
 80047be:	1c6e      	adds	r6, r5, #1
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	60e3      	str	r3, [r4, #12]
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	7013      	strb	r3, [r2, #0]
 80047c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80047ca:	2205      	movs	r2, #5
 80047cc:	7831      	ldrb	r1, [r6, #0]
 80047ce:	4854      	ldr	r0, [pc, #336]	; (8004920 <_svfiprintf_r+0x1ec>)
 80047d0:	f000 feba 	bl	8005548 <memchr>
 80047d4:	1c75      	adds	r5, r6, #1
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d11f      	bne.n	800481a <_svfiprintf_r+0xe6>
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	06d3      	lsls	r3, r2, #27
 80047de:	d504      	bpl.n	80047ea <_svfiprintf_r+0xb6>
 80047e0:	2353      	movs	r3, #83	; 0x53
 80047e2:	a904      	add	r1, sp, #16
 80047e4:	185b      	adds	r3, r3, r1
 80047e6:	2120      	movs	r1, #32
 80047e8:	7019      	strb	r1, [r3, #0]
 80047ea:	0713      	lsls	r3, r2, #28
 80047ec:	d504      	bpl.n	80047f8 <_svfiprintf_r+0xc4>
 80047ee:	2353      	movs	r3, #83	; 0x53
 80047f0:	a904      	add	r1, sp, #16
 80047f2:	185b      	adds	r3, r3, r1
 80047f4:	212b      	movs	r1, #43	; 0x2b
 80047f6:	7019      	strb	r1, [r3, #0]
 80047f8:	7833      	ldrb	r3, [r6, #0]
 80047fa:	2b2a      	cmp	r3, #42	; 0x2a
 80047fc:	d016      	beq.n	800482c <_svfiprintf_r+0xf8>
 80047fe:	0035      	movs	r5, r6
 8004800:	2100      	movs	r1, #0
 8004802:	200a      	movs	r0, #10
 8004804:	68e3      	ldr	r3, [r4, #12]
 8004806:	782a      	ldrb	r2, [r5, #0]
 8004808:	1c6e      	adds	r6, r5, #1
 800480a:	3a30      	subs	r2, #48	; 0x30
 800480c:	2a09      	cmp	r2, #9
 800480e:	d94e      	bls.n	80048ae <_svfiprintf_r+0x17a>
 8004810:	2900      	cmp	r1, #0
 8004812:	d111      	bne.n	8004838 <_svfiprintf_r+0x104>
 8004814:	e017      	b.n	8004846 <_svfiprintf_r+0x112>
 8004816:	3501      	adds	r5, #1
 8004818:	e7b0      	b.n	800477c <_svfiprintf_r+0x48>
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <_svfiprintf_r+0x1ec>)
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	1ac0      	subs	r0, r0, r3
 8004820:	2301      	movs	r3, #1
 8004822:	4083      	lsls	r3, r0
 8004824:	4313      	orrs	r3, r2
 8004826:	002e      	movs	r6, r5
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	e7ce      	b.n	80047ca <_svfiprintf_r+0x96>
 800482c:	9b07      	ldr	r3, [sp, #28]
 800482e:	1d19      	adds	r1, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	9107      	str	r1, [sp, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db01      	blt.n	800483c <_svfiprintf_r+0x108>
 8004838:	930b      	str	r3, [sp, #44]	; 0x2c
 800483a:	e004      	b.n	8004846 <_svfiprintf_r+0x112>
 800483c:	425b      	negs	r3, r3
 800483e:	60e3      	str	r3, [r4, #12]
 8004840:	2302      	movs	r3, #2
 8004842:	4313      	orrs	r3, r2
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	782b      	ldrb	r3, [r5, #0]
 8004848:	2b2e      	cmp	r3, #46	; 0x2e
 800484a:	d10a      	bne.n	8004862 <_svfiprintf_r+0x12e>
 800484c:	786b      	ldrb	r3, [r5, #1]
 800484e:	2b2a      	cmp	r3, #42	; 0x2a
 8004850:	d135      	bne.n	80048be <_svfiprintf_r+0x18a>
 8004852:	9b07      	ldr	r3, [sp, #28]
 8004854:	3502      	adds	r5, #2
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	9207      	str	r2, [sp, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db2b      	blt.n	80048b8 <_svfiprintf_r+0x184>
 8004860:	9309      	str	r3, [sp, #36]	; 0x24
 8004862:	4e30      	ldr	r6, [pc, #192]	; (8004924 <_svfiprintf_r+0x1f0>)
 8004864:	2203      	movs	r2, #3
 8004866:	0030      	movs	r0, r6
 8004868:	7829      	ldrb	r1, [r5, #0]
 800486a:	f000 fe6d 	bl	8005548 <memchr>
 800486e:	2800      	cmp	r0, #0
 8004870:	d006      	beq.n	8004880 <_svfiprintf_r+0x14c>
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	1b80      	subs	r0, r0, r6
 8004876:	4083      	lsls	r3, r0
 8004878:	6822      	ldr	r2, [r4, #0]
 800487a:	3501      	adds	r5, #1
 800487c:	4313      	orrs	r3, r2
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	7829      	ldrb	r1, [r5, #0]
 8004882:	2206      	movs	r2, #6
 8004884:	4828      	ldr	r0, [pc, #160]	; (8004928 <_svfiprintf_r+0x1f4>)
 8004886:	1c6e      	adds	r6, r5, #1
 8004888:	7621      	strb	r1, [r4, #24]
 800488a:	f000 fe5d 	bl	8005548 <memchr>
 800488e:	2800      	cmp	r0, #0
 8004890:	d03c      	beq.n	800490c <_svfiprintf_r+0x1d8>
 8004892:	4b26      	ldr	r3, [pc, #152]	; (800492c <_svfiprintf_r+0x1f8>)
 8004894:	2b00      	cmp	r3, #0
 8004896:	d125      	bne.n	80048e4 <_svfiprintf_r+0x1b0>
 8004898:	2207      	movs	r2, #7
 800489a:	9b07      	ldr	r3, [sp, #28]
 800489c:	3307      	adds	r3, #7
 800489e:	4393      	bics	r3, r2
 80048a0:	3308      	adds	r3, #8
 80048a2:	9307      	str	r3, [sp, #28]
 80048a4:	6963      	ldr	r3, [r4, #20]
 80048a6:	9a04      	ldr	r2, [sp, #16]
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	6163      	str	r3, [r4, #20]
 80048ac:	e765      	b.n	800477a <_svfiprintf_r+0x46>
 80048ae:	4343      	muls	r3, r0
 80048b0:	0035      	movs	r5, r6
 80048b2:	2101      	movs	r1, #1
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	e7a6      	b.n	8004806 <_svfiprintf_r+0xd2>
 80048b8:	2301      	movs	r3, #1
 80048ba:	425b      	negs	r3, r3
 80048bc:	e7d0      	b.n	8004860 <_svfiprintf_r+0x12c>
 80048be:	2300      	movs	r3, #0
 80048c0:	200a      	movs	r0, #10
 80048c2:	001a      	movs	r2, r3
 80048c4:	3501      	adds	r5, #1
 80048c6:	6063      	str	r3, [r4, #4]
 80048c8:	7829      	ldrb	r1, [r5, #0]
 80048ca:	1c6e      	adds	r6, r5, #1
 80048cc:	3930      	subs	r1, #48	; 0x30
 80048ce:	2909      	cmp	r1, #9
 80048d0:	d903      	bls.n	80048da <_svfiprintf_r+0x1a6>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0c5      	beq.n	8004862 <_svfiprintf_r+0x12e>
 80048d6:	9209      	str	r2, [sp, #36]	; 0x24
 80048d8:	e7c3      	b.n	8004862 <_svfiprintf_r+0x12e>
 80048da:	4342      	muls	r2, r0
 80048dc:	0035      	movs	r5, r6
 80048de:	2301      	movs	r3, #1
 80048e0:	1852      	adds	r2, r2, r1
 80048e2:	e7f1      	b.n	80048c8 <_svfiprintf_r+0x194>
 80048e4:	ab07      	add	r3, sp, #28
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	003a      	movs	r2, r7
 80048ea:	0021      	movs	r1, r4
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <_svfiprintf_r+0x1fc>)
 80048ee:	9803      	ldr	r0, [sp, #12]
 80048f0:	e000      	b.n	80048f4 <_svfiprintf_r+0x1c0>
 80048f2:	bf00      	nop
 80048f4:	9004      	str	r0, [sp, #16]
 80048f6:	9b04      	ldr	r3, [sp, #16]
 80048f8:	3301      	adds	r3, #1
 80048fa:	d1d3      	bne.n	80048a4 <_svfiprintf_r+0x170>
 80048fc:	89bb      	ldrh	r3, [r7, #12]
 80048fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004900:	065b      	lsls	r3, r3, #25
 8004902:	d400      	bmi.n	8004906 <_svfiprintf_r+0x1d2>
 8004904:	e72d      	b.n	8004762 <_svfiprintf_r+0x2e>
 8004906:	2001      	movs	r0, #1
 8004908:	4240      	negs	r0, r0
 800490a:	e72a      	b.n	8004762 <_svfiprintf_r+0x2e>
 800490c:	ab07      	add	r3, sp, #28
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	003a      	movs	r2, r7
 8004912:	0021      	movs	r1, r4
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <_svfiprintf_r+0x1fc>)
 8004916:	9803      	ldr	r0, [sp, #12]
 8004918:	f000 f9de 	bl	8004cd8 <_printf_i>
 800491c:	e7ea      	b.n	80048f4 <_svfiprintf_r+0x1c0>
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	08005b60 	.word	0x08005b60
 8004924:	08005b66 	.word	0x08005b66
 8004928:	08005b6a 	.word	0x08005b6a
 800492c:	00000000 	.word	0x00000000
 8004930:	08004671 	.word	0x08004671

08004934 <__sfputc_r>:
 8004934:	6893      	ldr	r3, [r2, #8]
 8004936:	b510      	push	{r4, lr}
 8004938:	3b01      	subs	r3, #1
 800493a:	6093      	str	r3, [r2, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	da04      	bge.n	800494a <__sfputc_r+0x16>
 8004940:	6994      	ldr	r4, [r2, #24]
 8004942:	42a3      	cmp	r3, r4
 8004944:	db07      	blt.n	8004956 <__sfputc_r+0x22>
 8004946:	290a      	cmp	r1, #10
 8004948:	d005      	beq.n	8004956 <__sfputc_r+0x22>
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	1c58      	adds	r0, r3, #1
 800494e:	6010      	str	r0, [r2, #0]
 8004950:	7019      	strb	r1, [r3, #0]
 8004952:	0008      	movs	r0, r1
 8004954:	bd10      	pop	{r4, pc}
 8004956:	f000 fae3 	bl	8004f20 <__swbuf_r>
 800495a:	0001      	movs	r1, r0
 800495c:	e7f9      	b.n	8004952 <__sfputc_r+0x1e>

0800495e <__sfputs_r>:
 800495e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004960:	0006      	movs	r6, r0
 8004962:	000f      	movs	r7, r1
 8004964:	0014      	movs	r4, r2
 8004966:	18d5      	adds	r5, r2, r3
 8004968:	42ac      	cmp	r4, r5
 800496a:	d101      	bne.n	8004970 <__sfputs_r+0x12>
 800496c:	2000      	movs	r0, #0
 800496e:	e007      	b.n	8004980 <__sfputs_r+0x22>
 8004970:	7821      	ldrb	r1, [r4, #0]
 8004972:	003a      	movs	r2, r7
 8004974:	0030      	movs	r0, r6
 8004976:	f7ff ffdd 	bl	8004934 <__sfputc_r>
 800497a:	3401      	adds	r4, #1
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d1f3      	bne.n	8004968 <__sfputs_r+0xa>
 8004980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004984 <_vfiprintf_r>:
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	b0a1      	sub	sp, #132	; 0x84
 8004988:	0006      	movs	r6, r0
 800498a:	000c      	movs	r4, r1
 800498c:	001f      	movs	r7, r3
 800498e:	9203      	str	r2, [sp, #12]
 8004990:	2800      	cmp	r0, #0
 8004992:	d004      	beq.n	800499e <_vfiprintf_r+0x1a>
 8004994:	6983      	ldr	r3, [r0, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <_vfiprintf_r+0x1a>
 800499a:	f000 fcc5 	bl	8005328 <__sinit>
 800499e:	4b8e      	ldr	r3, [pc, #568]	; (8004bd8 <_vfiprintf_r+0x254>)
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d11c      	bne.n	80049de <_vfiprintf_r+0x5a>
 80049a4:	6874      	ldr	r4, [r6, #4]
 80049a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049a8:	07db      	lsls	r3, r3, #31
 80049aa:	d405      	bmi.n	80049b8 <_vfiprintf_r+0x34>
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	059b      	lsls	r3, r3, #22
 80049b0:	d402      	bmi.n	80049b8 <_vfiprintf_r+0x34>
 80049b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049b4:	f000 fd59 	bl	800546a <__retarget_lock_acquire_recursive>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	071b      	lsls	r3, r3, #28
 80049bc:	d502      	bpl.n	80049c4 <_vfiprintf_r+0x40>
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11d      	bne.n	8004a00 <_vfiprintf_r+0x7c>
 80049c4:	0021      	movs	r1, r4
 80049c6:	0030      	movs	r0, r6
 80049c8:	f000 fb00 	bl	8004fcc <__swsetup_r>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d017      	beq.n	8004a00 <_vfiprintf_r+0x7c>
 80049d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049d2:	07db      	lsls	r3, r3, #31
 80049d4:	d50d      	bpl.n	80049f2 <_vfiprintf_r+0x6e>
 80049d6:	2001      	movs	r0, #1
 80049d8:	4240      	negs	r0, r0
 80049da:	b021      	add	sp, #132	; 0x84
 80049dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049de:	4b7f      	ldr	r3, [pc, #508]	; (8004bdc <_vfiprintf_r+0x258>)
 80049e0:	429c      	cmp	r4, r3
 80049e2:	d101      	bne.n	80049e8 <_vfiprintf_r+0x64>
 80049e4:	68b4      	ldr	r4, [r6, #8]
 80049e6:	e7de      	b.n	80049a6 <_vfiprintf_r+0x22>
 80049e8:	4b7d      	ldr	r3, [pc, #500]	; (8004be0 <_vfiprintf_r+0x25c>)
 80049ea:	429c      	cmp	r4, r3
 80049ec:	d1db      	bne.n	80049a6 <_vfiprintf_r+0x22>
 80049ee:	68f4      	ldr	r4, [r6, #12]
 80049f0:	e7d9      	b.n	80049a6 <_vfiprintf_r+0x22>
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	059b      	lsls	r3, r3, #22
 80049f6:	d4ee      	bmi.n	80049d6 <_vfiprintf_r+0x52>
 80049f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049fa:	f000 fd37 	bl	800546c <__retarget_lock_release_recursive>
 80049fe:	e7ea      	b.n	80049d6 <_vfiprintf_r+0x52>
 8004a00:	2300      	movs	r3, #0
 8004a02:	ad08      	add	r5, sp, #32
 8004a04:	616b      	str	r3, [r5, #20]
 8004a06:	3320      	adds	r3, #32
 8004a08:	766b      	strb	r3, [r5, #25]
 8004a0a:	3310      	adds	r3, #16
 8004a0c:	76ab      	strb	r3, [r5, #26]
 8004a0e:	9707      	str	r7, [sp, #28]
 8004a10:	9f03      	ldr	r7, [sp, #12]
 8004a12:	783b      	ldrb	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <_vfiprintf_r+0x98>
 8004a18:	2b25      	cmp	r3, #37	; 0x25
 8004a1a:	d14e      	bne.n	8004aba <_vfiprintf_r+0x136>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	1afb      	subs	r3, r7, r3
 8004a20:	9305      	str	r3, [sp, #20]
 8004a22:	9b03      	ldr	r3, [sp, #12]
 8004a24:	429f      	cmp	r7, r3
 8004a26:	d00d      	beq.n	8004a44 <_vfiprintf_r+0xc0>
 8004a28:	9b05      	ldr	r3, [sp, #20]
 8004a2a:	0021      	movs	r1, r4
 8004a2c:	0030      	movs	r0, r6
 8004a2e:	9a03      	ldr	r2, [sp, #12]
 8004a30:	f7ff ff95 	bl	800495e <__sfputs_r>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d100      	bne.n	8004a3a <_vfiprintf_r+0xb6>
 8004a38:	e0b5      	b.n	8004ba6 <_vfiprintf_r+0x222>
 8004a3a:	696a      	ldr	r2, [r5, #20]
 8004a3c:	9b05      	ldr	r3, [sp, #20]
 8004a3e:	4694      	mov	ip, r2
 8004a40:	4463      	add	r3, ip
 8004a42:	616b      	str	r3, [r5, #20]
 8004a44:	783b      	ldrb	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d100      	bne.n	8004a4c <_vfiprintf_r+0xc8>
 8004a4a:	e0ac      	b.n	8004ba6 <_vfiprintf_r+0x222>
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	1c7b      	adds	r3, r7, #1
 8004a50:	9303      	str	r3, [sp, #12]
 8004a52:	2300      	movs	r3, #0
 8004a54:	4252      	negs	r2, r2
 8004a56:	606a      	str	r2, [r5, #4]
 8004a58:	a904      	add	r1, sp, #16
 8004a5a:	3254      	adds	r2, #84	; 0x54
 8004a5c:	1852      	adds	r2, r2, r1
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	60eb      	str	r3, [r5, #12]
 8004a62:	60ab      	str	r3, [r5, #8]
 8004a64:	7013      	strb	r3, [r2, #0]
 8004a66:	65ab      	str	r3, [r5, #88]	; 0x58
 8004a68:	9b03      	ldr	r3, [sp, #12]
 8004a6a:	2205      	movs	r2, #5
 8004a6c:	7819      	ldrb	r1, [r3, #0]
 8004a6e:	485d      	ldr	r0, [pc, #372]	; (8004be4 <_vfiprintf_r+0x260>)
 8004a70:	f000 fd6a 	bl	8005548 <memchr>
 8004a74:	9b03      	ldr	r3, [sp, #12]
 8004a76:	1c5f      	adds	r7, r3, #1
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d120      	bne.n	8004abe <_vfiprintf_r+0x13a>
 8004a7c:	682a      	ldr	r2, [r5, #0]
 8004a7e:	06d3      	lsls	r3, r2, #27
 8004a80:	d504      	bpl.n	8004a8c <_vfiprintf_r+0x108>
 8004a82:	2353      	movs	r3, #83	; 0x53
 8004a84:	a904      	add	r1, sp, #16
 8004a86:	185b      	adds	r3, r3, r1
 8004a88:	2120      	movs	r1, #32
 8004a8a:	7019      	strb	r1, [r3, #0]
 8004a8c:	0713      	lsls	r3, r2, #28
 8004a8e:	d504      	bpl.n	8004a9a <_vfiprintf_r+0x116>
 8004a90:	2353      	movs	r3, #83	; 0x53
 8004a92:	a904      	add	r1, sp, #16
 8004a94:	185b      	adds	r3, r3, r1
 8004a96:	212b      	movs	r1, #43	; 0x2b
 8004a98:	7019      	strb	r1, [r3, #0]
 8004a9a:	9b03      	ldr	r3, [sp, #12]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa0:	d016      	beq.n	8004ad0 <_vfiprintf_r+0x14c>
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	68eb      	ldr	r3, [r5, #12]
 8004aa6:	9f03      	ldr	r7, [sp, #12]
 8004aa8:	783a      	ldrb	r2, [r7, #0]
 8004aaa:	1c78      	adds	r0, r7, #1
 8004aac:	3a30      	subs	r2, #48	; 0x30
 8004aae:	4684      	mov	ip, r0
 8004ab0:	2a09      	cmp	r2, #9
 8004ab2:	d94f      	bls.n	8004b54 <_vfiprintf_r+0x1d0>
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	d111      	bne.n	8004adc <_vfiprintf_r+0x158>
 8004ab8:	e017      	b.n	8004aea <_vfiprintf_r+0x166>
 8004aba:	3701      	adds	r7, #1
 8004abc:	e7a9      	b.n	8004a12 <_vfiprintf_r+0x8e>
 8004abe:	4b49      	ldr	r3, [pc, #292]	; (8004be4 <_vfiprintf_r+0x260>)
 8004ac0:	682a      	ldr	r2, [r5, #0]
 8004ac2:	1ac0      	subs	r0, r0, r3
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4083      	lsls	r3, r0
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	9703      	str	r7, [sp, #12]
 8004ace:	e7cb      	b.n	8004a68 <_vfiprintf_r+0xe4>
 8004ad0:	9b07      	ldr	r3, [sp, #28]
 8004ad2:	1d19      	adds	r1, r3, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	9107      	str	r1, [sp, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	db01      	blt.n	8004ae0 <_vfiprintf_r+0x15c>
 8004adc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ade:	e004      	b.n	8004aea <_vfiprintf_r+0x166>
 8004ae0:	425b      	negs	r3, r3
 8004ae2:	60eb      	str	r3, [r5, #12]
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	783b      	ldrb	r3, [r7, #0]
 8004aec:	2b2e      	cmp	r3, #46	; 0x2e
 8004aee:	d10a      	bne.n	8004b06 <_vfiprintf_r+0x182>
 8004af0:	787b      	ldrb	r3, [r7, #1]
 8004af2:	2b2a      	cmp	r3, #42	; 0x2a
 8004af4:	d137      	bne.n	8004b66 <_vfiprintf_r+0x1e2>
 8004af6:	9b07      	ldr	r3, [sp, #28]
 8004af8:	3702      	adds	r7, #2
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	9207      	str	r2, [sp, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	db2d      	blt.n	8004b60 <_vfiprintf_r+0x1dc>
 8004b04:	9309      	str	r3, [sp, #36]	; 0x24
 8004b06:	2203      	movs	r2, #3
 8004b08:	7839      	ldrb	r1, [r7, #0]
 8004b0a:	4837      	ldr	r0, [pc, #220]	; (8004be8 <_vfiprintf_r+0x264>)
 8004b0c:	f000 fd1c 	bl	8005548 <memchr>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d007      	beq.n	8004b24 <_vfiprintf_r+0x1a0>
 8004b14:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <_vfiprintf_r+0x264>)
 8004b16:	682a      	ldr	r2, [r5, #0]
 8004b18:	1ac0      	subs	r0, r0, r3
 8004b1a:	2340      	movs	r3, #64	; 0x40
 8004b1c:	4083      	lsls	r3, r0
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	3701      	adds	r7, #1
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	7839      	ldrb	r1, [r7, #0]
 8004b26:	1c7b      	adds	r3, r7, #1
 8004b28:	2206      	movs	r2, #6
 8004b2a:	4830      	ldr	r0, [pc, #192]	; (8004bec <_vfiprintf_r+0x268>)
 8004b2c:	9303      	str	r3, [sp, #12]
 8004b2e:	7629      	strb	r1, [r5, #24]
 8004b30:	f000 fd0a 	bl	8005548 <memchr>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d045      	beq.n	8004bc4 <_vfiprintf_r+0x240>
 8004b38:	4b2d      	ldr	r3, [pc, #180]	; (8004bf0 <_vfiprintf_r+0x26c>)
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d127      	bne.n	8004b8e <_vfiprintf_r+0x20a>
 8004b3e:	2207      	movs	r2, #7
 8004b40:	9b07      	ldr	r3, [sp, #28]
 8004b42:	3307      	adds	r3, #7
 8004b44:	4393      	bics	r3, r2
 8004b46:	3308      	adds	r3, #8
 8004b48:	9307      	str	r3, [sp, #28]
 8004b4a:	696b      	ldr	r3, [r5, #20]
 8004b4c:	9a04      	ldr	r2, [sp, #16]
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	616b      	str	r3, [r5, #20]
 8004b52:	e75d      	b.n	8004a10 <_vfiprintf_r+0x8c>
 8004b54:	210a      	movs	r1, #10
 8004b56:	434b      	muls	r3, r1
 8004b58:	4667      	mov	r7, ip
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	3909      	subs	r1, #9
 8004b5e:	e7a3      	b.n	8004aa8 <_vfiprintf_r+0x124>
 8004b60:	2301      	movs	r3, #1
 8004b62:	425b      	negs	r3, r3
 8004b64:	e7ce      	b.n	8004b04 <_vfiprintf_r+0x180>
 8004b66:	2300      	movs	r3, #0
 8004b68:	001a      	movs	r2, r3
 8004b6a:	3701      	adds	r7, #1
 8004b6c:	606b      	str	r3, [r5, #4]
 8004b6e:	7839      	ldrb	r1, [r7, #0]
 8004b70:	1c78      	adds	r0, r7, #1
 8004b72:	3930      	subs	r1, #48	; 0x30
 8004b74:	4684      	mov	ip, r0
 8004b76:	2909      	cmp	r1, #9
 8004b78:	d903      	bls.n	8004b82 <_vfiprintf_r+0x1fe>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0c3      	beq.n	8004b06 <_vfiprintf_r+0x182>
 8004b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8004b80:	e7c1      	b.n	8004b06 <_vfiprintf_r+0x182>
 8004b82:	230a      	movs	r3, #10
 8004b84:	435a      	muls	r2, r3
 8004b86:	4667      	mov	r7, ip
 8004b88:	1852      	adds	r2, r2, r1
 8004b8a:	3b09      	subs	r3, #9
 8004b8c:	e7ef      	b.n	8004b6e <_vfiprintf_r+0x1ea>
 8004b8e:	ab07      	add	r3, sp, #28
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	0022      	movs	r2, r4
 8004b94:	0029      	movs	r1, r5
 8004b96:	0030      	movs	r0, r6
 8004b98:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <_vfiprintf_r+0x270>)
 8004b9a:	e000      	b.n	8004b9e <_vfiprintf_r+0x21a>
 8004b9c:	bf00      	nop
 8004b9e:	9004      	str	r0, [sp, #16]
 8004ba0:	9b04      	ldr	r3, [sp, #16]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	d1d1      	bne.n	8004b4a <_vfiprintf_r+0x1c6>
 8004ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ba8:	07db      	lsls	r3, r3, #31
 8004baa:	d405      	bmi.n	8004bb8 <_vfiprintf_r+0x234>
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	059b      	lsls	r3, r3, #22
 8004bb0:	d402      	bmi.n	8004bb8 <_vfiprintf_r+0x234>
 8004bb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bb4:	f000 fc5a 	bl	800546c <__retarget_lock_release_recursive>
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	065b      	lsls	r3, r3, #25
 8004bbc:	d500      	bpl.n	8004bc0 <_vfiprintf_r+0x23c>
 8004bbe:	e70a      	b.n	80049d6 <_vfiprintf_r+0x52>
 8004bc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004bc2:	e70a      	b.n	80049da <_vfiprintf_r+0x56>
 8004bc4:	ab07      	add	r3, sp, #28
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	0022      	movs	r2, r4
 8004bca:	0029      	movs	r1, r5
 8004bcc:	0030      	movs	r0, r6
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <_vfiprintf_r+0x270>)
 8004bd0:	f000 f882 	bl	8004cd8 <_printf_i>
 8004bd4:	e7e3      	b.n	8004b9e <_vfiprintf_r+0x21a>
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	08005bb4 	.word	0x08005bb4
 8004bdc:	08005bd4 	.word	0x08005bd4
 8004be0:	08005b94 	.word	0x08005b94
 8004be4:	08005b60 	.word	0x08005b60
 8004be8:	08005b66 	.word	0x08005b66
 8004bec:	08005b6a 	.word	0x08005b6a
 8004bf0:	00000000 	.word	0x00000000
 8004bf4:	0800495f 	.word	0x0800495f

08004bf8 <_printf_common>:
 8004bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bfa:	0015      	movs	r5, r2
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	688a      	ldr	r2, [r1, #8]
 8004c00:	690b      	ldr	r3, [r1, #16]
 8004c02:	000c      	movs	r4, r1
 8004c04:	9000      	str	r0, [sp, #0]
 8004c06:	4293      	cmp	r3, r2
 8004c08:	da00      	bge.n	8004c0c <_printf_common+0x14>
 8004c0a:	0013      	movs	r3, r2
 8004c0c:	0022      	movs	r2, r4
 8004c0e:	602b      	str	r3, [r5, #0]
 8004c10:	3243      	adds	r2, #67	; 0x43
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	2a00      	cmp	r2, #0
 8004c16:	d001      	beq.n	8004c1c <_printf_common+0x24>
 8004c18:	3301      	adds	r3, #1
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	069b      	lsls	r3, r3, #26
 8004c20:	d502      	bpl.n	8004c28 <_printf_common+0x30>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	3302      	adds	r3, #2
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	6822      	ldr	r2, [r4, #0]
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	0017      	movs	r7, r2
 8004c2e:	401f      	ands	r7, r3
 8004c30:	421a      	tst	r2, r3
 8004c32:	d027      	beq.n	8004c84 <_printf_common+0x8c>
 8004c34:	0023      	movs	r3, r4
 8004c36:	3343      	adds	r3, #67	; 0x43
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	4193      	sbcs	r3, r2
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	0692      	lsls	r2, r2, #26
 8004c42:	d430      	bmi.n	8004ca6 <_printf_common+0xae>
 8004c44:	0022      	movs	r2, r4
 8004c46:	9901      	ldr	r1, [sp, #4]
 8004c48:	9800      	ldr	r0, [sp, #0]
 8004c4a:	9e08      	ldr	r6, [sp, #32]
 8004c4c:	3243      	adds	r2, #67	; 0x43
 8004c4e:	47b0      	blx	r6
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d025      	beq.n	8004ca0 <_printf_common+0xa8>
 8004c54:	2306      	movs	r3, #6
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	682a      	ldr	r2, [r5, #0]
 8004c5a:	68e1      	ldr	r1, [r4, #12]
 8004c5c:	2500      	movs	r5, #0
 8004c5e:	4003      	ands	r3, r0
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d103      	bne.n	8004c6c <_printf_common+0x74>
 8004c64:	1a8d      	subs	r5, r1, r2
 8004c66:	43eb      	mvns	r3, r5
 8004c68:	17db      	asrs	r3, r3, #31
 8004c6a:	401d      	ands	r5, r3
 8004c6c:	68a3      	ldr	r3, [r4, #8]
 8004c6e:	6922      	ldr	r2, [r4, #16]
 8004c70:	4293      	cmp	r3, r2
 8004c72:	dd01      	ble.n	8004c78 <_printf_common+0x80>
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	18ed      	adds	r5, r5, r3
 8004c78:	2700      	movs	r7, #0
 8004c7a:	42bd      	cmp	r5, r7
 8004c7c:	d120      	bne.n	8004cc0 <_printf_common+0xc8>
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e010      	b.n	8004ca4 <_printf_common+0xac>
 8004c82:	3701      	adds	r7, #1
 8004c84:	68e3      	ldr	r3, [r4, #12]
 8004c86:	682a      	ldr	r2, [r5, #0]
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	42bb      	cmp	r3, r7
 8004c8c:	ddd2      	ble.n	8004c34 <_printf_common+0x3c>
 8004c8e:	0022      	movs	r2, r4
 8004c90:	2301      	movs	r3, #1
 8004c92:	9901      	ldr	r1, [sp, #4]
 8004c94:	9800      	ldr	r0, [sp, #0]
 8004c96:	9e08      	ldr	r6, [sp, #32]
 8004c98:	3219      	adds	r2, #25
 8004c9a:	47b0      	blx	r6
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d1f0      	bne.n	8004c82 <_printf_common+0x8a>
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	4240      	negs	r0, r0
 8004ca4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ca6:	2030      	movs	r0, #48	; 0x30
 8004ca8:	18e1      	adds	r1, r4, r3
 8004caa:	3143      	adds	r1, #67	; 0x43
 8004cac:	7008      	strb	r0, [r1, #0]
 8004cae:	0021      	movs	r1, r4
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	3145      	adds	r1, #69	; 0x45
 8004cb4:	7809      	ldrb	r1, [r1, #0]
 8004cb6:	18a2      	adds	r2, r4, r2
 8004cb8:	3243      	adds	r2, #67	; 0x43
 8004cba:	3302      	adds	r3, #2
 8004cbc:	7011      	strb	r1, [r2, #0]
 8004cbe:	e7c1      	b.n	8004c44 <_printf_common+0x4c>
 8004cc0:	0022      	movs	r2, r4
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	9901      	ldr	r1, [sp, #4]
 8004cc6:	9800      	ldr	r0, [sp, #0]
 8004cc8:	9e08      	ldr	r6, [sp, #32]
 8004cca:	321a      	adds	r2, #26
 8004ccc:	47b0      	blx	r6
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	d0e6      	beq.n	8004ca0 <_printf_common+0xa8>
 8004cd2:	3701      	adds	r7, #1
 8004cd4:	e7d1      	b.n	8004c7a <_printf_common+0x82>
	...

08004cd8 <_printf_i>:
 8004cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cda:	b08b      	sub	sp, #44	; 0x2c
 8004cdc:	9206      	str	r2, [sp, #24]
 8004cde:	000a      	movs	r2, r1
 8004ce0:	3243      	adds	r2, #67	; 0x43
 8004ce2:	9307      	str	r3, [sp, #28]
 8004ce4:	9005      	str	r0, [sp, #20]
 8004ce6:	9204      	str	r2, [sp, #16]
 8004ce8:	7e0a      	ldrb	r2, [r1, #24]
 8004cea:	000c      	movs	r4, r1
 8004cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cee:	2a78      	cmp	r2, #120	; 0x78
 8004cf0:	d807      	bhi.n	8004d02 <_printf_i+0x2a>
 8004cf2:	2a62      	cmp	r2, #98	; 0x62
 8004cf4:	d809      	bhi.n	8004d0a <_printf_i+0x32>
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	d100      	bne.n	8004cfc <_printf_i+0x24>
 8004cfa:	e0c1      	b.n	8004e80 <_printf_i+0x1a8>
 8004cfc:	2a58      	cmp	r2, #88	; 0x58
 8004cfe:	d100      	bne.n	8004d02 <_printf_i+0x2a>
 8004d00:	e08c      	b.n	8004e1c <_printf_i+0x144>
 8004d02:	0026      	movs	r6, r4
 8004d04:	3642      	adds	r6, #66	; 0x42
 8004d06:	7032      	strb	r2, [r6, #0]
 8004d08:	e022      	b.n	8004d50 <_printf_i+0x78>
 8004d0a:	0010      	movs	r0, r2
 8004d0c:	3863      	subs	r0, #99	; 0x63
 8004d0e:	2815      	cmp	r0, #21
 8004d10:	d8f7      	bhi.n	8004d02 <_printf_i+0x2a>
 8004d12:	f7fb f9ff 	bl	8000114 <__gnu_thumb1_case_shi>
 8004d16:	0016      	.short	0x0016
 8004d18:	fff6001f 	.word	0xfff6001f
 8004d1c:	fff6fff6 	.word	0xfff6fff6
 8004d20:	001ffff6 	.word	0x001ffff6
 8004d24:	fff6fff6 	.word	0xfff6fff6
 8004d28:	fff6fff6 	.word	0xfff6fff6
 8004d2c:	003600a8 	.word	0x003600a8
 8004d30:	fff6009a 	.word	0xfff6009a
 8004d34:	00b9fff6 	.word	0x00b9fff6
 8004d38:	0036fff6 	.word	0x0036fff6
 8004d3c:	fff6fff6 	.word	0xfff6fff6
 8004d40:	009e      	.short	0x009e
 8004d42:	0026      	movs	r6, r4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	3642      	adds	r6, #66	; 0x42
 8004d48:	1d11      	adds	r1, r2, #4
 8004d4a:	6019      	str	r1, [r3, #0]
 8004d4c:	6813      	ldr	r3, [r2, #0]
 8004d4e:	7033      	strb	r3, [r6, #0]
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0a7      	b.n	8004ea4 <_printf_i+0x1cc>
 8004d54:	6808      	ldr	r0, [r1, #0]
 8004d56:	6819      	ldr	r1, [r3, #0]
 8004d58:	1d0a      	adds	r2, r1, #4
 8004d5a:	0605      	lsls	r5, r0, #24
 8004d5c:	d50b      	bpl.n	8004d76 <_printf_i+0x9e>
 8004d5e:	680d      	ldr	r5, [r1, #0]
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	2d00      	cmp	r5, #0
 8004d64:	da03      	bge.n	8004d6e <_printf_i+0x96>
 8004d66:	232d      	movs	r3, #45	; 0x2d
 8004d68:	9a04      	ldr	r2, [sp, #16]
 8004d6a:	426d      	negs	r5, r5
 8004d6c:	7013      	strb	r3, [r2, #0]
 8004d6e:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <_printf_i+0x21c>)
 8004d70:	270a      	movs	r7, #10
 8004d72:	9303      	str	r3, [sp, #12]
 8004d74:	e01b      	b.n	8004dae <_printf_i+0xd6>
 8004d76:	680d      	ldr	r5, [r1, #0]
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	0641      	lsls	r1, r0, #25
 8004d7c:	d5f1      	bpl.n	8004d62 <_printf_i+0x8a>
 8004d7e:	b22d      	sxth	r5, r5
 8004d80:	e7ef      	b.n	8004d62 <_printf_i+0x8a>
 8004d82:	680d      	ldr	r5, [r1, #0]
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	1d08      	adds	r0, r1, #4
 8004d88:	6018      	str	r0, [r3, #0]
 8004d8a:	062e      	lsls	r6, r5, #24
 8004d8c:	d501      	bpl.n	8004d92 <_printf_i+0xba>
 8004d8e:	680d      	ldr	r5, [r1, #0]
 8004d90:	e003      	b.n	8004d9a <_printf_i+0xc2>
 8004d92:	066d      	lsls	r5, r5, #25
 8004d94:	d5fb      	bpl.n	8004d8e <_printf_i+0xb6>
 8004d96:	680d      	ldr	r5, [r1, #0]
 8004d98:	b2ad      	uxth	r5, r5
 8004d9a:	4b56      	ldr	r3, [pc, #344]	; (8004ef4 <_printf_i+0x21c>)
 8004d9c:	2708      	movs	r7, #8
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	2a6f      	cmp	r2, #111	; 0x6f
 8004da2:	d000      	beq.n	8004da6 <_printf_i+0xce>
 8004da4:	3702      	adds	r7, #2
 8004da6:	0023      	movs	r3, r4
 8004da8:	2200      	movs	r2, #0
 8004daa:	3343      	adds	r3, #67	; 0x43
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	6863      	ldr	r3, [r4, #4]
 8004db0:	60a3      	str	r3, [r4, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	db03      	blt.n	8004dbe <_printf_i+0xe6>
 8004db6:	2204      	movs	r2, #4
 8004db8:	6821      	ldr	r1, [r4, #0]
 8004dba:	4391      	bics	r1, r2
 8004dbc:	6021      	str	r1, [r4, #0]
 8004dbe:	2d00      	cmp	r5, #0
 8004dc0:	d102      	bne.n	8004dc8 <_printf_i+0xf0>
 8004dc2:	9e04      	ldr	r6, [sp, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00c      	beq.n	8004de2 <_printf_i+0x10a>
 8004dc8:	9e04      	ldr	r6, [sp, #16]
 8004dca:	0028      	movs	r0, r5
 8004dcc:	0039      	movs	r1, r7
 8004dce:	f7fb fa31 	bl	8000234 <__aeabi_uidivmod>
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	3e01      	subs	r6, #1
 8004dd6:	5c5b      	ldrb	r3, [r3, r1]
 8004dd8:	7033      	strb	r3, [r6, #0]
 8004dda:	002b      	movs	r3, r5
 8004ddc:	0005      	movs	r5, r0
 8004dde:	429f      	cmp	r7, r3
 8004de0:	d9f3      	bls.n	8004dca <_printf_i+0xf2>
 8004de2:	2f08      	cmp	r7, #8
 8004de4:	d109      	bne.n	8004dfa <_printf_i+0x122>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	07db      	lsls	r3, r3, #31
 8004dea:	d506      	bpl.n	8004dfa <_printf_i+0x122>
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	6922      	ldr	r2, [r4, #16]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	dc02      	bgt.n	8004dfa <_printf_i+0x122>
 8004df4:	2330      	movs	r3, #48	; 0x30
 8004df6:	3e01      	subs	r6, #1
 8004df8:	7033      	strb	r3, [r6, #0]
 8004dfa:	9b04      	ldr	r3, [sp, #16]
 8004dfc:	1b9b      	subs	r3, r3, r6
 8004dfe:	6123      	str	r3, [r4, #16]
 8004e00:	9b07      	ldr	r3, [sp, #28]
 8004e02:	0021      	movs	r1, r4
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	9805      	ldr	r0, [sp, #20]
 8004e08:	9b06      	ldr	r3, [sp, #24]
 8004e0a:	aa09      	add	r2, sp, #36	; 0x24
 8004e0c:	f7ff fef4 	bl	8004bf8 <_printf_common>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d14c      	bne.n	8004eae <_printf_i+0x1d6>
 8004e14:	2001      	movs	r0, #1
 8004e16:	4240      	negs	r0, r0
 8004e18:	b00b      	add	sp, #44	; 0x2c
 8004e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1c:	3145      	adds	r1, #69	; 0x45
 8004e1e:	700a      	strb	r2, [r1, #0]
 8004e20:	4a34      	ldr	r2, [pc, #208]	; (8004ef4 <_printf_i+0x21c>)
 8004e22:	9203      	str	r2, [sp, #12]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	6821      	ldr	r1, [r4, #0]
 8004e28:	ca20      	ldmia	r2!, {r5}
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	0608      	lsls	r0, r1, #24
 8004e2e:	d516      	bpl.n	8004e5e <_printf_i+0x186>
 8004e30:	07cb      	lsls	r3, r1, #31
 8004e32:	d502      	bpl.n	8004e3a <_printf_i+0x162>
 8004e34:	2320      	movs	r3, #32
 8004e36:	4319      	orrs	r1, r3
 8004e38:	6021      	str	r1, [r4, #0]
 8004e3a:	2710      	movs	r7, #16
 8004e3c:	2d00      	cmp	r5, #0
 8004e3e:	d1b2      	bne.n	8004da6 <_printf_i+0xce>
 8004e40:	2320      	movs	r3, #32
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	439a      	bics	r2, r3
 8004e46:	6022      	str	r2, [r4, #0]
 8004e48:	e7ad      	b.n	8004da6 <_printf_i+0xce>
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	6809      	ldr	r1, [r1, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	0022      	movs	r2, r4
 8004e54:	2178      	movs	r1, #120	; 0x78
 8004e56:	3245      	adds	r2, #69	; 0x45
 8004e58:	7011      	strb	r1, [r2, #0]
 8004e5a:	4a27      	ldr	r2, [pc, #156]	; (8004ef8 <_printf_i+0x220>)
 8004e5c:	e7e1      	b.n	8004e22 <_printf_i+0x14a>
 8004e5e:	0648      	lsls	r0, r1, #25
 8004e60:	d5e6      	bpl.n	8004e30 <_printf_i+0x158>
 8004e62:	b2ad      	uxth	r5, r5
 8004e64:	e7e4      	b.n	8004e30 <_printf_i+0x158>
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	680d      	ldr	r5, [r1, #0]
 8004e6a:	1d10      	adds	r0, r2, #4
 8004e6c:	6949      	ldr	r1, [r1, #20]
 8004e6e:	6018      	str	r0, [r3, #0]
 8004e70:	6813      	ldr	r3, [r2, #0]
 8004e72:	062e      	lsls	r6, r5, #24
 8004e74:	d501      	bpl.n	8004e7a <_printf_i+0x1a2>
 8004e76:	6019      	str	r1, [r3, #0]
 8004e78:	e002      	b.n	8004e80 <_printf_i+0x1a8>
 8004e7a:	066d      	lsls	r5, r5, #25
 8004e7c:	d5fb      	bpl.n	8004e76 <_printf_i+0x19e>
 8004e7e:	8019      	strh	r1, [r3, #0]
 8004e80:	2300      	movs	r3, #0
 8004e82:	9e04      	ldr	r6, [sp, #16]
 8004e84:	6123      	str	r3, [r4, #16]
 8004e86:	e7bb      	b.n	8004e00 <_printf_i+0x128>
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	1d11      	adds	r1, r2, #4
 8004e8c:	6019      	str	r1, [r3, #0]
 8004e8e:	6816      	ldr	r6, [r2, #0]
 8004e90:	2100      	movs	r1, #0
 8004e92:	0030      	movs	r0, r6
 8004e94:	6862      	ldr	r2, [r4, #4]
 8004e96:	f000 fb57 	bl	8005548 <memchr>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d001      	beq.n	8004ea2 <_printf_i+0x1ca>
 8004e9e:	1b80      	subs	r0, r0, r6
 8004ea0:	6060      	str	r0, [r4, #4]
 8004ea2:	6863      	ldr	r3, [r4, #4]
 8004ea4:	6123      	str	r3, [r4, #16]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9a04      	ldr	r2, [sp, #16]
 8004eaa:	7013      	strb	r3, [r2, #0]
 8004eac:	e7a8      	b.n	8004e00 <_printf_i+0x128>
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	0032      	movs	r2, r6
 8004eb2:	9906      	ldr	r1, [sp, #24]
 8004eb4:	9805      	ldr	r0, [sp, #20]
 8004eb6:	9d07      	ldr	r5, [sp, #28]
 8004eb8:	47a8      	blx	r5
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	d0aa      	beq.n	8004e14 <_printf_i+0x13c>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	079b      	lsls	r3, r3, #30
 8004ec2:	d415      	bmi.n	8004ef0 <_printf_i+0x218>
 8004ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec6:	68e0      	ldr	r0, [r4, #12]
 8004ec8:	4298      	cmp	r0, r3
 8004eca:	daa5      	bge.n	8004e18 <_printf_i+0x140>
 8004ecc:	0018      	movs	r0, r3
 8004ece:	e7a3      	b.n	8004e18 <_printf_i+0x140>
 8004ed0:	0022      	movs	r2, r4
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	9906      	ldr	r1, [sp, #24]
 8004ed6:	9805      	ldr	r0, [sp, #20]
 8004ed8:	9e07      	ldr	r6, [sp, #28]
 8004eda:	3219      	adds	r2, #25
 8004edc:	47b0      	blx	r6
 8004ede:	1c43      	adds	r3, r0, #1
 8004ee0:	d098      	beq.n	8004e14 <_printf_i+0x13c>
 8004ee2:	3501      	adds	r5, #1
 8004ee4:	68e3      	ldr	r3, [r4, #12]
 8004ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	42ab      	cmp	r3, r5
 8004eec:	dcf0      	bgt.n	8004ed0 <_printf_i+0x1f8>
 8004eee:	e7e9      	b.n	8004ec4 <_printf_i+0x1ec>
 8004ef0:	2500      	movs	r5, #0
 8004ef2:	e7f7      	b.n	8004ee4 <_printf_i+0x20c>
 8004ef4:	08005b71 	.word	0x08005b71
 8004ef8:	08005b82 	.word	0x08005b82

08004efc <_sbrk_r>:
 8004efc:	2300      	movs	r3, #0
 8004efe:	b570      	push	{r4, r5, r6, lr}
 8004f00:	4d06      	ldr	r5, [pc, #24]	; (8004f1c <_sbrk_r+0x20>)
 8004f02:	0004      	movs	r4, r0
 8004f04:	0008      	movs	r0, r1
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	f7fc fa46 	bl	8001398 <_sbrk>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d103      	bne.n	8004f18 <_sbrk_r+0x1c>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d000      	beq.n	8004f18 <_sbrk_r+0x1c>
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	bd70      	pop	{r4, r5, r6, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	200004dc 	.word	0x200004dc

08004f20 <__swbuf_r>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	0005      	movs	r5, r0
 8004f24:	000e      	movs	r6, r1
 8004f26:	0014      	movs	r4, r2
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d004      	beq.n	8004f36 <__swbuf_r+0x16>
 8004f2c:	6983      	ldr	r3, [r0, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <__swbuf_r+0x16>
 8004f32:	f000 f9f9 	bl	8005328 <__sinit>
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <__swbuf_r+0xa0>)
 8004f38:	429c      	cmp	r4, r3
 8004f3a:	d12e      	bne.n	8004f9a <__swbuf_r+0x7a>
 8004f3c:	686c      	ldr	r4, [r5, #4]
 8004f3e:	69a3      	ldr	r3, [r4, #24]
 8004f40:	60a3      	str	r3, [r4, #8]
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	071b      	lsls	r3, r3, #28
 8004f46:	d532      	bpl.n	8004fae <__swbuf_r+0x8e>
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d02f      	beq.n	8004fae <__swbuf_r+0x8e>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	6922      	ldr	r2, [r4, #16]
 8004f52:	b2f7      	uxtb	r7, r6
 8004f54:	1a98      	subs	r0, r3, r2
 8004f56:	6963      	ldr	r3, [r4, #20]
 8004f58:	b2f6      	uxtb	r6, r6
 8004f5a:	4283      	cmp	r3, r0
 8004f5c:	dc05      	bgt.n	8004f6a <__swbuf_r+0x4a>
 8004f5e:	0021      	movs	r1, r4
 8004f60:	0028      	movs	r0, r5
 8004f62:	f000 f93f 	bl	80051e4 <_fflush_r>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d127      	bne.n	8004fba <__swbuf_r+0x9a>
 8004f6a:	68a3      	ldr	r3, [r4, #8]
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	60a3      	str	r3, [r4, #8]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	6022      	str	r2, [r4, #0]
 8004f78:	701f      	strb	r7, [r3, #0]
 8004f7a:	6963      	ldr	r3, [r4, #20]
 8004f7c:	4283      	cmp	r3, r0
 8004f7e:	d004      	beq.n	8004f8a <__swbuf_r+0x6a>
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	07db      	lsls	r3, r3, #31
 8004f84:	d507      	bpl.n	8004f96 <__swbuf_r+0x76>
 8004f86:	2e0a      	cmp	r6, #10
 8004f88:	d105      	bne.n	8004f96 <__swbuf_r+0x76>
 8004f8a:	0021      	movs	r1, r4
 8004f8c:	0028      	movs	r0, r5
 8004f8e:	f000 f929 	bl	80051e4 <_fflush_r>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d111      	bne.n	8004fba <__swbuf_r+0x9a>
 8004f96:	0030      	movs	r0, r6
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <__swbuf_r+0xa4>)
 8004f9c:	429c      	cmp	r4, r3
 8004f9e:	d101      	bne.n	8004fa4 <__swbuf_r+0x84>
 8004fa0:	68ac      	ldr	r4, [r5, #8]
 8004fa2:	e7cc      	b.n	8004f3e <__swbuf_r+0x1e>
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <__swbuf_r+0xa8>)
 8004fa6:	429c      	cmp	r4, r3
 8004fa8:	d1c9      	bne.n	8004f3e <__swbuf_r+0x1e>
 8004faa:	68ec      	ldr	r4, [r5, #12]
 8004fac:	e7c7      	b.n	8004f3e <__swbuf_r+0x1e>
 8004fae:	0021      	movs	r1, r4
 8004fb0:	0028      	movs	r0, r5
 8004fb2:	f000 f80b 	bl	8004fcc <__swsetup_r>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0c9      	beq.n	8004f4e <__swbuf_r+0x2e>
 8004fba:	2601      	movs	r6, #1
 8004fbc:	4276      	negs	r6, r6
 8004fbe:	e7ea      	b.n	8004f96 <__swbuf_r+0x76>
 8004fc0:	08005bb4 	.word	0x08005bb4
 8004fc4:	08005bd4 	.word	0x08005bd4
 8004fc8:	08005b94 	.word	0x08005b94

08004fcc <__swsetup_r>:
 8004fcc:	4b37      	ldr	r3, [pc, #220]	; (80050ac <__swsetup_r+0xe0>)
 8004fce:	b570      	push	{r4, r5, r6, lr}
 8004fd0:	681d      	ldr	r5, [r3, #0]
 8004fd2:	0006      	movs	r6, r0
 8004fd4:	000c      	movs	r4, r1
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	d005      	beq.n	8004fe6 <__swsetup_r+0x1a>
 8004fda:	69ab      	ldr	r3, [r5, #24]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <__swsetup_r+0x1a>
 8004fe0:	0028      	movs	r0, r5
 8004fe2:	f000 f9a1 	bl	8005328 <__sinit>
 8004fe6:	4b32      	ldr	r3, [pc, #200]	; (80050b0 <__swsetup_r+0xe4>)
 8004fe8:	429c      	cmp	r4, r3
 8004fea:	d10f      	bne.n	800500c <__swsetup_r+0x40>
 8004fec:	686c      	ldr	r4, [r5, #4]
 8004fee:	230c      	movs	r3, #12
 8004ff0:	5ee2      	ldrsh	r2, [r4, r3]
 8004ff2:	b293      	uxth	r3, r2
 8004ff4:	0711      	lsls	r1, r2, #28
 8004ff6:	d42d      	bmi.n	8005054 <__swsetup_r+0x88>
 8004ff8:	06d9      	lsls	r1, r3, #27
 8004ffa:	d411      	bmi.n	8005020 <__swsetup_r+0x54>
 8004ffc:	2309      	movs	r3, #9
 8004ffe:	2001      	movs	r0, #1
 8005000:	6033      	str	r3, [r6, #0]
 8005002:	3337      	adds	r3, #55	; 0x37
 8005004:	4313      	orrs	r3, r2
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	4240      	negs	r0, r0
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	4b29      	ldr	r3, [pc, #164]	; (80050b4 <__swsetup_r+0xe8>)
 800500e:	429c      	cmp	r4, r3
 8005010:	d101      	bne.n	8005016 <__swsetup_r+0x4a>
 8005012:	68ac      	ldr	r4, [r5, #8]
 8005014:	e7eb      	b.n	8004fee <__swsetup_r+0x22>
 8005016:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <__swsetup_r+0xec>)
 8005018:	429c      	cmp	r4, r3
 800501a:	d1e8      	bne.n	8004fee <__swsetup_r+0x22>
 800501c:	68ec      	ldr	r4, [r5, #12]
 800501e:	e7e6      	b.n	8004fee <__swsetup_r+0x22>
 8005020:	075b      	lsls	r3, r3, #29
 8005022:	d513      	bpl.n	800504c <__swsetup_r+0x80>
 8005024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005026:	2900      	cmp	r1, #0
 8005028:	d008      	beq.n	800503c <__swsetup_r+0x70>
 800502a:	0023      	movs	r3, r4
 800502c:	3344      	adds	r3, #68	; 0x44
 800502e:	4299      	cmp	r1, r3
 8005030:	d002      	beq.n	8005038 <__swsetup_r+0x6c>
 8005032:	0030      	movs	r0, r6
 8005034:	f7ff fa3a 	bl	80044ac <_free_r>
 8005038:	2300      	movs	r3, #0
 800503a:	6363      	str	r3, [r4, #52]	; 0x34
 800503c:	2224      	movs	r2, #36	; 0x24
 800503e:	89a3      	ldrh	r3, [r4, #12]
 8005040:	4393      	bics	r3, r2
 8005042:	81a3      	strh	r3, [r4, #12]
 8005044:	2300      	movs	r3, #0
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	2308      	movs	r3, #8
 800504e:	89a2      	ldrh	r2, [r4, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	81a3      	strh	r3, [r4, #12]
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <__swsetup_r+0xa6>
 800505a:	21a0      	movs	r1, #160	; 0xa0
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	0089      	lsls	r1, r1, #2
 8005062:	0092      	lsls	r2, r2, #2
 8005064:	400b      	ands	r3, r1
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <__swsetup_r+0xa6>
 800506a:	0021      	movs	r1, r4
 800506c:	0030      	movs	r0, r6
 800506e:	f000 fa27 	bl	80054c0 <__smakebuf_r>
 8005072:	220c      	movs	r2, #12
 8005074:	5ea3      	ldrsh	r3, [r4, r2]
 8005076:	2001      	movs	r0, #1
 8005078:	001a      	movs	r2, r3
 800507a:	b299      	uxth	r1, r3
 800507c:	4002      	ands	r2, r0
 800507e:	4203      	tst	r3, r0
 8005080:	d00f      	beq.n	80050a2 <__swsetup_r+0xd6>
 8005082:	2200      	movs	r2, #0
 8005084:	60a2      	str	r2, [r4, #8]
 8005086:	6962      	ldr	r2, [r4, #20]
 8005088:	4252      	negs	r2, r2
 800508a:	61a2      	str	r2, [r4, #24]
 800508c:	2000      	movs	r0, #0
 800508e:	6922      	ldr	r2, [r4, #16]
 8005090:	4282      	cmp	r2, r0
 8005092:	d1ba      	bne.n	800500a <__swsetup_r+0x3e>
 8005094:	060a      	lsls	r2, r1, #24
 8005096:	d5b8      	bpl.n	800500a <__swsetup_r+0x3e>
 8005098:	2240      	movs	r2, #64	; 0x40
 800509a:	4313      	orrs	r3, r2
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	3801      	subs	r0, #1
 80050a0:	e7b3      	b.n	800500a <__swsetup_r+0x3e>
 80050a2:	0788      	lsls	r0, r1, #30
 80050a4:	d400      	bmi.n	80050a8 <__swsetup_r+0xdc>
 80050a6:	6962      	ldr	r2, [r4, #20]
 80050a8:	60a2      	str	r2, [r4, #8]
 80050aa:	e7ef      	b.n	800508c <__swsetup_r+0xc0>
 80050ac:	2000009c 	.word	0x2000009c
 80050b0:	08005bb4 	.word	0x08005bb4
 80050b4:	08005bd4 	.word	0x08005bd4
 80050b8:	08005b94 	.word	0x08005b94

080050bc <abort>:
 80050bc:	2006      	movs	r0, #6
 80050be:	b510      	push	{r4, lr}
 80050c0:	f000 fad4 	bl	800566c <raise>
 80050c4:	2001      	movs	r0, #1
 80050c6:	f7fc f8f5 	bl	80012b4 <_exit>
	...

080050cc <__sflush_r>:
 80050cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ce:	898b      	ldrh	r3, [r1, #12]
 80050d0:	0005      	movs	r5, r0
 80050d2:	000c      	movs	r4, r1
 80050d4:	071a      	lsls	r2, r3, #28
 80050d6:	d45f      	bmi.n	8005198 <__sflush_r+0xcc>
 80050d8:	684a      	ldr	r2, [r1, #4]
 80050da:	2a00      	cmp	r2, #0
 80050dc:	dc04      	bgt.n	80050e8 <__sflush_r+0x1c>
 80050de:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80050e0:	2a00      	cmp	r2, #0
 80050e2:	dc01      	bgt.n	80050e8 <__sflush_r+0x1c>
 80050e4:	2000      	movs	r0, #0
 80050e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050e8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80050ea:	2f00      	cmp	r7, #0
 80050ec:	d0fa      	beq.n	80050e4 <__sflush_r+0x18>
 80050ee:	2200      	movs	r2, #0
 80050f0:	2180      	movs	r1, #128	; 0x80
 80050f2:	682e      	ldr	r6, [r5, #0]
 80050f4:	602a      	str	r2, [r5, #0]
 80050f6:	001a      	movs	r2, r3
 80050f8:	0149      	lsls	r1, r1, #5
 80050fa:	400a      	ands	r2, r1
 80050fc:	420b      	tst	r3, r1
 80050fe:	d034      	beq.n	800516a <__sflush_r+0x9e>
 8005100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	075b      	lsls	r3, r3, #29
 8005106:	d506      	bpl.n	8005116 <__sflush_r+0x4a>
 8005108:	6863      	ldr	r3, [r4, #4]
 800510a:	1ac0      	subs	r0, r0, r3
 800510c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <__sflush_r+0x4a>
 8005112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005114:	1ac0      	subs	r0, r0, r3
 8005116:	0002      	movs	r2, r0
 8005118:	6a21      	ldr	r1, [r4, #32]
 800511a:	2300      	movs	r3, #0
 800511c:	0028      	movs	r0, r5
 800511e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005120:	47b8      	blx	r7
 8005122:	89a1      	ldrh	r1, [r4, #12]
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d106      	bne.n	8005136 <__sflush_r+0x6a>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	2b1d      	cmp	r3, #29
 800512c:	d831      	bhi.n	8005192 <__sflush_r+0xc6>
 800512e:	4a2c      	ldr	r2, [pc, #176]	; (80051e0 <__sflush_r+0x114>)
 8005130:	40da      	lsrs	r2, r3
 8005132:	07d3      	lsls	r3, r2, #31
 8005134:	d52d      	bpl.n	8005192 <__sflush_r+0xc6>
 8005136:	2300      	movs	r3, #0
 8005138:	6063      	str	r3, [r4, #4]
 800513a:	6923      	ldr	r3, [r4, #16]
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	04cb      	lsls	r3, r1, #19
 8005140:	d505      	bpl.n	800514e <__sflush_r+0x82>
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	d102      	bne.n	800514c <__sflush_r+0x80>
 8005146:	682b      	ldr	r3, [r5, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d100      	bne.n	800514e <__sflush_r+0x82>
 800514c:	6560      	str	r0, [r4, #84]	; 0x54
 800514e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005150:	602e      	str	r6, [r5, #0]
 8005152:	2900      	cmp	r1, #0
 8005154:	d0c6      	beq.n	80050e4 <__sflush_r+0x18>
 8005156:	0023      	movs	r3, r4
 8005158:	3344      	adds	r3, #68	; 0x44
 800515a:	4299      	cmp	r1, r3
 800515c:	d002      	beq.n	8005164 <__sflush_r+0x98>
 800515e:	0028      	movs	r0, r5
 8005160:	f7ff f9a4 	bl	80044ac <_free_r>
 8005164:	2000      	movs	r0, #0
 8005166:	6360      	str	r0, [r4, #52]	; 0x34
 8005168:	e7bd      	b.n	80050e6 <__sflush_r+0x1a>
 800516a:	2301      	movs	r3, #1
 800516c:	0028      	movs	r0, r5
 800516e:	6a21      	ldr	r1, [r4, #32]
 8005170:	47b8      	blx	r7
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	d1c5      	bne.n	8005102 <__sflush_r+0x36>
 8005176:	682b      	ldr	r3, [r5, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0c2      	beq.n	8005102 <__sflush_r+0x36>
 800517c:	2b1d      	cmp	r3, #29
 800517e:	d001      	beq.n	8005184 <__sflush_r+0xb8>
 8005180:	2b16      	cmp	r3, #22
 8005182:	d101      	bne.n	8005188 <__sflush_r+0xbc>
 8005184:	602e      	str	r6, [r5, #0]
 8005186:	e7ad      	b.n	80050e4 <__sflush_r+0x18>
 8005188:	2340      	movs	r3, #64	; 0x40
 800518a:	89a2      	ldrh	r2, [r4, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	81a3      	strh	r3, [r4, #12]
 8005190:	e7a9      	b.n	80050e6 <__sflush_r+0x1a>
 8005192:	2340      	movs	r3, #64	; 0x40
 8005194:	430b      	orrs	r3, r1
 8005196:	e7fa      	b.n	800518e <__sflush_r+0xc2>
 8005198:	690f      	ldr	r7, [r1, #16]
 800519a:	2f00      	cmp	r7, #0
 800519c:	d0a2      	beq.n	80050e4 <__sflush_r+0x18>
 800519e:	680a      	ldr	r2, [r1, #0]
 80051a0:	600f      	str	r7, [r1, #0]
 80051a2:	1bd2      	subs	r2, r2, r7
 80051a4:	9201      	str	r2, [sp, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	079b      	lsls	r3, r3, #30
 80051aa:	d100      	bne.n	80051ae <__sflush_r+0xe2>
 80051ac:	694a      	ldr	r2, [r1, #20]
 80051ae:	60a2      	str	r2, [r4, #8]
 80051b0:	9b01      	ldr	r3, [sp, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dc00      	bgt.n	80051b8 <__sflush_r+0xec>
 80051b6:	e795      	b.n	80050e4 <__sflush_r+0x18>
 80051b8:	003a      	movs	r2, r7
 80051ba:	0028      	movs	r0, r5
 80051bc:	9b01      	ldr	r3, [sp, #4]
 80051be:	6a21      	ldr	r1, [r4, #32]
 80051c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051c2:	47b0      	blx	r6
 80051c4:	2800      	cmp	r0, #0
 80051c6:	dc06      	bgt.n	80051d6 <__sflush_r+0x10a>
 80051c8:	2340      	movs	r3, #64	; 0x40
 80051ca:	2001      	movs	r0, #1
 80051cc:	89a2      	ldrh	r2, [r4, #12]
 80051ce:	4240      	negs	r0, r0
 80051d0:	4313      	orrs	r3, r2
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	e787      	b.n	80050e6 <__sflush_r+0x1a>
 80051d6:	9b01      	ldr	r3, [sp, #4]
 80051d8:	183f      	adds	r7, r7, r0
 80051da:	1a1b      	subs	r3, r3, r0
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	e7e7      	b.n	80051b0 <__sflush_r+0xe4>
 80051e0:	20400001 	.word	0x20400001

080051e4 <_fflush_r>:
 80051e4:	690b      	ldr	r3, [r1, #16]
 80051e6:	b570      	push	{r4, r5, r6, lr}
 80051e8:	0005      	movs	r5, r0
 80051ea:	000c      	movs	r4, r1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <_fflush_r+0x12>
 80051f0:	2500      	movs	r5, #0
 80051f2:	0028      	movs	r0, r5
 80051f4:	bd70      	pop	{r4, r5, r6, pc}
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d004      	beq.n	8005204 <_fflush_r+0x20>
 80051fa:	6983      	ldr	r3, [r0, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <_fflush_r+0x20>
 8005200:	f000 f892 	bl	8005328 <__sinit>
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <_fflush_r+0x74>)
 8005206:	429c      	cmp	r4, r3
 8005208:	d11b      	bne.n	8005242 <_fflush_r+0x5e>
 800520a:	686c      	ldr	r4, [r5, #4]
 800520c:	220c      	movs	r2, #12
 800520e:	5ea3      	ldrsh	r3, [r4, r2]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ed      	beq.n	80051f0 <_fflush_r+0xc>
 8005214:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005216:	07d2      	lsls	r2, r2, #31
 8005218:	d404      	bmi.n	8005224 <_fflush_r+0x40>
 800521a:	059b      	lsls	r3, r3, #22
 800521c:	d402      	bmi.n	8005224 <_fflush_r+0x40>
 800521e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005220:	f000 f923 	bl	800546a <__retarget_lock_acquire_recursive>
 8005224:	0028      	movs	r0, r5
 8005226:	0021      	movs	r1, r4
 8005228:	f7ff ff50 	bl	80050cc <__sflush_r>
 800522c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800522e:	0005      	movs	r5, r0
 8005230:	07db      	lsls	r3, r3, #31
 8005232:	d4de      	bmi.n	80051f2 <_fflush_r+0xe>
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	059b      	lsls	r3, r3, #22
 8005238:	d4db      	bmi.n	80051f2 <_fflush_r+0xe>
 800523a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800523c:	f000 f916 	bl	800546c <__retarget_lock_release_recursive>
 8005240:	e7d7      	b.n	80051f2 <_fflush_r+0xe>
 8005242:	4b06      	ldr	r3, [pc, #24]	; (800525c <_fflush_r+0x78>)
 8005244:	429c      	cmp	r4, r3
 8005246:	d101      	bne.n	800524c <_fflush_r+0x68>
 8005248:	68ac      	ldr	r4, [r5, #8]
 800524a:	e7df      	b.n	800520c <_fflush_r+0x28>
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <_fflush_r+0x7c>)
 800524e:	429c      	cmp	r4, r3
 8005250:	d1dc      	bne.n	800520c <_fflush_r+0x28>
 8005252:	68ec      	ldr	r4, [r5, #12]
 8005254:	e7da      	b.n	800520c <_fflush_r+0x28>
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	08005bb4 	.word	0x08005bb4
 800525c:	08005bd4 	.word	0x08005bd4
 8005260:	08005b94 	.word	0x08005b94

08005264 <std>:
 8005264:	2300      	movs	r3, #0
 8005266:	b510      	push	{r4, lr}
 8005268:	0004      	movs	r4, r0
 800526a:	6003      	str	r3, [r0, #0]
 800526c:	6043      	str	r3, [r0, #4]
 800526e:	6083      	str	r3, [r0, #8]
 8005270:	8181      	strh	r1, [r0, #12]
 8005272:	6643      	str	r3, [r0, #100]	; 0x64
 8005274:	0019      	movs	r1, r3
 8005276:	81c2      	strh	r2, [r0, #14]
 8005278:	6103      	str	r3, [r0, #16]
 800527a:	6143      	str	r3, [r0, #20]
 800527c:	6183      	str	r3, [r0, #24]
 800527e:	2208      	movs	r2, #8
 8005280:	305c      	adds	r0, #92	; 0x5c
 8005282:	f7ff f809 	bl	8004298 <memset>
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <std+0x38>)
 8005288:	6224      	str	r4, [r4, #32]
 800528a:	6263      	str	r3, [r4, #36]	; 0x24
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <std+0x3c>)
 800528e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <std+0x40>)
 8005292:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <std+0x44>)
 8005296:	6323      	str	r3, [r4, #48]	; 0x30
 8005298:	bd10      	pop	{r4, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	080056ad 	.word	0x080056ad
 80052a0:	080056d5 	.word	0x080056d5
 80052a4:	0800570d 	.word	0x0800570d
 80052a8:	08005739 	.word	0x08005739

080052ac <_cleanup_r>:
 80052ac:	b510      	push	{r4, lr}
 80052ae:	4902      	ldr	r1, [pc, #8]	; (80052b8 <_cleanup_r+0xc>)
 80052b0:	f000 f8ba 	bl	8005428 <_fwalk_reent>
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	080051e5 	.word	0x080051e5

080052bc <__sfmoreglue>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	2568      	movs	r5, #104	; 0x68
 80052c0:	1e4a      	subs	r2, r1, #1
 80052c2:	4355      	muls	r5, r2
 80052c4:	000e      	movs	r6, r1
 80052c6:	0029      	movs	r1, r5
 80052c8:	3174      	adds	r1, #116	; 0x74
 80052ca:	f7ff f95b 	bl	8004584 <_malloc_r>
 80052ce:	1e04      	subs	r4, r0, #0
 80052d0:	d008      	beq.n	80052e4 <__sfmoreglue+0x28>
 80052d2:	2100      	movs	r1, #0
 80052d4:	002a      	movs	r2, r5
 80052d6:	6001      	str	r1, [r0, #0]
 80052d8:	6046      	str	r6, [r0, #4]
 80052da:	300c      	adds	r0, #12
 80052dc:	60a0      	str	r0, [r4, #8]
 80052de:	3268      	adds	r2, #104	; 0x68
 80052e0:	f7fe ffda 	bl	8004298 <memset>
 80052e4:	0020      	movs	r0, r4
 80052e6:	bd70      	pop	{r4, r5, r6, pc}

080052e8 <__sfp_lock_acquire>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	4802      	ldr	r0, [pc, #8]	; (80052f4 <__sfp_lock_acquire+0xc>)
 80052ec:	f000 f8bd 	bl	800546a <__retarget_lock_acquire_recursive>
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	200004d9 	.word	0x200004d9

080052f8 <__sfp_lock_release>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	4802      	ldr	r0, [pc, #8]	; (8005304 <__sfp_lock_release+0xc>)
 80052fc:	f000 f8b6 	bl	800546c <__retarget_lock_release_recursive>
 8005300:	bd10      	pop	{r4, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	200004d9 	.word	0x200004d9

08005308 <__sinit_lock_acquire>:
 8005308:	b510      	push	{r4, lr}
 800530a:	4802      	ldr	r0, [pc, #8]	; (8005314 <__sinit_lock_acquire+0xc>)
 800530c:	f000 f8ad 	bl	800546a <__retarget_lock_acquire_recursive>
 8005310:	bd10      	pop	{r4, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	200004da 	.word	0x200004da

08005318 <__sinit_lock_release>:
 8005318:	b510      	push	{r4, lr}
 800531a:	4802      	ldr	r0, [pc, #8]	; (8005324 <__sinit_lock_release+0xc>)
 800531c:	f000 f8a6 	bl	800546c <__retarget_lock_release_recursive>
 8005320:	bd10      	pop	{r4, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	200004da 	.word	0x200004da

08005328 <__sinit>:
 8005328:	b513      	push	{r0, r1, r4, lr}
 800532a:	0004      	movs	r4, r0
 800532c:	f7ff ffec 	bl	8005308 <__sinit_lock_acquire>
 8005330:	69a3      	ldr	r3, [r4, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <__sinit+0x14>
 8005336:	f7ff ffef 	bl	8005318 <__sinit_lock_release>
 800533a:	bd13      	pop	{r0, r1, r4, pc}
 800533c:	64a3      	str	r3, [r4, #72]	; 0x48
 800533e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005340:	6523      	str	r3, [r4, #80]	; 0x50
 8005342:	4b13      	ldr	r3, [pc, #76]	; (8005390 <__sinit+0x68>)
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <__sinit+0x6c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	62a2      	str	r2, [r4, #40]	; 0x28
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	42a3      	cmp	r3, r4
 800534e:	d101      	bne.n	8005354 <__sinit+0x2c>
 8005350:	2301      	movs	r3, #1
 8005352:	61a3      	str	r3, [r4, #24]
 8005354:	0020      	movs	r0, r4
 8005356:	f000 f81f 	bl	8005398 <__sfp>
 800535a:	6060      	str	r0, [r4, #4]
 800535c:	0020      	movs	r0, r4
 800535e:	f000 f81b 	bl	8005398 <__sfp>
 8005362:	60a0      	str	r0, [r4, #8]
 8005364:	0020      	movs	r0, r4
 8005366:	f000 f817 	bl	8005398 <__sfp>
 800536a:	2200      	movs	r2, #0
 800536c:	2104      	movs	r1, #4
 800536e:	60e0      	str	r0, [r4, #12]
 8005370:	6860      	ldr	r0, [r4, #4]
 8005372:	f7ff ff77 	bl	8005264 <std>
 8005376:	2201      	movs	r2, #1
 8005378:	2109      	movs	r1, #9
 800537a:	68a0      	ldr	r0, [r4, #8]
 800537c:	f7ff ff72 	bl	8005264 <std>
 8005380:	2202      	movs	r2, #2
 8005382:	2112      	movs	r1, #18
 8005384:	68e0      	ldr	r0, [r4, #12]
 8005386:	f7ff ff6d 	bl	8005264 <std>
 800538a:	2301      	movs	r3, #1
 800538c:	61a3      	str	r3, [r4, #24]
 800538e:	e7d2      	b.n	8005336 <__sinit+0xe>
 8005390:	08005aac 	.word	0x08005aac
 8005394:	080052ad 	.word	0x080052ad

08005398 <__sfp>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	0007      	movs	r7, r0
 800539c:	f7ff ffa4 	bl	80052e8 <__sfp_lock_acquire>
 80053a0:	4b1f      	ldr	r3, [pc, #124]	; (8005420 <__sfp+0x88>)
 80053a2:	681e      	ldr	r6, [r3, #0]
 80053a4:	69b3      	ldr	r3, [r6, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <__sfp+0x18>
 80053aa:	0030      	movs	r0, r6
 80053ac:	f7ff ffbc 	bl	8005328 <__sinit>
 80053b0:	3648      	adds	r6, #72	; 0x48
 80053b2:	68b4      	ldr	r4, [r6, #8]
 80053b4:	6873      	ldr	r3, [r6, #4]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	d504      	bpl.n	80053c4 <__sfp+0x2c>
 80053ba:	6833      	ldr	r3, [r6, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d022      	beq.n	8005406 <__sfp+0x6e>
 80053c0:	6836      	ldr	r6, [r6, #0]
 80053c2:	e7f6      	b.n	80053b2 <__sfp+0x1a>
 80053c4:	220c      	movs	r2, #12
 80053c6:	5ea5      	ldrsh	r5, [r4, r2]
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	d11a      	bne.n	8005402 <__sfp+0x6a>
 80053cc:	0020      	movs	r0, r4
 80053ce:	4b15      	ldr	r3, [pc, #84]	; (8005424 <__sfp+0x8c>)
 80053d0:	3058      	adds	r0, #88	; 0x58
 80053d2:	60e3      	str	r3, [r4, #12]
 80053d4:	6665      	str	r5, [r4, #100]	; 0x64
 80053d6:	f000 f847 	bl	8005468 <__retarget_lock_init_recursive>
 80053da:	f7ff ff8d 	bl	80052f8 <__sfp_lock_release>
 80053de:	0020      	movs	r0, r4
 80053e0:	2208      	movs	r2, #8
 80053e2:	0029      	movs	r1, r5
 80053e4:	6025      	str	r5, [r4, #0]
 80053e6:	60a5      	str	r5, [r4, #8]
 80053e8:	6065      	str	r5, [r4, #4]
 80053ea:	6125      	str	r5, [r4, #16]
 80053ec:	6165      	str	r5, [r4, #20]
 80053ee:	61a5      	str	r5, [r4, #24]
 80053f0:	305c      	adds	r0, #92	; 0x5c
 80053f2:	f7fe ff51 	bl	8004298 <memset>
 80053f6:	6365      	str	r5, [r4, #52]	; 0x34
 80053f8:	63a5      	str	r5, [r4, #56]	; 0x38
 80053fa:	64a5      	str	r5, [r4, #72]	; 0x48
 80053fc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80053fe:	0020      	movs	r0, r4
 8005400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005402:	3468      	adds	r4, #104	; 0x68
 8005404:	e7d7      	b.n	80053b6 <__sfp+0x1e>
 8005406:	2104      	movs	r1, #4
 8005408:	0038      	movs	r0, r7
 800540a:	f7ff ff57 	bl	80052bc <__sfmoreglue>
 800540e:	1e04      	subs	r4, r0, #0
 8005410:	6030      	str	r0, [r6, #0]
 8005412:	d1d5      	bne.n	80053c0 <__sfp+0x28>
 8005414:	f7ff ff70 	bl	80052f8 <__sfp_lock_release>
 8005418:	230c      	movs	r3, #12
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	e7ef      	b.n	80053fe <__sfp+0x66>
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	08005aac 	.word	0x08005aac
 8005424:	ffff0001 	.word	0xffff0001

08005428 <_fwalk_reent>:
 8005428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800542a:	0004      	movs	r4, r0
 800542c:	0006      	movs	r6, r0
 800542e:	2700      	movs	r7, #0
 8005430:	9101      	str	r1, [sp, #4]
 8005432:	3448      	adds	r4, #72	; 0x48
 8005434:	6863      	ldr	r3, [r4, #4]
 8005436:	68a5      	ldr	r5, [r4, #8]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	9b00      	ldr	r3, [sp, #0]
 800543c:	3b01      	subs	r3, #1
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	d504      	bpl.n	800544c <_fwalk_reent+0x24>
 8005442:	6824      	ldr	r4, [r4, #0]
 8005444:	2c00      	cmp	r4, #0
 8005446:	d1f5      	bne.n	8005434 <_fwalk_reent+0xc>
 8005448:	0038      	movs	r0, r7
 800544a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800544c:	89ab      	ldrh	r3, [r5, #12]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d908      	bls.n	8005464 <_fwalk_reent+0x3c>
 8005452:	220e      	movs	r2, #14
 8005454:	5eab      	ldrsh	r3, [r5, r2]
 8005456:	3301      	adds	r3, #1
 8005458:	d004      	beq.n	8005464 <_fwalk_reent+0x3c>
 800545a:	0029      	movs	r1, r5
 800545c:	0030      	movs	r0, r6
 800545e:	9b01      	ldr	r3, [sp, #4]
 8005460:	4798      	blx	r3
 8005462:	4307      	orrs	r7, r0
 8005464:	3568      	adds	r5, #104	; 0x68
 8005466:	e7e8      	b.n	800543a <_fwalk_reent+0x12>

08005468 <__retarget_lock_init_recursive>:
 8005468:	4770      	bx	lr

0800546a <__retarget_lock_acquire_recursive>:
 800546a:	4770      	bx	lr

0800546c <__retarget_lock_release_recursive>:
 800546c:	4770      	bx	lr
	...

08005470 <__swhatbuf_r>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	000e      	movs	r6, r1
 8005474:	001d      	movs	r5, r3
 8005476:	230e      	movs	r3, #14
 8005478:	5ec9      	ldrsh	r1, [r1, r3]
 800547a:	0014      	movs	r4, r2
 800547c:	b096      	sub	sp, #88	; 0x58
 800547e:	2900      	cmp	r1, #0
 8005480:	da08      	bge.n	8005494 <__swhatbuf_r+0x24>
 8005482:	220c      	movs	r2, #12
 8005484:	5eb3      	ldrsh	r3, [r6, r2]
 8005486:	2200      	movs	r2, #0
 8005488:	602a      	str	r2, [r5, #0]
 800548a:	061b      	lsls	r3, r3, #24
 800548c:	d411      	bmi.n	80054b2 <__swhatbuf_r+0x42>
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	e00f      	b.n	80054b4 <__swhatbuf_r+0x44>
 8005494:	466a      	mov	r2, sp
 8005496:	f000 f97b 	bl	8005790 <_fstat_r>
 800549a:	2800      	cmp	r0, #0
 800549c:	dbf1      	blt.n	8005482 <__swhatbuf_r+0x12>
 800549e:	23f0      	movs	r3, #240	; 0xf0
 80054a0:	9901      	ldr	r1, [sp, #4]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	4019      	ands	r1, r3
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <__swhatbuf_r+0x4c>)
 80054a8:	18c9      	adds	r1, r1, r3
 80054aa:	424b      	negs	r3, r1
 80054ac:	4159      	adcs	r1, r3
 80054ae:	6029      	str	r1, [r5, #0]
 80054b0:	e7ed      	b.n	800548e <__swhatbuf_r+0x1e>
 80054b2:	2340      	movs	r3, #64	; 0x40
 80054b4:	2000      	movs	r0, #0
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	b016      	add	sp, #88	; 0x58
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	ffffe000 	.word	0xffffe000

080054c0 <__smakebuf_r>:
 80054c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054c2:	2602      	movs	r6, #2
 80054c4:	898b      	ldrh	r3, [r1, #12]
 80054c6:	0005      	movs	r5, r0
 80054c8:	000c      	movs	r4, r1
 80054ca:	4233      	tst	r3, r6
 80054cc:	d006      	beq.n	80054dc <__smakebuf_r+0x1c>
 80054ce:	0023      	movs	r3, r4
 80054d0:	3347      	adds	r3, #71	; 0x47
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	6123      	str	r3, [r4, #16]
 80054d6:	2301      	movs	r3, #1
 80054d8:	6163      	str	r3, [r4, #20]
 80054da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80054dc:	466a      	mov	r2, sp
 80054de:	ab01      	add	r3, sp, #4
 80054e0:	f7ff ffc6 	bl	8005470 <__swhatbuf_r>
 80054e4:	9900      	ldr	r1, [sp, #0]
 80054e6:	0007      	movs	r7, r0
 80054e8:	0028      	movs	r0, r5
 80054ea:	f7ff f84b 	bl	8004584 <_malloc_r>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d108      	bne.n	8005504 <__smakebuf_r+0x44>
 80054f2:	220c      	movs	r2, #12
 80054f4:	5ea3      	ldrsh	r3, [r4, r2]
 80054f6:	059a      	lsls	r2, r3, #22
 80054f8:	d4ef      	bmi.n	80054da <__smakebuf_r+0x1a>
 80054fa:	2203      	movs	r2, #3
 80054fc:	4393      	bics	r3, r2
 80054fe:	431e      	orrs	r6, r3
 8005500:	81a6      	strh	r6, [r4, #12]
 8005502:	e7e4      	b.n	80054ce <__smakebuf_r+0xe>
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <__smakebuf_r+0x84>)
 8005506:	62ab      	str	r3, [r5, #40]	; 0x28
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	89a2      	ldrh	r2, [r4, #12]
 800550c:	6020      	str	r0, [r4, #0]
 800550e:	4313      	orrs	r3, r2
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	9b00      	ldr	r3, [sp, #0]
 8005514:	6120      	str	r0, [r4, #16]
 8005516:	6163      	str	r3, [r4, #20]
 8005518:	9b01      	ldr	r3, [sp, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <__smakebuf_r+0x7a>
 800551e:	0028      	movs	r0, r5
 8005520:	230e      	movs	r3, #14
 8005522:	5ee1      	ldrsh	r1, [r4, r3]
 8005524:	f000 f946 	bl	80057b4 <_isatty_r>
 8005528:	2800      	cmp	r0, #0
 800552a:	d006      	beq.n	800553a <__smakebuf_r+0x7a>
 800552c:	2203      	movs	r2, #3
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	4393      	bics	r3, r2
 8005532:	001a      	movs	r2, r3
 8005534:	2301      	movs	r3, #1
 8005536:	4313      	orrs	r3, r2
 8005538:	81a3      	strh	r3, [r4, #12]
 800553a:	89a0      	ldrh	r0, [r4, #12]
 800553c:	4307      	orrs	r7, r0
 800553e:	81a7      	strh	r7, [r4, #12]
 8005540:	e7cb      	b.n	80054da <__smakebuf_r+0x1a>
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	080052ad 	.word	0x080052ad

08005548 <memchr>:
 8005548:	b2c9      	uxtb	r1, r1
 800554a:	1882      	adds	r2, r0, r2
 800554c:	4290      	cmp	r0, r2
 800554e:	d101      	bne.n	8005554 <memchr+0xc>
 8005550:	2000      	movs	r0, #0
 8005552:	4770      	bx	lr
 8005554:	7803      	ldrb	r3, [r0, #0]
 8005556:	428b      	cmp	r3, r1
 8005558:	d0fb      	beq.n	8005552 <memchr+0xa>
 800555a:	3001      	adds	r0, #1
 800555c:	e7f6      	b.n	800554c <memchr+0x4>

0800555e <memcpy>:
 800555e:	2300      	movs	r3, #0
 8005560:	b510      	push	{r4, lr}
 8005562:	429a      	cmp	r2, r3
 8005564:	d100      	bne.n	8005568 <memcpy+0xa>
 8005566:	bd10      	pop	{r4, pc}
 8005568:	5ccc      	ldrb	r4, [r1, r3]
 800556a:	54c4      	strb	r4, [r0, r3]
 800556c:	3301      	adds	r3, #1
 800556e:	e7f8      	b.n	8005562 <memcpy+0x4>

08005570 <memmove>:
 8005570:	b510      	push	{r4, lr}
 8005572:	4288      	cmp	r0, r1
 8005574:	d902      	bls.n	800557c <memmove+0xc>
 8005576:	188b      	adds	r3, r1, r2
 8005578:	4298      	cmp	r0, r3
 800557a:	d303      	bcc.n	8005584 <memmove+0x14>
 800557c:	2300      	movs	r3, #0
 800557e:	e007      	b.n	8005590 <memmove+0x20>
 8005580:	5c8b      	ldrb	r3, [r1, r2]
 8005582:	5483      	strb	r3, [r0, r2]
 8005584:	3a01      	subs	r2, #1
 8005586:	d2fb      	bcs.n	8005580 <memmove+0x10>
 8005588:	bd10      	pop	{r4, pc}
 800558a:	5ccc      	ldrb	r4, [r1, r3]
 800558c:	54c4      	strb	r4, [r0, r3]
 800558e:	3301      	adds	r3, #1
 8005590:	429a      	cmp	r2, r3
 8005592:	d1fa      	bne.n	800558a <memmove+0x1a>
 8005594:	e7f8      	b.n	8005588 <memmove+0x18>
	...

08005598 <__malloc_lock>:
 8005598:	b510      	push	{r4, lr}
 800559a:	4802      	ldr	r0, [pc, #8]	; (80055a4 <__malloc_lock+0xc>)
 800559c:	f7ff ff65 	bl	800546a <__retarget_lock_acquire_recursive>
 80055a0:	bd10      	pop	{r4, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	200004d8 	.word	0x200004d8

080055a8 <__malloc_unlock>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	4802      	ldr	r0, [pc, #8]	; (80055b4 <__malloc_unlock+0xc>)
 80055ac:	f7ff ff5e 	bl	800546c <__retarget_lock_release_recursive>
 80055b0:	bd10      	pop	{r4, pc}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	200004d8 	.word	0x200004d8

080055b8 <_realloc_r>:
 80055b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ba:	0007      	movs	r7, r0
 80055bc:	000e      	movs	r6, r1
 80055be:	0014      	movs	r4, r2
 80055c0:	2900      	cmp	r1, #0
 80055c2:	d105      	bne.n	80055d0 <_realloc_r+0x18>
 80055c4:	0011      	movs	r1, r2
 80055c6:	f7fe ffdd 	bl	8004584 <_malloc_r>
 80055ca:	0005      	movs	r5, r0
 80055cc:	0028      	movs	r0, r5
 80055ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055d0:	2a00      	cmp	r2, #0
 80055d2:	d103      	bne.n	80055dc <_realloc_r+0x24>
 80055d4:	f7fe ff6a 	bl	80044ac <_free_r>
 80055d8:	0025      	movs	r5, r4
 80055da:	e7f7      	b.n	80055cc <_realloc_r+0x14>
 80055dc:	f000 f910 	bl	8005800 <_malloc_usable_size_r>
 80055e0:	9001      	str	r0, [sp, #4]
 80055e2:	4284      	cmp	r4, r0
 80055e4:	d803      	bhi.n	80055ee <_realloc_r+0x36>
 80055e6:	0035      	movs	r5, r6
 80055e8:	0843      	lsrs	r3, r0, #1
 80055ea:	42a3      	cmp	r3, r4
 80055ec:	d3ee      	bcc.n	80055cc <_realloc_r+0x14>
 80055ee:	0021      	movs	r1, r4
 80055f0:	0038      	movs	r0, r7
 80055f2:	f7fe ffc7 	bl	8004584 <_malloc_r>
 80055f6:	1e05      	subs	r5, r0, #0
 80055f8:	d0e8      	beq.n	80055cc <_realloc_r+0x14>
 80055fa:	9b01      	ldr	r3, [sp, #4]
 80055fc:	0022      	movs	r2, r4
 80055fe:	429c      	cmp	r4, r3
 8005600:	d900      	bls.n	8005604 <_realloc_r+0x4c>
 8005602:	001a      	movs	r2, r3
 8005604:	0031      	movs	r1, r6
 8005606:	0028      	movs	r0, r5
 8005608:	f7ff ffa9 	bl	800555e <memcpy>
 800560c:	0031      	movs	r1, r6
 800560e:	0038      	movs	r0, r7
 8005610:	f7fe ff4c 	bl	80044ac <_free_r>
 8005614:	e7da      	b.n	80055cc <_realloc_r+0x14>

08005616 <_raise_r>:
 8005616:	b570      	push	{r4, r5, r6, lr}
 8005618:	0004      	movs	r4, r0
 800561a:	000d      	movs	r5, r1
 800561c:	291f      	cmp	r1, #31
 800561e:	d904      	bls.n	800562a <_raise_r+0x14>
 8005620:	2316      	movs	r3, #22
 8005622:	6003      	str	r3, [r0, #0]
 8005624:	2001      	movs	r0, #1
 8005626:	4240      	negs	r0, r0
 8005628:	bd70      	pop	{r4, r5, r6, pc}
 800562a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <_raise_r+0x24>
 8005630:	008a      	lsls	r2, r1, #2
 8005632:	189b      	adds	r3, r3, r2
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	2a00      	cmp	r2, #0
 8005638:	d108      	bne.n	800564c <_raise_r+0x36>
 800563a:	0020      	movs	r0, r4
 800563c:	f000 f832 	bl	80056a4 <_getpid_r>
 8005640:	002a      	movs	r2, r5
 8005642:	0001      	movs	r1, r0
 8005644:	0020      	movs	r0, r4
 8005646:	f000 f81b 	bl	8005680 <_kill_r>
 800564a:	e7ed      	b.n	8005628 <_raise_r+0x12>
 800564c:	2000      	movs	r0, #0
 800564e:	2a01      	cmp	r2, #1
 8005650:	d0ea      	beq.n	8005628 <_raise_r+0x12>
 8005652:	1c51      	adds	r1, r2, #1
 8005654:	d103      	bne.n	800565e <_raise_r+0x48>
 8005656:	2316      	movs	r3, #22
 8005658:	3001      	adds	r0, #1
 800565a:	6023      	str	r3, [r4, #0]
 800565c:	e7e4      	b.n	8005628 <_raise_r+0x12>
 800565e:	2400      	movs	r4, #0
 8005660:	0028      	movs	r0, r5
 8005662:	601c      	str	r4, [r3, #0]
 8005664:	4790      	blx	r2
 8005666:	0020      	movs	r0, r4
 8005668:	e7de      	b.n	8005628 <_raise_r+0x12>
	...

0800566c <raise>:
 800566c:	b510      	push	{r4, lr}
 800566e:	4b03      	ldr	r3, [pc, #12]	; (800567c <raise+0x10>)
 8005670:	0001      	movs	r1, r0
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	f7ff ffcf 	bl	8005616 <_raise_r>
 8005678:	bd10      	pop	{r4, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	2000009c 	.word	0x2000009c

08005680 <_kill_r>:
 8005680:	2300      	movs	r3, #0
 8005682:	b570      	push	{r4, r5, r6, lr}
 8005684:	4d06      	ldr	r5, [pc, #24]	; (80056a0 <_kill_r+0x20>)
 8005686:	0004      	movs	r4, r0
 8005688:	0008      	movs	r0, r1
 800568a:	0011      	movs	r1, r2
 800568c:	602b      	str	r3, [r5, #0]
 800568e:	f7fb fe01 	bl	8001294 <_kill>
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	d103      	bne.n	800569e <_kill_r+0x1e>
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d000      	beq.n	800569e <_kill_r+0x1e>
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	200004dc 	.word	0x200004dc

080056a4 <_getpid_r>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	f7fb fdef 	bl	8001288 <_getpid>
 80056aa:	bd10      	pop	{r4, pc}

080056ac <__sread>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	000c      	movs	r4, r1
 80056b0:	250e      	movs	r5, #14
 80056b2:	5f49      	ldrsh	r1, [r1, r5]
 80056b4:	f000 f8ac 	bl	8005810 <_read_r>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	db03      	blt.n	80056c4 <__sread+0x18>
 80056bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056be:	181b      	adds	r3, r3, r0
 80056c0:	6563      	str	r3, [r4, #84]	; 0x54
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	4a02      	ldr	r2, [pc, #8]	; (80056d0 <__sread+0x24>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	e7f9      	b.n	80056c2 <__sread+0x16>
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	ffffefff 	.word	0xffffefff

080056d4 <__swrite>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	001f      	movs	r7, r3
 80056d8:	898b      	ldrh	r3, [r1, #12]
 80056da:	0005      	movs	r5, r0
 80056dc:	000c      	movs	r4, r1
 80056de:	0016      	movs	r6, r2
 80056e0:	05db      	lsls	r3, r3, #23
 80056e2:	d505      	bpl.n	80056f0 <__swrite+0x1c>
 80056e4:	230e      	movs	r3, #14
 80056e6:	5ec9      	ldrsh	r1, [r1, r3]
 80056e8:	2200      	movs	r2, #0
 80056ea:	2302      	movs	r3, #2
 80056ec:	f000 f874 	bl	80057d8 <_lseek_r>
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	4a05      	ldr	r2, [pc, #20]	; (8005708 <__swrite+0x34>)
 80056f4:	0028      	movs	r0, r5
 80056f6:	4013      	ands	r3, r2
 80056f8:	81a3      	strh	r3, [r4, #12]
 80056fa:	0032      	movs	r2, r6
 80056fc:	230e      	movs	r3, #14
 80056fe:	5ee1      	ldrsh	r1, [r4, r3]
 8005700:	003b      	movs	r3, r7
 8005702:	f000 f81f 	bl	8005744 <_write_r>
 8005706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005708:	ffffefff 	.word	0xffffefff

0800570c <__sseek>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	000c      	movs	r4, r1
 8005710:	250e      	movs	r5, #14
 8005712:	5f49      	ldrsh	r1, [r1, r5]
 8005714:	f000 f860 	bl	80057d8 <_lseek_r>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	1c42      	adds	r2, r0, #1
 800571c:	d103      	bne.n	8005726 <__sseek+0x1a>
 800571e:	4a05      	ldr	r2, [pc, #20]	; (8005734 <__sseek+0x28>)
 8005720:	4013      	ands	r3, r2
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	bd70      	pop	{r4, r5, r6, pc}
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	0152      	lsls	r2, r2, #5
 800572a:	4313      	orrs	r3, r2
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	6560      	str	r0, [r4, #84]	; 0x54
 8005730:	e7f8      	b.n	8005724 <__sseek+0x18>
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	ffffefff 	.word	0xffffefff

08005738 <__sclose>:
 8005738:	b510      	push	{r4, lr}
 800573a:	230e      	movs	r3, #14
 800573c:	5ec9      	ldrsh	r1, [r1, r3]
 800573e:	f000 f815 	bl	800576c <_close_r>
 8005742:	bd10      	pop	{r4, pc}

08005744 <_write_r>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	0004      	movs	r4, r0
 8005748:	0008      	movs	r0, r1
 800574a:	0011      	movs	r1, r2
 800574c:	001a      	movs	r2, r3
 800574e:	2300      	movs	r3, #0
 8005750:	4d05      	ldr	r5, [pc, #20]	; (8005768 <_write_r+0x24>)
 8005752:	602b      	str	r3, [r5, #0]
 8005754:	f7fb fdd7 	bl	8001306 <_write>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d103      	bne.n	8005764 <_write_r+0x20>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d000      	beq.n	8005764 <_write_r+0x20>
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	bd70      	pop	{r4, r5, r6, pc}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	200004dc 	.word	0x200004dc

0800576c <_close_r>:
 800576c:	2300      	movs	r3, #0
 800576e:	b570      	push	{r4, r5, r6, lr}
 8005770:	4d06      	ldr	r5, [pc, #24]	; (800578c <_close_r+0x20>)
 8005772:	0004      	movs	r4, r0
 8005774:	0008      	movs	r0, r1
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	f7fb fde1 	bl	800133e <_close>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d103      	bne.n	8005788 <_close_r+0x1c>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d000      	beq.n	8005788 <_close_r+0x1c>
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	bd70      	pop	{r4, r5, r6, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	200004dc 	.word	0x200004dc

08005790 <_fstat_r>:
 8005790:	2300      	movs	r3, #0
 8005792:	b570      	push	{r4, r5, r6, lr}
 8005794:	4d06      	ldr	r5, [pc, #24]	; (80057b0 <_fstat_r+0x20>)
 8005796:	0004      	movs	r4, r0
 8005798:	0008      	movs	r0, r1
 800579a:	0011      	movs	r1, r2
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	f7fb fdd8 	bl	8001352 <_fstat>
 80057a2:	1c43      	adds	r3, r0, #1
 80057a4:	d103      	bne.n	80057ae <_fstat_r+0x1e>
 80057a6:	682b      	ldr	r3, [r5, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d000      	beq.n	80057ae <_fstat_r+0x1e>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
 80057b0:	200004dc 	.word	0x200004dc

080057b4 <_isatty_r>:
 80057b4:	2300      	movs	r3, #0
 80057b6:	b570      	push	{r4, r5, r6, lr}
 80057b8:	4d06      	ldr	r5, [pc, #24]	; (80057d4 <_isatty_r+0x20>)
 80057ba:	0004      	movs	r4, r0
 80057bc:	0008      	movs	r0, r1
 80057be:	602b      	str	r3, [r5, #0]
 80057c0:	f7fb fdd5 	bl	800136e <_isatty>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d103      	bne.n	80057d0 <_isatty_r+0x1c>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d000      	beq.n	80057d0 <_isatty_r+0x1c>
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	200004dc 	.word	0x200004dc

080057d8 <_lseek_r>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	0004      	movs	r4, r0
 80057dc:	0008      	movs	r0, r1
 80057de:	0011      	movs	r1, r2
 80057e0:	001a      	movs	r2, r3
 80057e2:	2300      	movs	r3, #0
 80057e4:	4d05      	ldr	r5, [pc, #20]	; (80057fc <_lseek_r+0x24>)
 80057e6:	602b      	str	r3, [r5, #0]
 80057e8:	f7fb fdca 	bl	8001380 <_lseek>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d103      	bne.n	80057f8 <_lseek_r+0x20>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d000      	beq.n	80057f8 <_lseek_r+0x20>
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	bd70      	pop	{r4, r5, r6, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	200004dc 	.word	0x200004dc

08005800 <_malloc_usable_size_r>:
 8005800:	1f0b      	subs	r3, r1, #4
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	1f18      	subs	r0, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	da01      	bge.n	800580e <_malloc_usable_size_r+0xe>
 800580a:	580b      	ldr	r3, [r1, r0]
 800580c:	18c0      	adds	r0, r0, r3
 800580e:	4770      	bx	lr

08005810 <_read_r>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	0004      	movs	r4, r0
 8005814:	0008      	movs	r0, r1
 8005816:	0011      	movs	r1, r2
 8005818:	001a      	movs	r2, r3
 800581a:	2300      	movs	r3, #0
 800581c:	4d05      	ldr	r5, [pc, #20]	; (8005834 <_read_r+0x24>)
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	f7fb fd54 	bl	80012cc <_read>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d103      	bne.n	8005830 <_read_r+0x20>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d000      	beq.n	8005830 <_read_r+0x20>
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	200004dc 	.word	0x200004dc

08005838 <_init>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr

08005844 <_fini>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr
